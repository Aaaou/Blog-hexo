{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\512.png","path":"img/512.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\comment_bg.png","path":"img/comment_bg.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\default_cover.jpg","path":"img/default_cover.jpg","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\16.png","path":"img/siteicon/16.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\manifest-icon-512.maskable.png","path":"img/siteicon/manifest-icon-512.maskable.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\manifest-icon-192.maskable.png","path":"img/siteicon/manifest-icon-192.maskable.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\32.png","path":"img/siteicon/32.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\apple-icon-180.png","path":"img/siteicon/apple-icon-180.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\ai_abstract.js","path":"js/anzhiyu/ai_abstract.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\comment_barrage.js","path":"js/anzhiyu/comment_barrage.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\people.js","path":"js/anzhiyu/people.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\random_friends_post.js","path":"js/anzhiyu/random_friends_post.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\right_click_menu.js","path":"js/anzhiyu/right_click_menu.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\search\\algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\search\\local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.md","hash":"b3625dcfe466fd2e9cc953cffff640950df61e30","modified":1716472308010},{"_id":"source\\_posts\\Hexo安装过程与问题解决.md","hash":"501e7736d7c606bee24db6ba769db0e2db651e5d","modified":1716202580110},{"_id":"source\\_posts\\hexo博客更新文章教程.md","hash":"56ca529af6cacb532f38b9ef93be6dbfadf1104a","modified":1716202597037},{"_id":"source\\_posts\\刷题日记（一）.md","hash":"841b5cfc15bbe0e78393fe52875df5527855c4fe","modified":1716231350826},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.md","hash":"4915b6675d2c6f42bf8ecd52ac0a4db7d7d674ef","modified":1716219599236},{"_id":"source\\_posts\\刷题日记（三）.md","hash":"1b6f6e3465d95a87ca1bff810fe0cc7ec91e80ca","modified":1716402770593},{"_id":"source\\_posts\\刷题日记（二）.md","hash":"01ff48258794e358fa86184a5abfc0e18bf41afd","modified":1716363323219},{"_id":"source\\_posts\\刷题日记：番外-链表（一）.md","hash":"cfe823343b25966d908c9ea02bfe8781f10cbf51","modified":1716745382612},{"_id":"source\\categories\\index.md","hash":"82b36a1030c4584c813b309bb35ec905a66814ce","modified":1716191441078},{"_id":"source\\json\\music.json","hash":"c1d46df151b6c4a006b31f9f73e83d80b651e97e","modified":1716186699788},{"_id":"source\\music\\index.md","hash":"d210abda08654a60b67f0a53ba288aeabc28aed0","modified":1716186368583},{"_id":"source\\tags\\index.md","hash":"155c42c433d937a717bfc95a20e18077e9075811","modified":1716191600601},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523195941533.png","hash":"57ce2e3e7dcde8c011988b060da5906f799cd8b0","modified":1716465581669},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523213437417.png","hash":"54b2c5f3a975df340b21663a2522e5851e583e65","modified":1716471277444},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523213506863.png","hash":"54b2c5f3a975df340b21663a2522e5851e583e65","modified":1716471306967},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523213521131.png","hash":"54b2c5f3a975df340b21663a2522e5851e583e65","modified":1716471321158},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523213517038.png","hash":"54b2c5f3a975df340b21663a2522e5851e583e65","modified":1716471317066},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523213609821.png","hash":"f5b467fa409169e7fb6422616691ab94fb25e951","modified":1716471370199},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523214241120.png","hash":"49d690d3c2dafa76b9f47884ba8cd2f154560b74","modified":1716471761144},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523214255418.png","hash":"a063dabb22b85277e769a3d5d3e7cf788cda44e1","modified":1716471775429},{"_id":"source\\_posts\\Hexo安装过程与问题解决.assets\\imgimage-20240425185141220-17141013416943.png","hash":"42f8f0af1b1a94236b93ef93243e805221385c94","modified":1714101341697},{"_id":"source\\_posts\\Hexo安装过程与问题解决.assets\\imgimage-20240425185141220.png","hash":"42f8f0af1b1a94236b93ef93243e805221385c94","modified":1714101334507},{"_id":"source\\_posts\\hexo博客更新文章教程.assets\\image-20240519152223867.png","hash":"9af6dd2180c747ca61a52516ed0cacc02d95a6e0","modified":1716103343875},{"_id":"source\\_posts\\hexo博客更新文章教程.assets\\image-20240519152735054.png","hash":"c01584101dfbf4d601603df3b48ab171f3779ace","modified":1716103655064},{"_id":"source\\_posts\\hexo博客更新文章教程.assets\\image-20240519153758654.png","hash":"6ba2f9008342a8e026b820702327e75b8a501ce3","modified":1716104278664},{"_id":"source\\_posts\\hexo博客更新文章教程.assets\\image-20240519160033819.png","hash":"f79f7e84c27c46a4e8f2715dec4f813fb4dccd15","modified":1716105633821},{"_id":"source\\_posts\\hexo博客更新文章教程.assets\\image-20240519155601082.png","hash":"a7098cfbdca90712cba1c76142758ab131c38fd0","modified":1716105361096},{"_id":"source\\_posts\\hexo博客更新文章教程.assets\\image-20240519160055399.png","hash":"f79f7e84c27c46a4e8f2715dec4f813fb4dccd15","modified":1716105655400},{"_id":"source\\_posts\\hexo博客更新文章教程.assets\\image-20240519160816009.png","hash":"451ba408e4f09be2cf7bf8cc103c36e21bf7e602","modified":1716106096016},{"_id":"source\\_posts\\hexo博客更新文章教程.assets\\image-20240519234535806.png","hash":"f3b5a0145ae82fbb1c8ca972b209f695df389e43","modified":1716133535824},{"_id":"source\\_posts\\hexo博客更新文章教程.assets\\image-20240519234608363.png","hash":"2e41eb1abe3ed7402c29138364567018750c4cb1","modified":1716133568378},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520165156759.png","hash":"7ae05c9796c0e16033e07757fcc817e9a83afe0f","modified":1716195116781},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520173656400.png","hash":"98905e48e88251b9f15ad0158d8377efd188bc73","modified":1716197816414},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520175739297.png","hash":"9a48bd75a67101569b12318d9c99c0afbdcf037e","modified":1716199059334},{"_id":"source\\_posts\\刷题日记（一）.assets\\160_statement.png","hash":"5ee1d1929b12ea5393a165b755798982ce93b852","modified":1716221573107},{"_id":"source\\_posts\\刷题日记（一）.assets\\200px-telephone-keypad2svg.png","hash":"61b9d0589157ce190e6f5bf9b503b4a4deefc0dc","modified":1716225915622},{"_id":"source\\_posts\\imgs\\img160_statement.png","hash":"5ee1d1929b12ea5393a165b755798982ce93b852","modified":1716229576687},{"_id":"source\\_posts\\刷题日记（一）.assets\\invert1-tree.jpg","hash":"e27629399672a50c05c1f034c0fcb4323d63c2a8","modified":1716224439982},{"_id":"source\\_posts\\imgs\\img200px-telephone-keypad2svg.png","hash":"61b9d0589157ce190e6f5bf9b503b4a4deefc0dc","modified":1716229576687},{"_id":"source\\_posts\\imgs\\imgimage-20240425184750101.png","hash":"cf47cfdcebd5127732261532f2e0cde42da2b384","modified":1716134548317},{"_id":"source\\_posts\\imgs\\imgimage-20240425185141220.png","hash":"42f8f0af1b1a94236b93ef93243e805221385c94","modified":1714043543961},{"_id":"source\\_posts\\imgs\\imgimage-20240425185325821.png","hash":"ca65155955a5f8bbeb8333f7cea128bf972b7816","modified":1716134548323},{"_id":"source\\_posts\\imgs\\imgimage-20240425191140144.png","hash":"ffc80ea3769717bde82089f358dae2d029a680eb","modified":1716134548356},{"_id":"source\\_posts\\imgs\\imgimage-20240425191627146.png","hash":"7319685d7a7db4ebb46e5b867e2532b1e2c37377","modified":1714047214058},{"_id":"source\\_posts\\imgs\\imgimage-20240425192903088.png","hash":"134921edc743b2af78d14da5d98ba2bb37ee218d","modified":1716134548393},{"_id":"source\\_posts\\imgs\\imgimage-20240425193853050.png","hash":"790febc403b6ecc502ee3fe99a799e7f47b5024a","modified":1716134548405},{"_id":"source\\_posts\\imgs\\imgimage-20240425194025109.png","hash":"f31c4a0cdeb55f7f31ed20c65036f246da60a4c3","modified":1716134548432},{"_id":"source\\_posts\\imgs\\imgimage-20240425194631335.png","hash":"8c58192f048f47f479367cc30ceae352cc1f15db","modified":1716134548453},{"_id":"source\\_posts\\imgs\\imgimage-20240425195944460.png","hash":"45ab0b26f6b75f521a4426b0256d9e5776296c3e","modified":1716134548467},{"_id":"source\\_posts\\imgs\\imgimage-20240425200457461.png","hash":"01dba948d635d2743b3478c0a5d8fa74cdc9b5f9","modified":1716134548480},{"_id":"source\\_posts\\imgs\\imgimage-20240519152735054.png","hash":"c01584101dfbf4d601603df3b48ab171f3779ace","modified":1716134548481},{"_id":"source\\_posts\\imgs\\imgimage-20240519152223867.png","hash":"9af6dd2180c747ca61a52516ed0cacc02d95a6e0","modified":1716134548481},{"_id":"source\\_posts\\imgs\\imgimage-20240519155601082.png","hash":"a7098cfbdca90712cba1c76142758ab131c38fd0","modified":1716134548482},{"_id":"source\\_posts\\imgs\\imgimage-20240519160055399.png","hash":"f79f7e84c27c46a4e8f2715dec4f813fb4dccd15","modified":1716134548483},{"_id":"source\\_posts\\imgs\\imgimage-20240519153758654.png","hash":"6ba2f9008342a8e026b820702327e75b8a501ce3","modified":1716134548482},{"_id":"source\\_posts\\imgs\\imgimage-20240519160816009.png","hash":"451ba408e4f09be2cf7bf8cc103c36e21bf7e602","modified":1716134548483},{"_id":"source\\_posts\\imgs\\imgimage-20240519234535806.png","hash":"f3b5a0145ae82fbb1c8ca972b209f695df389e43","modified":1716134548483},{"_id":"source\\_posts\\imgs\\imgimage-20240519234608363.png","hash":"2e41eb1abe3ed7402c29138364567018750c4cb1","modified":1716134548484},{"_id":"source\\_posts\\imgs\\imgimage-20240520165156759.png","hash":"7ae05c9796c0e16033e07757fcc817e9a83afe0f","modified":1716201019833},{"_id":"source\\_posts\\imgs\\imgimage-20240520173656400.png","hash":"98905e48e88251b9f15ad0158d8377efd188bc73","modified":1716201019839},{"_id":"source\\_posts\\imgs\\imgimage-20240520175739297.png","hash":"9a48bd75a67101569b12318d9c99c0afbdcf037e","modified":1716201019854},{"_id":"source\\_posts\\imgs\\imgimage-20240523195941533.png","hash":"57ce2e3e7dcde8c011988b060da5906f799cd8b0","modified":1716472415668},{"_id":"source\\_posts\\imgs\\imgimage-20240523213609821.png","hash":"f5b467fa409169e7fb6422616691ab94fb25e951","modified":1716472415682},{"_id":"source\\_posts\\imgs\\imgimage-20240523213437417.png","hash":"54b2c5f3a975df340b21663a2522e5851e583e65","modified":1716472415681},{"_id":"source\\_posts\\imgs\\imgimage-20240523214255418.png","hash":"a063dabb22b85277e769a3d5d3e7cf788cda44e1","modified":1716472415683},{"_id":"source\\_posts\\imgs\\imgimage-20240523214241120.png","hash":"49d690d3c2dafa76b9f47884ba8cd2f154560b74","modified":1716472415683},{"_id":"source\\_posts\\imgs\\imgimg1710669011479.png","hash":"1979838a63f786eab6d8814e9c80c7f23f406fd7","modified":1714100989778},{"_id":"source\\_posts\\imgs\\imgimg1710669593061.png","hash":"e05b98727cdc235dacab43ea6c4ac36591406242","modified":1714100989779},{"_id":"source\\_posts\\imgs\\imgimg1710747254487.png","hash":"a7099c6c053ee59d34341f11079b1c5a16a09705","modified":1714100989780},{"_id":"source\\_posts\\imgs\\imgimg1710989114237.png","hash":"e27caa7e339d49a5669f86e68033a472f01a994a","modified":1714100989805},{"_id":"source\\_posts\\imgs\\imgimg1710993075567.png","hash":"dccd41e501cd71931e7e8b6aa8f0afba27cfdcb3","modified":1714100989818},{"_id":"source\\_posts\\imgs\\imgimg1711363139340.png","hash":"ecba80c45549c384ad784ec80884be540dfc9474","modified":1714100989854},{"_id":"source\\_posts\\imgs\\imgimg1711420657241.png","hash":"8dfadf77cf4c18996d150e959621c141446a1eb1","modified":1714100989911},{"_id":"source\\_posts\\imgs\\imgimg1712389141182.png","hash":"8c32d5f96d82a089f038539588a48c39712682e4","modified":1714100989935},{"_id":"source\\_posts\\imgs\\imgimg1712482664500.png","hash":"2c6060e9c6833da88c72e8284291a25162416075","modified":1714100989948},{"_id":"source\\_posts\\imgs\\imgimg1712484163277.png","hash":"2075844934b1d882c0b7a21913dfbf3430f4193e","modified":1714100989958},{"_id":"source\\_posts\\imgs\\imgimgimage-20240425185141220-17141013416943.png","hash":"42f8f0af1b1a94236b93ef93243e805221385c94","modified":1714101397534},{"_id":"source\\_posts\\imgs\\imgimgimage-20240425191627146.png","hash":"7319685d7a7db4ebb46e5b867e2532b1e2c37377","modified":1714102165676},{"_id":"source\\_posts\\imgs\\imgimgimage-20240425194025109.png","hash":"f31c4a0cdeb55f7f31ed20c65036f246da60a4c3","modified":1714100990011},{"_id":"source\\_posts\\imgs\\imgimgimgimage-20240425194025109.png","hash":"f31c4a0cdeb55f7f31ed20c65036f246da60a4c3","modified":1714102165678},{"_id":"source\\_posts\\imgs\\imginvert1-tree.jpg","hash":"e27629399672a50c05c1f034c0fcb4323d63c2a8","modified":1716229576688},{"_id":"source\\_posts\\imgs\\imgtypora-icon.png","hash":"3b68d3490cb59ddd21bbca7669f206e2a5c9ba33","modified":1714100990035},{"_id":"source\\_posts\\imgs\\imgtypora-icon2.png","hash":"711f92a7ce36c13006b9f13079ff398448deff30","modified":1714100990035},{"_id":"source\\_posts\\毕业设计开发文档记录.md","hash":"efd9d3d9e646cd5f1d9fad38baa9c44d663c6553","modified":1716202997145},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523195348022.png","hash":"a660036871b30e34844e67582c181e68fb2dd673","modified":1716465228078},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523211307451.png","hash":"d1d453eb06d535a3029c6fa5360fa9c6467dae9a","modified":1716469987504},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523213212442.png","hash":"015aa908f0413f95e6f1893858c526b7cbc2e777","modified":1716471132598},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523214052614.png","hash":"0a291ecaae9ec8257643e8fc7acc4404b29f3fb0","modified":1716471652656},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520164107448.png","hash":"e3f15dc190344359c8b4fe8dce92157fae2e38ed","modified":1716194467512},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520164537417.png","hash":"635b822aae68c78dffa9fdec98745718d0055af7","modified":1716194737465},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520165824955.png","hash":"33de13eb85e8c8206969543a885b2f2b45824b11","modified":1716195504996},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520174620647.png","hash":"520570c9d2c83311955afc568e8107b6a2b90aac","modified":1716198380678},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520180624589.png","hash":"3809ab05a1e0ef116bc2aeb2057ffa370c5d68cf","modified":1716199584897},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520181333764.png","hash":"0aba415a73bb28850ce2ac62a2a088d6ebeb8589","modified":1716200013828},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520175334087.png","hash":"20170a66ce7594cc79a13dfebf9d11d86c0ccae4","modified":1716198814156},{"_id":"source\\_posts\\imgs\\imgimage-20240425192752256.png","hash":"568b6a6c5593faffe84bcfc5820c5786a8b35d86","modified":1716134548375},{"_id":"source\\_posts\\imgs\\imgimage-20240425193221563.png","hash":"f9fa534cae8d8f64fadd10c23f984e4ef38f4ff9","modified":1714047214066},{"_id":"source\\_posts\\imgs\\imgimage-20240520164107448.png","hash":"e3f15dc190344359c8b4fe8dce92157fae2e38ed","modified":1716201019832},{"_id":"source\\_posts\\imgs\\imgimage-20240520164537417.png","hash":"635b822aae68c78dffa9fdec98745718d0055af7","modified":1716201019833},{"_id":"source\\_posts\\imgs\\imgimage-20240520165824955.png","hash":"33de13eb85e8c8206969543a885b2f2b45824b11","modified":1716201019834},{"_id":"source\\_posts\\imgs\\imgimage-20240520174620647.png","hash":"520570c9d2c83311955afc568e8107b6a2b90aac","modified":1716201019851},{"_id":"source\\_posts\\imgs\\imgimage-20240520180624589.png","hash":"3809ab05a1e0ef116bc2aeb2057ffa370c5d68cf","modified":1716201019855},{"_id":"source\\_posts\\imgs\\imgimage-20240520181333764.png","hash":"0aba415a73bb28850ce2ac62a2a088d6ebeb8589","modified":1716201019856},{"_id":"source\\_posts\\imgs\\imgimage-20240523195348022.png","hash":"a660036871b30e34844e67582c181e68fb2dd673","modified":1716472415668},{"_id":"source\\_posts\\imgs\\imgimage-20240523211307451.png","hash":"d1d453eb06d535a3029c6fa5360fa9c6467dae9a","modified":1716472415671},{"_id":"source\\_posts\\imgs\\imgimage-20240523213212442.png","hash":"015aa908f0413f95e6f1893858c526b7cbc2e777","modified":1716472415679},{"_id":"source\\_posts\\imgs\\imgimage-20240523214052614.png","hash":"0a291ecaae9ec8257643e8fc7acc4404b29f3fb0","modified":1716472415682},{"_id":"source\\_posts\\imgs\\imgimg1710578725862.png","hash":"1aeb16489351e0a452fa3e1e3836cdb260e548c0","modified":1714100989774},{"_id":"source\\_posts\\imgs\\imgimg1711362464630.png","hash":"9ef7417371e7fe95326e906047b9e958095f7987","modified":1714100989852},{"_id":"source\\_posts\\imgs\\imgimg1711365203345.png","hash":"be23e1134b10a5dc6ee6391152897f758c32548f","modified":1714100989876},{"_id":"source\\_posts\\imgs\\imgimg1711420592406.png","hash":"4806de4dbc14ff048d9d545a0ffb3c7f7043c958","modified":1714100989910},{"_id":"source\\_posts\\imgs\\imgimgimage-20240425193221563.png","hash":"f9fa534cae8d8f64fadd10c23f984e4ef38f4ff9","modified":1714102165677},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523201403309.png","hash":"c76584c9ed257dcb4aa7a4f506d5cdf2b2a576a6","modified":1716466443323},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523212233490.png","hash":"127d35f04b25ab3452dea73ac536ba687f1d5836","modified":1716470553541},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520163240884.png","hash":"a5b55bfb3424bf6437aa00bd555ac4d57da4359b","modified":1716193960942},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520173117842.png","hash":"61b056ea39e4bff69fabf4d83e158f162357a7f6","modified":1716197477908},{"_id":"source\\_posts\\imgs\\imgimage-20240520163240884.png","hash":"a5b55bfb3424bf6437aa00bd555ac4d57da4359b","modified":1716201019827},{"_id":"source\\_posts\\imgs\\imgimage-20240520173117842.png","hash":"61b056ea39e4bff69fabf4d83e158f162357a7f6","modified":1716201019837},{"_id":"source\\_posts\\imgs\\imgimage-20240523201403309.png","hash":"c76584c9ed257dcb4aa7a4f506d5cdf2b2a576a6","modified":1716472415670},{"_id":"source\\_posts\\imgs\\imgimage-20240523212233490.png","hash":"127d35f04b25ab3452dea73ac536ba687f1d5836","modified":1716472415675},{"_id":"source\\_posts\\imgs\\imgimg1710574631703.png","hash":"9947114398f381102b869f07dc9f4b391b20b833","modified":1714100989771},{"_id":"source\\_posts\\imgs\\imgimg1710599401003.png","hash":"5a4233437e594d3bb6d2e7f9d260128ad127ad67","modified":1714100989777},{"_id":"source\\_posts\\imgs\\imgimg1710750595175.png","hash":"b6864255f754c2936e7dc3849fa06fde7a004d96","modified":1714100989794},{"_id":"source\\_posts\\imgs\\imgimgimg1710574509749.png","hash":"ac7fde629e9da926b99fec2294efd3d00d27fbc7","modified":1714100990035},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523194106731.png","hash":"5562dedc3c9d329ea13b598e5afa5402fc1d0b8b","modified":1716464466794},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520164011525.png","hash":"a0a8ec95135cbfdb062e6d966056cb1a68d65263","modified":1716194411600},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520172513472.png","hash":"8764cad1585511abcc91c4e129d9350c3e5fb3a0","modified":1716197113495},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520173551060.png","hash":"580953c296286a960e8ec4058114b50e423237e5","modified":1716197751090},{"_id":"source\\_posts\\imgs\\imgimage-20240425185601131.png","hash":"573d61d05320859ad33c3ed05a036e39b8b994bf","modified":1716134548344},{"_id":"source\\_posts\\imgs\\imgimage-20240520164011525.png","hash":"a0a8ec95135cbfdb062e6d966056cb1a68d65263","modified":1716201019831},{"_id":"source\\_posts\\imgs\\imgimage-20240520172513472.png","hash":"8764cad1585511abcc91c4e129d9350c3e5fb3a0","modified":1716201019836},{"_id":"source\\_posts\\imgs\\imgimage-20240520173551060.png","hash":"580953c296286a960e8ec4058114b50e423237e5","modified":1716201019838},{"_id":"source\\_posts\\imgs\\imgimage-20240523194106731.png","hash":"5562dedc3c9d329ea13b598e5afa5402fc1d0b8b","modified":1716472415665},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523195153331.png","hash":"8e045845598a4461663eb3e84a5a6ec215f5e2bb","modified":1716465113364},{"_id":"source\\_posts\\imgs\\imgimage-20240523195153331.png","hash":"8e045845598a4461663eb3e84a5a6ec215f5e2bb","modified":1716472415667},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520175229381.png","hash":"a9fb5d96c74512485c83913872bddd9dbeb80538","modified":1716198749427},{"_id":"source\\_posts\\imgs\\imgimage-20240520175229381.png","hash":"a9fb5d96c74512485c83913872bddd9dbeb80538","modified":1716201019854},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520174224228.png","hash":"d993ffbd1aeda1b2670a3966e7246d5b8ce92773","modified":1716198144279},{"_id":"source\\_posts\\imgs\\imgimage-20240520174224228.png","hash":"d993ffbd1aeda1b2670a3966e7246d5b8ce92773","modified":1716201019850},{"_id":"source\\_posts\\刷题日记：番外-链表（一）.assets\\image-20240526180832322.png","hash":"188ef5e47b1000c46aa7a27fe7b5bef2de9ca7fc","modified":1716718112544},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\home_top\\random-banner.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714030715646},{"_id":"source\\_posts\\ChatGLM3-6B微调学习记录.assets\\image-20240523211423933.png","hash":"df7f40346ec2bf6e5fa150e196c5f4330ec2f927","modified":1716470063993},{"_id":"source\\_posts\\imgs\\imgimage-20240523211423933.png","hash":"df7f40346ec2bf6e5fa150e196c5f4330ec2f927","modified":1716472415674},{"_id":"node_modules\\hexo-theme-anzhiyu\\package.json","hash":"d0901f3cd388c1422e5c7fc7e2ec264cebf8ad93","modified":1714030724054},{"_id":"node_modules\\hexo-theme-anzhiyu\\README.md","hash":"46c4c8c308bd18c813da6b37356c7953f0d2e4af","modified":1714030724057},{"_id":"node_modules\\hexo-theme-anzhiyu\\LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1714030715591},{"_id":"node_modules\\hexo-theme-anzhiyu\\sw-rules.js","hash":"ae946d1b197940f8021d81a65474ea474a82c0cf","modified":1714030724043},{"_id":"node_modules\\hexo-theme-anzhiyu\\_config.yml","hash":"de03b85e2a959023593b1378565fe7d148f52012","modified":1714030724462},{"_id":"node_modules\\hexo-theme-anzhiyu\\README_EN.md","hash":"3b27231432adf2bd180857fc6d3de646dfd444bf","modified":1714030724056},{"_id":"node_modules\\hexo-theme-anzhiyu\\plugins.yml","hash":"42ddaf22eccf3a3ae3ee516cf121b7c72d72ad4a","modified":1714030724486},{"_id":"node_modules\\hexo-theme-anzhiyu\\languages\\default.yml","hash":"be22c8d1730408a2ac3ec9a57406e297fc1f7ce6","modified":1714030724475},{"_id":"node_modules\\hexo-theme-anzhiyu\\languages\\zh-CN.yml","hash":"dbd5b387322693ed53df84eab709bf04ffeb8b81","modified":1714030724488},{"_id":"node_modules\\hexo-theme-anzhiyu\\languages\\en.yml","hash":"4c46ef35360b8322269417bcae68e609ca8f85be","modified":1714030724477},{"_id":"node_modules\\hexo-theme-anzhiyu\\languages\\zh-TW.yml","hash":"0e0b432912390e3de9d99bc54add99e4d265d3d1","modified":1714030724490},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\archive.pug","hash":"b8778e55f1aab2431daa4a64cba991ef40e33224","modified":1714030724164},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\category.pug","hash":"1d55b22a50675d1ecfb95d031ea011245c7c6511","modified":1714030724183},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\index.pug","hash":"cf1b756e06864a47352bb9890519eafcf5d0340d","modified":1714030724216},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\post.pug","hash":"0d8d8cfd31e97053c908dac3ee19072825a6a2dc","modified":1714030724236},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\page.pug","hash":"98e81d10e6caab2ff79b4a2788d2312acded36ef","modified":1714030724228},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\tag.pug","hash":"354b85519feab71c0233eb240655d0e0ec67021c","modified":1714030724251},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1714030723982},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\ISSUE_TEMPLATE\\bug_report.yml","hash":"3978be1ecdd21be564aa590b17eda6f03cd77e19","modified":1714030724465},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\ISSUE_TEMPLATE\\config.yml","hash":"a23b745378bc745b15f2dfefcc6a203d5d1d5fcd","modified":1714030724465},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\ISSUE_TEMPLATE\\feature_request.yml","hash":"53260c55a97ed93e6a1f9acc23b9d21193cae6ef","modified":1714030724478},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\workflows\\issue_close_question.yml","hash":"a7f1bf4578faa6092898a9a44bfd467cbb1788dd","modified":1714030724480},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\workflows\\issue_close_stale.yml","hash":"6151bdec23ded908adf01ba5ecdf3c0da573449d","modified":1714030724482},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\workflows\\issue_duplicate.yml","hash":"42a8e022434604081fe443d416bd443efd887015","modified":1714030724483},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\workflows\\issue_invalid.yml","hash":"8cdde230c8f9330cc7cd5c149ea5fc258ffb0b8b","modified":1714030724483},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\workflows\\issue_wontfix.yml","hash":"3b498c22281bb454f8ee1135a4becee0adc5b9ae","modified":1714030724484},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\workflows\\issue_question.yml","hash":"72ce6e36847f20952d8f8742e4fd1969cd086320","modified":1714030724484},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\workflows\\publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1714030724487},{"_id":"node_modules\\hexo-theme-anzhiyu\\.github\\workflows\\stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1714030724488},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\404.pug","hash":"aa158d5a661aa2fab4737b9460ce34f6784fdee5","modified":1714030724152},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\additional-js.pug","hash":"d7e42261a79651ce13ff2213947ecb3e4c41ee81","modified":1714030724157},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\bbTimeList.pug","hash":"0a0c4cdf69314c3a9ecb078f4213c76129a9ac06","modified":1714030724170},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\categoryGroup.pug","hash":"243f63820db5f3241e682ae8f3baffd6501df3de","modified":1714030724184},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\footer.pug","hash":"50131aa8ad85fd6c08d8e1cb2d3dcfceb5964abe","modified":1714030724202},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head.pug","hash":"8db5b7382011745f53b99b5b5577ae28140068e2","modified":1714030724206},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\layout.pug","hash":"3bc51657414be0c94bd27752616cc7f7d54f20cd","modified":1714030724217},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\mourn.pug","hash":"d114b9493fbe6551b0c4ad1c1d8886b7f98a0d60","modified":1714030724223},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\music.pug","hash":"424eea03f50a265754a1c9fd695b2056aa6d6f47","modified":1714030724224},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\pagination.pug","hash":"1e0be343f9bdc6cefc5ff0dd3c2936ed91d5be86","modified":1714030724229},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\rightside.pug","hash":"d865835bc5432d8ec15fd0cb168643f3e9b77a18","modified":1714030724243},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\shortcutKey.pug","hash":"dcf8fb7bbddd4a64626f4fcf2523ace2dfce879f","modified":1714030724246},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\sidebar.pug","hash":"fd6d7873df74994ed6a36bd07a438c427db97e18","modified":1714030724248},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\filters\\post_lazyload.js","hash":"61f06b25c09434340e81c8c3dbbd1a0d58406652","modified":1714030724033},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\filters\\random_cover.js","hash":"98275d777b3c388345de3ee8caf5d16900388925","modified":1714030724034},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\events\\404.js","hash":"170e72e851257365468024557c767360c3deafbf","modified":1714030723991},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\events\\cdn.js","hash":"39aaf1d4fed1382c85776581225747285b7b388c","modified":1714030724004},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\events\\comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1714030724006},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\events\\init.js","hash":"006401bd6f4bb3fc8756e752d6ab93bf770bb77f","modified":1714030724016},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\events\\stylus.js","hash":"d3dd2d28751b9956459624f6b492e8590de83061","modified":1714030724042},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\events\\welcome.js","hash":"3177e070519a10fff904595e152a329115d22c61","modified":1714030724052},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\aside_archives.js","hash":"ca03ba2a0a7f2132ac5d3f66cb1bbd9e078aed3f","modified":1714030723997},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\aside_categories.js","hash":"19244d6a9e42c34b9df2250be2467c352fa5fd41","modified":1714030723998},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\catalog_list.js","hash":"aa38fd791d58df3fd518adf144578f160073d06e","modified":1714030724003},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\findArchiveLength.js","hash":"d8aa1a4824ba6b0df911af563ae5fb361257a88a","modified":1714030724009},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\get_version.js","hash":"f2b7364706fc4d039da4a486e133baf7accf6836","modified":1714030724013},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\inject_head_js.js","hash":"847bc24452bc23dfc860b219588cfb2bff84cfbf","modified":1714030724017},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\page.js","hash":"0ee9ac8a03e6cf9f2df55c4c5abd83417a7cd1d4","modified":1714030724030},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\random.js","hash":"d659d1d05c919d1abba2dc55439749e6e5b6e707","modified":1714030724036},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\related_post.js","hash":"c5f70efdbfd733f4dfec0ca8fe4aded0eec394cf","modified":1714030724038},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\tags_page_list.js","hash":"35d71c025a3289be188371cc56320c563213c4af","modified":1714030724045},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\year.js","hash":"94f15ddba7d29cdcc4dd52ed6c35c9c29cc19d37","modified":1714030724052},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\Introduction-card.js","hash":"61a55f9b1f5f576e6900d2900cb42754575a4cb7","modified":1714030724019},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\bilibili.js","hash":"085e033cb359e8f109968748cedbd0079515e7c6","modified":1714030724000},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\btns.js","hash":"200e1ce72f335caa71dc8423f5c5e2aba1195b61","modified":1714030724001},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\button.js","hash":"430c31584930bc5407811c3dbc01be92473cfcbf","modified":1714030724003},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\checkbox.js","hash":"fa93b169fe74bced502b0d16fe3d6bd17434b8f3","modified":1714030724005},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\helpers\\sort_attr_post.js","hash":"6b6e9fb0d0dc38e8d7136dc7720c70f0c29619ab","modified":1714030724041},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\dogeplayer.js","hash":"e9b0d88e38d3caf88b66ea39ca704d45c643ba51","modified":1714030724007},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\flink.js","hash":"5b0086d1b726d1068b3d8ee0563ae31485896c4b","modified":1714030724010},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\folding.js","hash":"dc4e409eabebf5769b50c12c9e8c66b749d0ae85","modified":1714030724011},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\gallery.js","hash":"0364b021f2519a937464e585a7e2cbdde57ca412","modified":1714030724012},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\hide.js","hash":"37b81ff46d104554b9a5934bfd434dbfd6a84958","modified":1714030724014},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\iconfont.js","hash":"ea983f7c8dd060ed411044df1c10aa6b72dec34f","modified":1714030724014},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\image.js","hash":"0b7051574af6cf28c378db65f6c6dab722a8e118","modified":1714030724016},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1714030724018},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\inline-labels.js","hash":"08fbdc0ea622270e1236a28778f875c8ad2e5516","modified":1714030724017},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\link.js","hash":"a5d49f1d0e4602b0fce158efd0b1ec02c0bfd3e3","modified":1714030724021},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\label.js","hash":"87acd7d5615dd8034c51ba28d4964992d2ffed37","modified":1714030724020},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\media.js","hash":"76efb072e0716e55deedb044fed1ad585871335b","modified":1714030724027},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\mermaid.js","hash":"d3d6c8a23ddfecac35f7022eecd4ffc6171a37fa","modified":1714030724027},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1714030724029},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\site.js","hash":"bc34bfab53f520bec33d273ee599de5905ca19a9","modified":1714030724040},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\span.js","hash":"0a2188be1e3ee6ed183c0f16d24795ef31116e10","modified":1714030724042},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\tabs.js","hash":"dea5cd52bb9fd658bc03074b2388d91ea528fc2b","modified":1714030724044},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1714030724046},{"_id":"node_modules\\hexo-theme-anzhiyu\\scripts\\tag\\tip.js","hash":"e45a0955439dfbe6c0b4d27f8403896a0fb1d33b","modified":1714030724046},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1714030724445},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1714030724146},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1714030723984},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1714030723991},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\index.styl","hash":"ddded5cd1da248fdc30556a33877579ff8379a48","modified":1714030724380},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\var.styl","hash":"7bdedada1176e55d5fb72e3cc9f46e01d03b704a","modified":1714030724443},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\main.js","hash":"8be47b8fb84fda76b85d6ad150b17ba861ba66c3","modified":1714030724025},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\utils.js","hash":"2519befd6127526c553d21117efc91a3b4a700f4","modified":1714030724051},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\tw_cn.js","hash":"6cbec565e98cbd49aa75e6161d8fa996ae3be91a","modified":1714030724048},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1714030724059},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\anzhiyu\\ai-info.pug","hash":"0c2e9e58069880c0617208840cf2f0712339ddf0","modified":1714030724158},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\anzhiyu\\clock.pug","hash":"c13b21cdcbc5280deb26537c58af5443cb66c62f","modified":1714030724186},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\anzhiyu\\rightmenu.pug","hash":"2747252c6337d8fb7ba773cdb466611607f9a23b","modified":1714030724242},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\anzhiyu\\log-js.pug","hash":"a44b4f89f39d1e32889849c3dd1403dffa2786a4","modified":1714030724220},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\anzhiyu\\tags-group-all.pug","hash":"bc16fa91883895544273161cc8672bfe5c010e5e","modified":1714030724252},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\anzhiyu\\console.pug","hash":"d46c93a7a22129795cc856045967b0e07c5e53c2","modified":1714030724188},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\bili-banner\\index.pug","hash":"8cb1c404adc6fe188bdceca3c09d3f215048e9bd","modified":1714030724207},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head\\Open_Graph.pug","hash":"dff5b967a641f385c4661fe66ad62d53cabf857a","modified":1714030724227},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head\\analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1714030724163},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head\\config.pug","hash":"a26939a08947e936c3d8524a36ec3531edf8c5ef","modified":1714030724187},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head\\noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1714030724226},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head\\config_site.pug","hash":"3038adec24b17f019bdd7d6aa15ebe091b11397d","modified":1714030724187},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head\\google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1714030724205},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head\\preconnect.pug","hash":"56ef61e74598cf60551d363a15fc53842b8dc41b","modified":1714030724237},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head\\site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1714030724248},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\head\\pwa.pug","hash":"a4cc65381275e09f3f54f6e958d359c89c7b2c4e","modified":1714030724240},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\header\\post-info.pug","hash":"0f1503c88d05ada69919e0bdbbf7b2ea1603d20b","modified":1714030724234},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\header\\nav.pug","hash":"e567624b78d723346193a9b0d28032031997b865","modified":1714030724225},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\loading\\fullpage-loading.pug","hash":"39977280dd32f1435a97f285a75f2a02902472d6","modified":1714030724204},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\header\\menu_item.pug","hash":"4537154b8830310ce5dff3c9cfd558f0ec1311a5","modified":1714030724222},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\header\\index.pug","hash":"c865d51436cfd5413df6c691a7ab1f0eb600e79c","modified":1714030724209},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\header\\social.pug","hash":"2185b69eb54656ed9e401bc47ca3cd9905b022f3","modified":1714030724249},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\loading\\index.pug","hash":"f86b0c45874ae1335ab575c29d4f9c8ea09ab92a","modified":1714030724209},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\about.pug","hash":"fa529ca6b5ab9001822668697f410cc3020980ad","modified":1714030724156},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\loading\\pace.pug","hash":"7f04cabd68f75d7f953503283316e1594bbec45f","modified":1714030724228},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\mixins\\article-sort.pug","hash":"7a06f5f24f8e32b3025cf43474db9519d48517e5","modified":1714030724170},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\mixins\\post-ui.pug","hash":"80858e19caf57c275cb7d6acf3bfff7d0c90c774","modified":1714030724235},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\album.pug","hash":"0ca70f1ec4757d6127048d71762752dabf1af2ea","modified":1714030724161},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\album_detail.pug","hash":"c735533f7671905d06bae5645306cd08abb0b43c","modified":1714030724160},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\equipment.pug","hash":"87ca40c49ddfe9c266cd96b4eb3594d7c64c1d55","modified":1714030724197},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\categories.pug","hash":"f23d074ef6875311e74169da7592ecf667539775","modified":1714030724182},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\essay.pug","hash":"b0a25ded52c72c84bd29593bd7a57046c4b36195","modified":1714030724198},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1714030724192},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\fcircle.pug","hash":"a4bfc9855bcfc859f0c04e869e0ec8cb8d2a1357","modified":1714030724199},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\music.pug","hash":"3cbec3b3dc0f0e812f29c222ebb2d2a3d8c2719f","modified":1714030724224},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\flink.pug","hash":"56638092eef96fdb0072967fb95b857e31144fe2","modified":1714030724200},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\room.pug","hash":"c35a2fb076e0196ba28389b5309dde33a2add576","modified":1714030724243},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\page\\tags.pug","hash":"62882d8a699254486add2f7b0f089521732e4869","modified":1714030724253},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\post\\ptool.pug","hash":"173d1a63099109bd909de919281db9f2b2a023f0","modified":1714030724239},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\popup\\index.pug","hash":"3ac8714556f94a614100aeddeb7f7e0cdff2fb9c","modified":1714030724210},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\post\\post-copyright.pug","hash":"10638ede3b9ea1ef4e336f5c4d690239ef353843","modified":1714030724233},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\post\\reward.pug","hash":"cdf5ff34ba8efe526cfe77ddf3277d997d172d41","modified":1714030724241},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\footerBarSubtitle.pug","hash":"bb2df2fbbdc9fe0f4b9d66928247faa49f70e2e5","modified":1714030724203},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1714030724196},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1714030724164},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1714030724230},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\pjax.pug","hash":"4ee026b34e6ecc2c03cf04933973b496472309c2","modified":1714030724232},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1714030724238},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\subtitle.pug","hash":"142621f70bedcb5033ee99a988f7bb6c5eea3493","modified":1714030724250},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_announcement.pug","hash":"ed8796dd3c5710d745fdcc0021b02a3cda07fd1b","modified":1714030724172},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_archives.pug","hash":"9ca97d85cc7b214e1107d0b4feac4d8ad2fd0ac8","modified":1714030724172},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1714030724171},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\top\\top.pug","hash":"9f849b05e220efa72d56f524a27ab2877e27e9e3","modified":1714030724255},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_author.pug","hash":"b7e11bcd199f343a844315e5d16735205dded9d2","modified":1714030724174},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1714030724174},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1714030724174},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_console_archives.pug","hash":"8c095ae91183d6a2aeed64f378e60baaa29d4065","modified":1714030724175},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_newest_comment.pug","hash":"419eed9a771299c9ffb85fdf38073bbd5bd7775c","modified":1714030724176},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_post_toc.pug","hash":"638417324111b66c834314b96cbf02e959be58f4","modified":1714030724177},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_console_tags.pug","hash":"d723516d48cd94a68819df5c61087c9e7339e2af","modified":1714030724175},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_tags.pug","hash":"3475134643b70cbf0e806806bd2e0d2a7371f8a5","modified":1714030724180},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1714030724180},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_webinfo.pug","hash":"5ddf285ca0ecbb57cbbbc36a4e9eaaca40406257","modified":1714030724181},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\index.pug","hash":"e33c360217b11a7980e780a5bc20e9d31f5dacf5","modified":1714030724216},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_weixin.pug","hash":"28f11437bcba4df1e53fc1e32df213392b9ca4b6","modified":1714030724181},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1714030724149},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1714030724058},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1714030724148},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\widget\\card_recent_post.pug","hash":"544272cb0977b8a941de22f1f58f76d370b2cbbd","modified":1714030724178},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1714030724058},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\siteicon\\apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1714030724059},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_highlight\\highlight.styl","hash":"3b8ed7884ce87bec2fa248df8d9dd1878a7010fe","modified":1714030724303},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_highlight\\theme.styl","hash":"c074efc93f4f118c3fc3b3d3c9f9abc42e4858b4","modified":1714030724436},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_global\\icon.styl","hash":"da488461e8c5e504961c0a8f44b1e3605f72f956","modified":1714030724307},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_global\\function.styl","hash":"e91b257ce982b670eb911c7120f379960083c959","modified":1714030724297},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_global\\index.styl","hash":"55850e21e138a0ad8250f4b2ff38412fdb343d1d","modified":1714030724376},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_global\\loading.styl","hash":"734c69c16135543267794e12b43e776d501fb6ca","modified":1714030724386},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\aside.styl","hash":"b62fbde63342f779b4dd27492e6da878c25f7dfb","modified":1714030724276},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_mode\\darkmode.styl","hash":"43391bb6a4d1908c87515851c41b8d97b847b49b","modified":1714030724287},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_mode\\readmode.styl","hash":"a5a27dea73ed993ce81ca691eff9eb71c2b311a7","modified":1714030724397},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1714030724282},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\banner.styl","hash":"62f4202467cc9f313361911ed2a2005e66b3b2ca","modified":1714030724276},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\comments.styl","hash":"3dbb4c0e1ef79eab1f327d303c3aed61ddc3f58c","modified":1714030724285},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\footer.styl","hash":"ce21052dd27e752c3734083ec1401b96c542bfda","modified":1714030724296},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\head.styl","hash":"bfb5d818394942ea243a1a0379521d4de4ca4010","modified":1714030724300},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\home_top.styl","hash":"c975f539ae6bed3b24c9dc3914b412f179ee2543","modified":1714030724305},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\nav.styl","hash":"25524f214e245737c5bfc551de1b76b5d6515a20","modified":1714030724390},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\404.styl","hash":"02a8df2e9734848cc4670a4b9f6e9a776e995644","modified":1714030724267},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\oneGraphFlow.styl","hash":"1e5843caf8674429a5782712879c4a532074514d","modified":1714030724391},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\pagination.styl","hash":"88f2fbb0ccb061410b07e1ed6303583230e96d4e","modified":1714030724392},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\post.styl","hash":"2a4a8af05bc24edbd14c4160b17489242164727f","modified":1714030724393},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\ptool.styl","hash":"2ffeca0499c6ad1c4ea2ef783d7493b713b24569","modified":1714030724396},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\relatedposts.styl","hash":"c67558ba609b59375f8ee6ad479fcb16ddda9cb6","modified":1714030724398},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\reward.styl","hash":"152b802a38f029dece2b8f8812404cec25975212","modified":1714030724420},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\rightmenu.styl","hash":"cc622c70ff61ef70dfa6445b5b4b09eb92cf9994","modified":1714030724424},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\rightside.styl","hash":"bebc753a414d3fb807b5bf8dfeb87fe602e92e73","modified":1714030724425},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\shortcutKey.styl","hash":"ca7674768558396a8e2f9eaa452575bff099e4e8","modified":1714030724426},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\sidebar.styl","hash":"57d6857a1209dacb6f3fd0eb3c3f539fef3a2daf","modified":1714030724428},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_layout\\third-party.styl","hash":"a6b708dfeda4ad837bbfc76bd74810805ca521a0","modified":1714030724437},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1714030724269},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\about.styl","hash":"72a3345b9791fcf51bb74ff6eebfda4674e8f60d","modified":1714030724271},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1714030724282},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\archives.styl","hash":"8652be12d88083f71a1efb88a2482a0aeda2c65f","modified":1714030724274},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\common.styl","hash":"99ca9cb011349c045ed779bd5db9763c2073bbfe","modified":1714030724286},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\equipment.styl","hash":"8ed450c37e8b5b5d6ce04245b54fc0877b0ad0d9","modified":1714030724292},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\flink.styl","hash":"990a1b5d937980ec1f6f764f4b5ce371279cc451","modified":1714030724294},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\music.styl","hash":"290dd82c05bc21a0f22a7b666f2af233e9e8bbb2","modified":1714030724388},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\homepage.styl","hash":"7b2b2b4a7f3139f7db2d535b2ed7167db8bfd0ed","modified":1714030724306},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1714030724435},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\reward.styl","hash":"3a6e95f58b1692c6ee67a669fc965d9dea026186","modified":1714030724422},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_page\\tag_page.styl","hash":"704a74185d0e872ca3358567a2ecede5c2d35910","modified":1714030724434},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\Introduction-card.styl","hash":"ec70e67c2a8bc1a0ebe536091d97bc326faf9973","modified":1714030724382},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\bilbili.styl","hash":"081833e071be562201c56ec4db000b7ac144a39a","modified":1714030724278},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\btns.styl","hash":"903b571a6e352e5014e35e9a675b7d2d6e5b82bd","modified":1714030724280},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\gallery.styl","hash":"697408d915056ae6e6814e0f24ca013f68227f74","modified":1714030724299},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\button.styl","hash":"af1840996356aeae6ffbee49ab86aa7834ab18a0","modified":1714030724281},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1714030724301},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\folding.styl","hash":"537320d4762bef842beabfbde9b27f0e2ece2ba6","modified":1714030724295},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\hide.styl","hash":"810c54530d3799fe492d9c3d4842ab5ca4243092","modified":1714030724302},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\checkbox.styl","hash":"2a31f4c0cd31f67342564ef22254eb317d82f331","modified":1714030724283},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\image.styl","hash":"4cf305b1d57d0c9bfe948f916fe9b124ee62fc0a","modified":1714030724308},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\inline-labels.styl","hash":"d9bdac4ca48b19cc028efc1a084ebf99c38bb8ec","modified":1714030724381},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1714030724381},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1714030724383},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\site-card.styl","hash":"5ff77bfa663aca406e3a0bd822da0d6e3c3c2c8b","modified":1714030724429},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\media.styl","hash":"05a249c807cd7760492a9ef5914b3e363d7d1028","modified":1714030724387},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\span.styl","hash":"f75112e431fcbef352a7ee7f0aa85e8b2f0b4a26","modified":1714030724432},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\note.styl","hash":"3b357c94cb8e80039cc1689161637d5b9690ff18","modified":1714030724391},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\tabs.styl","hash":"b0dc66d3daafe8c3a022f7235de3d8224cb56ec9","modified":1714030724433},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\timeline.styl","hash":"3076b68fece8ef394cbd44570037e5e479fdd277","modified":1714030724437},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_tags\\tip.styl","hash":"0f712be285681bac71e96c48d0836b8fea52bf6f","modified":1714030724440},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_search\\index.styl","hash":"fd2833ec664a9de9a7b3dd1cade7d65e3ad80ddd","modified":1714030724379},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_search\\algolia.styl","hash":"f7cb2effef6b4e587fad385d7c11b4b23c110589","modified":1714030724273},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_search\\local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1714030724387},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_third-party\\normalize.min.css","hash":"007ada04a97d0fcaf55ee840a03f2f10b9abcbff","modified":1714030715644},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_third-party\\snackbar.styl","hash":"47a90d6a87744c6e4ced18b95220debef8f278d0","modified":1714030724431},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_third-party\\twikoo.styl","hash":"51475a99ec3281fb98ca8707e28064f91dd9c68a","modified":1714030724442},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\ai_abstract.js","hash":"be52eb13a416b18337d3b1142277920072e698c3","modified":1714030723994},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\comment_barrage.js","hash":"1b30f922238f626c6a90ce2705789ba2362a2a9e","modified":1714030724005},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\people.js","hash":"f3d2a3d0c730124d9f64dbf59486145c05a42ac6","modified":1714030724032},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\right_click_menu.js","hash":"d605ee0cab24604f97ccef5747bfacaa108645ba","modified":1714030724039},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\anzhiyu\\random_friends_post.js","hash":"1548fdc0a8cb4291bc8793dc8d321c59c097c08e","modified":1714030724035},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\search\\algolia.js","hash":"5c2a0d0489c51c6d9e54f5a3b0c6e66a5f649450","modified":1714030723996},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\js\\search\\local-search.js","hash":"3ad66c75b4a0fc28a14a5478ee8a19fde72f837f","modified":1714030724021},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\comments\\artalk.pug","hash":"a486578b5b9cd130dbe22e7b4ad5cbe724dc4678","modified":1714030724167},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\comments\\index.pug","hash":"a77f0e963a59ab2e28c7ce294d4bb951a0262877","modified":1714030724212},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\comments\\twikoo.pug","hash":"1582986ede8a9c727004d1dc114bd7ee92880641","modified":1714030724261},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\comments\\valine.pug","hash":"e54a60b1795721153faaa887b46a68b68bcd3abc","modified":1714030724263},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\card-post-count\\artalk.pug","hash":"6b8e29a8ad921ae50f8c43b8b7459ddc152b05ed","modified":1714030724165},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\comments\\waline.pug","hash":"b996993c61e53be6a46dd78634c95ab8e42fb4ab","modified":1714030724265},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\comments\\js.pug","hash":"d7ec11022237359926a4ff1d3aa8355c1713765e","modified":1714030724216},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\card-post-count\\twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1714030724260},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\card-post-count\\index.pug","hash":"a20dd36c318c7a37870fbc9dcecbc03f94ade817","modified":1714030724210},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\card-post-count\\valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1714030724262},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\card-post-count\\waline.pug","hash":"b40b0cbd0389f03fed5ddf624fa598613135046a","modified":1714030724264},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\chat\\chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1714030724185},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\chat\\crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1714030724189},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\chat\\daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1714030724191},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\chat\\index.pug","hash":"9eff7757c825d776edde1c1dd09623a91d891e6b","modified":1714030724211},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\chat\\tidio.pug","hash":"76b08a6da3eed8f90304fa6546783e5c04a792fb","modified":1714030724254},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\newest-comments\\artalk.pug","hash":"bbaaa94d99c345f7412803a98bf3d83722743dfb","modified":1714030724168},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\newest-comments\\index.pug","hash":"6dafa98f6082e909c00396a4793ed3e7c866f824","modified":1714030724214},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\newest-comments\\twikoo-comment.pug","hash":"3b20540a0e687cb05fd71a716e78f16a175a7d58","modified":1714030724259},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\newest-comments\\valine.pug","hash":"3de61f1b229f2928ae120ecfa6166862c1735d18","modified":1714030724263},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\newest-comments\\waline.pug","hash":"3fbf5700aedaa63ea09e8f68c063961db785fa44","modified":1714030724266},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\math\\index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1714030724213},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\math\\katex.pug","hash":"235fb3c8b4da8ec6b010d4d30d3594d3dbfd0bbe","modified":1714030724217},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\math\\mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1714030724221},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\search\\algolia.pug","hash":"fbdeb32013088e8f7f4c8a6a1f20622e58dc09c2","modified":1714030724162},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\math\\mermaid.pug","hash":"10f3949da0889c1ec3e3617da290927d834d1f6d","modified":1714030724223},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\search\\docsearch.pug","hash":"cb42537ea530d6679a46a1db092da0e91756b2c3","modified":1714030724192},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\search\\local-search.pug","hash":"d3f133564dda5e2c51661a914ae5aab8fb9dbaf6","modified":1714030724218},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\runtime\\runtime-js.pug","hash":"63391ff01fd55d8c48b3a9e46d83d4af75908ffb","modified":1714030724246},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\search\\index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1714030724214},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\share\\addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1714030724157},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\share\\index.pug","hash":"b0e932171cbdfeb8a98bc1e8b78172f672f5fdfd","modified":1714030724215},{"_id":"node_modules\\hexo-theme-anzhiyu\\layout\\includes\\third-party\\share\\share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1714030724246},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\album\\album.css","hash":"d3938a8e6edcf2be0dff02728f605406feba800d","modified":1714030715598},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\album\\album_detail.css","hash":"b75189ece986fa6b645751791a72d2783fbae05f","modified":1714030715597},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\anzhiyu\\custom.css","hash":"82769d1c1dae4ea347211e271c96cdeca508da1e","modified":1714030715624},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\aside_weixin\\aside_weixin.css","hash":"17015ed4c296ea890e807716c6abe0a11ddcb906","modified":1714030715602},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\catalog_list\\catalog_list.css","hash":"a1551158577967485ebce34cc3b19040d7e4ab64","modified":1714030715607},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\categoryBar\\categoryBar.css","hash":"b9ab5612f4d24092388defcb8db7399445a10710","modified":1714030715610},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\clock\\clock.css","hash":"b91f3216c6e859f89d9348bd9517c764e607402d","modified":1714030715614},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\code\\details_summary.css","hash":"30b01d74157aaccea84c4c0d7e0ebb65f5a7f9c9","modified":1714030715626},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\code\\code.css","hash":"976b68722d6698d7687f362532d7a0e6b6050d3e","modified":1714030715616},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\console\\console.css","hash":"f61b9504a5f7b33d7508c9c5201c0c21ae9f8d53","modified":1714030715622},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\essay_page\\essay_page.css","hash":"0d62e0d6b6f57fce49d347c8ce969071933dcd45","modified":1714030715628},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\essay_page\\home_essay_bar.css","hash":"bfb259092223dcdfcb1a652330dc8ea1236fe76c","modified":1714030715636},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\commentBarrage\\commentBarrage.css","hash":"a1355fe5e03c5e5dbd17761cc7a80fa9758c5891","modified":1714030715618},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\aplayer.css","hash":"00aee0451ccb5b2f402ecb7f358acf78c53cee60","modified":1714030715601},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\bilibili-bangumi.css","hash":"81567514e32d5c2cc647aff121f405c7a7b50897","modified":1714030715605},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\bilibili-ratio.css","hash":"ad6edf2b75dd717e9dff9fe4ca4db79c1599a6f9","modified":1714030715605},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\categories.css","hash":"563bd4583007329c6e34c28883ee26a39af6c8f3","modified":1714030715608},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\clock.css","hash":"90e0bce1341d9e01aa0efaf9c70256ef5fe6139b","modified":1714030715614},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\comments.css","hash":"667a4182d046cb6bf0561bdb7fe8c788ae79438f","modified":1714030715619},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\fcircle_page.css","hash":"02ce333e7f9ed6b9756a6706475192e2fd3fbd4b","modified":1714030715629},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\dark.css","hash":"febe18af9e0cc45c6a35f0e0ef085c182985afa6","modified":1714030715625},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\hexo-tag-dplayer.css","hash":"90e6ba180e0b9267aa0bf27eb9f0a1d2e9cb3ecc","modified":1714030715634},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\hide-block.css","hash":"15e0c13f8451bfe36fa5e464b86767bd98cab70b","modified":1714030715634},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\link_page.css","hash":"69e5ed458c0dc10d93ebb7e4943196be1167ed5a","modified":1714030715639},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\overflow.css","hash":"71e3bd9905684e6e2ba6e18282e982d96dc4d61d","modified":1714030715645},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\radius.css","hash":"6ef242f7a79427da9651a26c8a07e4e56ac56a42","modified":1714030715646},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\footer\\footer.css","hash":"d94ed305398eb831b9e7160ce54510b0d25fcf67","modified":1714030715630},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\gitcalendar.css","hash":"f99c63423cbedb8f12ccea673d8e79e10a4cfb6c","modified":1714030715632},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\fix\\site-card.css","hash":"0a662f62c69d36ac583528c02346d848aa1d026a","modified":1714030715655},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\friends\\friends.css","hash":"a2e50f529aa1fd60732d9a892166bb1d3ae725d7","modified":1714030715631},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\home_top\\categorygroup.css","hash":"bc5b8a6cddca8c36a96ea5ecd1e56a5860bbb09a","modified":1714030715613},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\home_top\\home_top.css","hash":"4bf724bd2f1a0447532456c60701e79b906c8dd0","modified":1714030715638},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\home_top\\home_top_post_group.css","hash":"04d9a3bd9cb247f4c391af0cd7cb47206974ceaf","modified":1714030715638},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\home_top\\swiperstyle.css","hash":"ea249de8cebc68cda7e62705df2acd7c78d13f37","modified":1714030715660},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\home_top\\top_group_banner.css","hash":"785789d5f07da4d0865f083641ad3ffe4756d589","modified":1714030715662},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\greeting_box\\greeting_box.css","hash":"208ba729979dffdaa2f82639027a09b8c64fc5c2","modified":1714030715633},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\local_search\\local_search.css","hash":"d3bc30e147897fb3026284d4244c4cf195d4588a","modified":1714030715642},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\reset\\reset.css","hash":"0617cd338ebe4be2820d03d88376b30e0f378c1c","modified":1714030715648},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\reward\\about-reward.css","hash":"f95871737b0e883ab70b30948b2cd4339bf36756","modified":1714030715594},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\room\\room.css","hash":"82eb83dc296c045b0388cd9417ff1bc822e46f41","modified":1714030715652},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\runtime\\runtime.css","hash":"7fd033212b0dcdb06ca7f7a83343ea1b6044d59c","modified":1714030715654},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\skills\\skills.css","hash":"6dcf742c38dcdf988e3d6f545fbfa0227d3155ea","modified":1714030715659},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\single_card\\single_card.css","hash":"1559219f059389933e435dd081af5e6e17ef4b75","modified":1714030715654},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\tag\\link.css","hash":"dbc87df28d7dfa366ab3c91ac61967ac48d7877c","modified":1714030715640},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_extra\\tag\\site.css","hash":"631a068d827a84a46fa03282b4ca38936c4bc4f3","modified":1714030715656},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_highlight\\highlight\\diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1714030724289},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_highlight\\highlight\\index.styl","hash":"75b01603cacde3b58cc2719dce1f72458ecf3842","modified":1714030724377},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_highlight\\prismjs\\diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1714030724291},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_highlight\\prismjs\\index.styl","hash":"7751de787861a9b45cf3879fb18601abc8935bde","modified":1714030724378},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\css\\_highlight\\prismjs\\line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1714030724385},{"_id":"source\\_posts\\imgs\\imgimage-20240425191755468.png","hash":"d5025ed0424a2c0f50507b98c78913e6b29ed387","modified":1714047214063},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1714030723989},{"_id":"source\\_posts\\chatglm3-6b部署学习记录.assets\\image-20240520163848394.png","hash":"fcf1453b71ab54b129587d2a00526de47c5df927","modified":1716194328570},{"_id":"source\\_posts\\imgs\\imgimage-20240520163848394.png","hash":"fcf1453b71ab54b129587d2a00526de47c5df927","modified":1716201019830},{"_id":"source\\_posts\\刷题日记：番外-链表（一）.assets\\chrome-capture-2024-4-26 (1).gif","hash":"02a981f1ff96076234124caa2bcb7275ff0163ea","modified":1716722073155},{"_id":"source\\_posts\\刷题日记：番外-链表（一）.assets\\chrome-capture-2024-4-26 (2).gif","hash":"fab35cae3bcff0d8e44dfc9c760f98f203119438","modified":1716722336709},{"_id":"source\\_posts\\刷题日记：番外-链表（一）.assets\\chrome-capture-2024-4-26.gif","hash":"0438153b2c9479a73b24f2b60b9eb75b370587e9","modified":1716721862616},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1714030722644},{"_id":"node_modules\\hexo-theme-anzhiyu\\source\\img\\loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1714030723979},{"_id":"source\\_posts\\Hexo主题应用-代码框更改.md","hash":"aa3efb952f9279a130c99c1f841589858e4b03cf","modified":1716744656101},{"_id":"source\\_posts\\Hexo主题应用-代码框更改.assets\\image-20240527004300870.png","hash":"1df02f90362de992933a7c32876aa5ee14ad4dcd","modified":1716741780898},{"_id":"source\\_posts\\Hexo主题应用-代码框更改.assets\\image-20240527004414551.png","hash":"8f64f7d3378c2948bf6ee9680659871438366641","modified":1716741854559},{"_id":"source\\_posts\\Hexo主题应用-代码框更改.assets\\image-20240527005457369.png","hash":"0de5f1acb718b693cbc836955fcb362a044bdbbe","modified":1716742497383},{"_id":"source\\_posts\\Hexo主题应用-代码框更改.assets\\image-20240527005111914.png","hash":"a325af4ff32537ec2eb52be9c137f867436983e5","modified":1716742271927},{"_id":"source\\_posts\\Hexo主题应用-代码框更改.assets\\image-20240527010039409.png","hash":"d08982f358fe7af6b65e2e2239b37e6b157a846c","modified":1716742839433},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.md","hash":"92a49c6af826f44a666b6f0468a7085b6335bf48","modified":1716978858974},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529153001210.png","hash":"61f82caba17baee2436a156704d8aebcb2d4b537","modified":1716967801216},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529163425409.png","hash":"3959b7fc1cd38590e1eb8368c729ee4dbf9b059e","modified":1716971665424},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529163528086.png","hash":"5bcbff90ba8192b29373a02c7235ca7bc7bacd81","modified":1716971728091},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529163514672.png","hash":"6558f8dcd66f9ac59ad2fac35be027703b67833a","modified":1716971714678},{"_id":"source\\_posts\\imgs\\imgimage-20240527004300870.png","hash":"1df02f90362de992933a7c32876aa5ee14ad4dcd","modified":1716744490578},{"_id":"source\\_posts\\imgs\\imgimage-20240527005111914.png","hash":"a325af4ff32537ec2eb52be9c137f867436983e5","modified":1716744490580},{"_id":"source\\_posts\\imgs\\imgimage-20240527004414551.png","hash":"8f64f7d3378c2948bf6ee9680659871438366641","modified":1716744490579},{"_id":"source\\_posts\\imgs\\imgimage-20240527005457369.png","hash":"0de5f1acb718b693cbc836955fcb362a044bdbbe","modified":1716744490581},{"_id":"source\\_posts\\imgs\\imgimage-20240527010039409.png","hash":"d08982f358fe7af6b65e2e2239b37e6b157a846c","modified":1716744490581},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529151251227.png","hash":"c5de8eb7e441b54f08fb481b5f130e11a6c25fed","modified":1716966771261},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529161128515.png","hash":"5d9d1b69bb83ac0180d5726f2804def37ae26134","modified":1716970288542},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529161438688.png","hash":"5f50a4645ba6140c21f552dd68e3d9de006f97ca","modified":1716970478746},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529163339254.png","hash":"16f9020b5b9ba691b94c77c5ff450d1ed53c85aa","modified":1716971619312},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529164340292.png","hash":"f330d04c4c688958913ee576f7bc74b8a50dd154","modified":1716972220349},{"_id":"source\\_posts\\Hexo主题应用-代码框更改.assets\\image-20240527011030200.png","hash":"9b089f7e53ac236ab2356a1d94f0570297010e1e","modified":1716743430255},{"_id":"source\\_posts\\imgs\\imgimage-20240527011030200.png","hash":"9b089f7e53ac236ab2356a1d94f0570297010e1e","modified":1716744490582},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529150225833.png","hash":"7007ebb339784b1adfa350579b9d65ed52acfa8f","modified":1716966145861},{"_id":"source\\_posts\\LangChain部署与调用ChatGLM.assets\\image-20240529154655651.png","hash":"89ca283f43d014f448d6ed65cf5a519d72ca7413","modified":1716968815699},{"_id":"source\\_posts\\imgs\\imgchrome-capture-2024-4-26 (1)-17167448925031.gif","hash":"02a981f1ff96076234124caa2bcb7275ff0163ea","modified":1716745000042},{"_id":"source\\_posts\\刷题日记：番外-链表（一）.assets\\chrome-capture-2024-4-26 (1)-17167448925031.gif","hash":"02a981f1ff96076234124caa2bcb7275ff0163ea","modified":1716744892518},{"_id":"source\\_posts\\imgs\\imgchrome-capture-2024-4-26 (2).gif","hash":"fab35cae3bcff0d8e44dfc9c760f98f203119438","modified":1716744490559},{"_id":"source\\_posts\\imgs\\imgchrome-capture-2024-4-26.gif","hash":"0438153b2c9479a73b24f2b60b9eb75b370587e9","modified":1716744490566}],"Category":[{"name":"开发教程","_id":"clwnrkl390004osw5h610bk24"},{"name":"力扣刷题","_id":"clwnrkl3v000losw564aj8f65"}],"Data":[],"Page":[{"title":"分类","date":"2024-05-20T07:49:53.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-05-20 15:49:53\ntype: \"categories\"\n---\n","updated":"2024-05-20T07:50:41.078Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clwnrkl2x0000osw545h554ny","content":"","cover":false,"excerpt":"","more":""},{"_content":"[\n  {\n    \"name\": \"青花瓷\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc\"\n  },\n  {\n    \"name\": \"稻香\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc\"\n  },\n  {\n    \"name\": \"晴天\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc\"\n  },\n  {\n    \"name\": \"七里香\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc\"\n  },\n  {\n    \"name\": \"花海\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc\"\n  },\n  {\n    \"name\": \"反方向的钟\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc\"\n  },\n  {\n    \"name\": \"兰亭序\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc\"\n  },\n  {\n    \"name\": \"说好的辛福呢\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc\"\n  },\n  {\n    \"name\": \"等你下课 (with 杨瑞代)\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc\"\n  },\n  {\n    \"name\": \"我落泪情绪零碎\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc\"\n  },\n  {\n    \"name\": \"听妈妈的话\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc\"\n  },\n  {\n    \"name\": \"明明就\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc\"\n  },\n  {\n    \"name\": \"我是如此相信\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc\"\n  },\n  {\n    \"name\": \"发如雪\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc\"\n  },\n  {\n    \"name\": \"以父之名\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc\"\n  },\n  {\n    \"name\": \"园游会\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc\"\n  },\n  {\n    \"name\": \"本草纲目\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc\"\n  },\n  {\n    \"name\": \"龙卷风\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc\"\n  }\n]","source":"json/music.json","raw":"[\n  {\n    \"name\": \"青花瓷\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc\"\n  },\n  {\n    \"name\": \"稻香\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc\"\n  },\n  {\n    \"name\": \"晴天\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc\"\n  },\n  {\n    \"name\": \"七里香\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc\"\n  },\n  {\n    \"name\": \"花海\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc\"\n  },\n  {\n    \"name\": \"反方向的钟\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc\"\n  },\n  {\n    \"name\": \"兰亭序\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc\"\n  },\n  {\n    \"name\": \"说好的辛福呢\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc\"\n  },\n  {\n    \"name\": \"等你下课 (with 杨瑞代)\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc\"\n  },\n  {\n    \"name\": \"我落泪情绪零碎\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc\"\n  },\n  {\n    \"name\": \"听妈妈的话\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc\"\n  },\n  {\n    \"name\": \"明明就\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc\"\n  },\n  {\n    \"name\": \"我是如此相信\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc\"\n  },\n  {\n    \"name\": \"发如雪\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc\"\n  },\n  {\n    \"name\": \"以父之名\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc\"\n  },\n  {\n    \"name\": \"园游会\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc\"\n  },\n  {\n    \"name\": \"本草纲目\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc\"\n  },\n  {\n    \"name\": \"龙卷风\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc\"\n  }\n]","date":"2024-05-20T06:31:39.788Z","updated":"2024-05-20T06:31:39.788Z","path":"json/music.json","layout":"false","title":"","comments":1,"_id":"clwnrkl330002osw5gogr0v6w","content":"[{\"name\":\"青花瓷\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc\"},{\"name\":\"稻香\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc\"},{\"name\":\"晴天\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc\"},{\"name\":\"七里香\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc\"},{\"name\":\"花海\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc\"},{\"name\":\"反方向的钟\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc\"},{\"name\":\"兰亭序\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc\"},{\"name\":\"说好的辛福呢\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc\"},{\"name\":\"等你下课 (with 杨瑞代)\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc\"},{\"name\":\"我落泪情绪零碎\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc\"},{\"name\":\"听妈妈的话\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc\"},{\"name\":\"明明就\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc\"},{\"name\":\"我是如此相信\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc\"},{\"name\":\"发如雪\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc\"},{\"name\":\"以父之名\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc\"},{\"name\":\"园游会\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc\"},{\"name\":\"本草纲目\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc\"},{\"name\":\"龙卷风\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc\"}]"},{"title":"tags","date":"2024-05-20T07:53:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-05-20 15:53:04\ntype: \"tags\"\n---\n","updated":"2024-05-20T07:53:20.601Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clwnrkl3c0006osw58o4f60j2","content":"","cover":false,"excerpt":"","more":""},{"title":"music","date":"2024-05-20T06:25:09.000Z","type":"music","_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2024-05-20 14:25:09\ntype: \"music\"\n---\n","updated":"2024-05-20T06:26:08.583Z","path":"music/index.html","comments":1,"layout":"page","_id":"clwnrkl3m0008osw5eco7craj","content":"","cover":false,"excerpt":"","more":""}],"Post":[{"title":"ChatGLM3-6B微调学习记录","date":"2024-05-23T11:35:24.000Z","top_img":"https://s21.ax1x.com/2024/05/20/pkKyVtU.png","cover":"https://s21.ax1x.com/2024/05/20/pkKyVtU.png","_content":"\n### ChatGLM3-6B微调学习记录\n\n前文学习了ChatGLM3-6B模型在阿里云DSW服务器上的部署，本文对微调此模型的过程做一个记录。\n\n如果需要学习部署可以移步前文[chatglm3-6b部署学习记录 | Hexo-Aou (aou123.xyz)](https://blog.aou123.xyz/2024/05/20/chatglm3-6b部署学习记录/)\n\n\n\n#### 微调工具：LlaMa-Factory\n\n[hiyouga/LLaMA-Factory: Unify Efficient Fine-Tuning of 100+ LLMs (github.com)](https://github.com/hiyouga/LLaMA-Factory)\n\n该工具提供一个清晰明确的gradio前端，方便用户进行交互式调参\n\n![image-20240523194106731](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523194106731.png)\n\n首先克隆该项目\n\n```shell\ngit clone https://github.com/hiyouga/LLaMA-Factory.git\ncd LLaMA-Factory\n#安装依赖\npip install -r requirements.txt\npip install transformers_stream_generator bitsandbytes tiktoken auto-gptq optimum autoawq\npip install --upgrade tensorflow\npip install -e .[torch,metrics]\n#运行\n#以下版本已停用\n#CUDA_VISIBLE_DEVICES=0 USE_MODELSCOPE_HUB=1 python src/train_web.py\n#现在需要进入src目录运行webui.py文件，推测是更新版本后统一了命名\nCUDA_VISIBLE_DEVICES=0 USE_MODELSCOPE_HUB=1 python src/webui.py\n```\n\n**一个小报错**：`Cannot open data/dataset_info.json due to [Errno 2] No such file or directory: 'data/dataset_info.json'.`\n\n之前为了图方便是cd到了src目录看了下webui改成啥名字了，导致从src下直接python了webui.py\n\n用上面修改后的shell命令就可以正常读取到自带的数据集。\n\n**修改前**\n\n![image-20240523195153331](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195153331.png)\n\n**修改后**\n\n![image-20240523201403309](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523201403309.png)\n\n点击URL，即可进入到LLama的微调界面，点选中文。\n\n![image-20240523195348022](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195348022.png)\n\n之后把模型选中ChatGLM3-6B-Chat，模型路径填入之前复制到前端界面的模型路径\n\n```shell\n/mnt/workspace/models/chatglm3-6b\n```\n\n\n\n#### 模型微调\n\n微调方法选择lora，lora是目前比较主流的微调模型训练方案，在选择模型的时候加上lora模型的权重，生成的时候就会调用对应的lora模型。\n\n在计算资源充足的情况下也可以使用full，全量微调，个人感觉应该是会直接在原模型上进行训练，生成的模型应该也是完整的，不需要额外添加权重参数的模型，但是应该会需要非常巨大的计算资源。\n\n![image-20240523195941533](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195941533.png)\n\n作为尝试，我们先使用来自lalama自带的数据集\n\n`alpaca_zh_demo.json`\n\n这个数据集内容大致是用GPT翻译过来的中文问答。\n\n![image-20240523211307451](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523211307451.png)\n\n\n\n第一次运行在加载模型中途出现了类似`CUDA error: device kernel image is invalid`之类的报错。\n\n**解决方式**：~~重启服务器。~~\n\n多次重复操作即可，这个错误是阿里云的GPU没反应过来，多次申请调用GPU就可以了。\n\n\n\n使用默认参数，先跑三轮试试。（我个人习惯先使用预定义好的参数进行一次尝试）\n\n况且这个数据集总的来说还算比较庞大，网络上大多数人的反馈是在使用精简数据集时50轮以上才有比较明显的效果。\n\n![image-20240523211423933](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523211423933.png)\n\n不得不说LLama的前端真的很人性化，做了损失函数折线图和训练轮数的进度条，不过我觉得输出框应该限制一下长度（输出数据太多了），虽然我也不会写，但是在sovits的整合包里看到过有人能写出来。\n\n![image-20240523212233490](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523212233490.png)\n\n训练完成之后刷新一下适配器\n\n![image-20240523213212442](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213212442.png)\n\n以下是使用了训练的**Lora模型**的效果\n\n![image-20240523213437417](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213437417.png)\n\n以下是**原模型**的效果\n\n![image-20240523213609821](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213609821.png)\n\n可以看到，Lora模型很明显是起作用的，就像Stable-Diffusion的Lora模型可以改变画风一样，LLM的Lora也可以起到包括但不限于改变自我认知，拓宽知识面，语言专业化等效果。\n\n\n\n#### 自定义模型\n\n我们下载之前所提到的dataset配置文件。\n\n![image-20240523214052614](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214052614.png)\n\n可以看到，该文件的格式为\n\n```json\n{\n  \"前端显示的数据集名\": {\n    \"file_name\": \"所加载的数据集.json\"\n  },\n```\n\n也即是说，我们自定义数据集的话，准备一份如下图的数据集\n\n![image-20240523214241120](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214241120.png)\n\n![image-20240523214255418](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214255418.png)\n\n```json\n[\n  {\n    \"instruction\": \"提问\",\n    \"input\": \"\",\n    \"output\": \"回答\"\n  },\n  ......\n ]\n```\n\n也就是以上json格式的文件，再将文件名填入dataset配置文件即可加载自定义数据集。\n\n\n\n至此，ChatGML3-6B的微调学习告一段落。\n\n#### 总结：\n\n每次学习这种项目，挫败感最强的一般不是难以看懂的各种神经网络框架或者文件处理代码，最让人心烦的往往就是运行环境，比如这次的这个cuda图像核的报错，搜索了半天都没个结果，搜到的第一个结论是降低pytorch版本，但是项目推荐的版本就是2.2，按教程改成1.2甚至会连cuda都不匹配。\n\n在尝试重启之后短暂缓解了问题，在多次尝试之后发现这只是阿里云GPU服务器的一个小bug，多点几次其实就解决问题了。\n\n**~~只能说跑模型就和运维一样啊，越老越吃香。~~**\n\n","source":"_posts/ChatGLM3-6B微调学习记录.md","raw":"---\ntitle: ChatGLM3-6B微调学习记录\ndate: 2024-05-23 19:35:24\ntags: LLM \ncategories: 开发教程\ntop_img: https://s21.ax1x.com/2024/05/20/pkKyVtU.png\ncover: https://s21.ax1x.com/2024/05/20/pkKyVtU.png\n---\n\n### ChatGLM3-6B微调学习记录\n\n前文学习了ChatGLM3-6B模型在阿里云DSW服务器上的部署，本文对微调此模型的过程做一个记录。\n\n如果需要学习部署可以移步前文[chatglm3-6b部署学习记录 | Hexo-Aou (aou123.xyz)](https://blog.aou123.xyz/2024/05/20/chatglm3-6b部署学习记录/)\n\n\n\n#### 微调工具：LlaMa-Factory\n\n[hiyouga/LLaMA-Factory: Unify Efficient Fine-Tuning of 100+ LLMs (github.com)](https://github.com/hiyouga/LLaMA-Factory)\n\n该工具提供一个清晰明确的gradio前端，方便用户进行交互式调参\n\n![image-20240523194106731](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523194106731.png)\n\n首先克隆该项目\n\n```shell\ngit clone https://github.com/hiyouga/LLaMA-Factory.git\ncd LLaMA-Factory\n#安装依赖\npip install -r requirements.txt\npip install transformers_stream_generator bitsandbytes tiktoken auto-gptq optimum autoawq\npip install --upgrade tensorflow\npip install -e .[torch,metrics]\n#运行\n#以下版本已停用\n#CUDA_VISIBLE_DEVICES=0 USE_MODELSCOPE_HUB=1 python src/train_web.py\n#现在需要进入src目录运行webui.py文件，推测是更新版本后统一了命名\nCUDA_VISIBLE_DEVICES=0 USE_MODELSCOPE_HUB=1 python src/webui.py\n```\n\n**一个小报错**：`Cannot open data/dataset_info.json due to [Errno 2] No such file or directory: 'data/dataset_info.json'.`\n\n之前为了图方便是cd到了src目录看了下webui改成啥名字了，导致从src下直接python了webui.py\n\n用上面修改后的shell命令就可以正常读取到自带的数据集。\n\n**修改前**\n\n![image-20240523195153331](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195153331.png)\n\n**修改后**\n\n![image-20240523201403309](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523201403309.png)\n\n点击URL，即可进入到LLama的微调界面，点选中文。\n\n![image-20240523195348022](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195348022.png)\n\n之后把模型选中ChatGLM3-6B-Chat，模型路径填入之前复制到前端界面的模型路径\n\n```shell\n/mnt/workspace/models/chatglm3-6b\n```\n\n\n\n#### 模型微调\n\n微调方法选择lora，lora是目前比较主流的微调模型训练方案，在选择模型的时候加上lora模型的权重，生成的时候就会调用对应的lora模型。\n\n在计算资源充足的情况下也可以使用full，全量微调，个人感觉应该是会直接在原模型上进行训练，生成的模型应该也是完整的，不需要额外添加权重参数的模型，但是应该会需要非常巨大的计算资源。\n\n![image-20240523195941533](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195941533.png)\n\n作为尝试，我们先使用来自lalama自带的数据集\n\n`alpaca_zh_demo.json`\n\n这个数据集内容大致是用GPT翻译过来的中文问答。\n\n![image-20240523211307451](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523211307451.png)\n\n\n\n第一次运行在加载模型中途出现了类似`CUDA error: device kernel image is invalid`之类的报错。\n\n**解决方式**：~~重启服务器。~~\n\n多次重复操作即可，这个错误是阿里云的GPU没反应过来，多次申请调用GPU就可以了。\n\n\n\n使用默认参数，先跑三轮试试。（我个人习惯先使用预定义好的参数进行一次尝试）\n\n况且这个数据集总的来说还算比较庞大，网络上大多数人的反馈是在使用精简数据集时50轮以上才有比较明显的效果。\n\n![image-20240523211423933](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523211423933.png)\n\n不得不说LLama的前端真的很人性化，做了损失函数折线图和训练轮数的进度条，不过我觉得输出框应该限制一下长度（输出数据太多了），虽然我也不会写，但是在sovits的整合包里看到过有人能写出来。\n\n![image-20240523212233490](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523212233490.png)\n\n训练完成之后刷新一下适配器\n\n![image-20240523213212442](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213212442.png)\n\n以下是使用了训练的**Lora模型**的效果\n\n![image-20240523213437417](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213437417.png)\n\n以下是**原模型**的效果\n\n![image-20240523213609821](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213609821.png)\n\n可以看到，Lora模型很明显是起作用的，就像Stable-Diffusion的Lora模型可以改变画风一样，LLM的Lora也可以起到包括但不限于改变自我认知，拓宽知识面，语言专业化等效果。\n\n\n\n#### 自定义模型\n\n我们下载之前所提到的dataset配置文件。\n\n![image-20240523214052614](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214052614.png)\n\n可以看到，该文件的格式为\n\n```json\n{\n  \"前端显示的数据集名\": {\n    \"file_name\": \"所加载的数据集.json\"\n  },\n```\n\n也即是说，我们自定义数据集的话，准备一份如下图的数据集\n\n![image-20240523214241120](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214241120.png)\n\n![image-20240523214255418](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214255418.png)\n\n```json\n[\n  {\n    \"instruction\": \"提问\",\n    \"input\": \"\",\n    \"output\": \"回答\"\n  },\n  ......\n ]\n```\n\n也就是以上json格式的文件，再将文件名填入dataset配置文件即可加载自定义数据集。\n\n\n\n至此，ChatGML3-6B的微调学习告一段落。\n\n#### 总结：\n\n每次学习这种项目，挫败感最强的一般不是难以看懂的各种神经网络框架或者文件处理代码，最让人心烦的往往就是运行环境，比如这次的这个cuda图像核的报错，搜索了半天都没个结果，搜到的第一个结论是降低pytorch版本，但是项目推荐的版本就是2.2，按教程改成1.2甚至会连cuda都不匹配。\n\n在尝试重启之后短暂缓解了问题，在多次尝试之后发现这只是阿里云GPU服务器的一个小bug，多点几次其实就解决问题了。\n\n**~~只能说跑模型就和运维一样啊，越老越吃香。~~**\n\n","slug":"ChatGLM3-6B微调学习记录","published":1,"updated":"2024-05-23T13:51:48.010Z","comments":1,"layout":"post","photos":[],"_id":"clwnrkl300001osw5hx5y38wf","content":"<h3 id=\"ChatGLM3-6B微调学习记录\"><a href=\"#ChatGLM3-6B微调学习记录\" class=\"headerlink\" title=\"ChatGLM3-6B微调学习记录\"></a>ChatGLM3-6B微调学习记录</h3><p>前文学习了ChatGLM3-6B模型在阿里云DSW服务器上的部署，本文对微调此模型的过程做一个记录。</p>\n<p>如果需要学习部署可以移步前文<a href=\"https://blog.aou123.xyz/2024/05/20/chatglm3-6b%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/\">chatglm3-6b部署学习记录 | Hexo-Aou (aou123.xyz)</a></p>\n<h4 id=\"微调工具：LlaMa-Factory\"><a href=\"#微调工具：LlaMa-Factory\" class=\"headerlink\" title=\"微调工具：LlaMa-Factory\"></a>微调工具：LlaMa-Factory</h4><p><a href=\"https://github.com/hiyouga/LLaMA-Factory\">hiyouga&#x2F;LLaMA-Factory: Unify Efficient Fine-Tuning of 100+ LLMs (github.com)</a></p>\n<p>该工具提供一个清晰明确的gradio前端，方便用户进行交互式调参</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523194106731.png\" alt=\"image-20240523194106731\"></p>\n<p>首先克隆该项目</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/hiyouga/LLaMA-Factory.git\n<span class=\"token builtin class-name\">cd</span> LLaMA-Factory\n<span class=\"token comment\">#安装依赖</span>\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt\npip <span class=\"token function\">install</span> transformers_stream_generator bitsandbytes tiktoken auto-gptq optimum autoawq\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">--upgrade</span> tensorflow\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-e</span> .<span class=\"token punctuation\">[</span>torch,metrics<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#运行</span>\n<span class=\"token comment\">#以下版本已停用</span>\n<span class=\"token comment\">#CUDA_VISIBLE_DEVICES=0 USE_MODELSCOPE_HUB=1 python src/train_web.py</span>\n<span class=\"token comment\">#现在需要进入src目录运行webui.py文件，推测是更新版本后统一了命名</span>\n<span class=\"token assign-left variable\">CUDA_VISIBLE_DEVICES</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">USE_MODELSCOPE_HUB</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> python src/webui.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>一个小报错</strong>：<code>Cannot open data/dataset_info.json due to [Errno 2] No such file or directory: &#39;data/dataset_info.json&#39;.</code></p>\n<p>之前为了图方便是cd到了src目录看了下webui改成啥名字了，导致从src下直接python了webui.py</p>\n<p>用上面修改后的shell命令就可以正常读取到自带的数据集。</p>\n<p><strong>修改前</strong></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195153331.png\" alt=\"image-20240523195153331\"></p>\n<p><strong>修改后</strong></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523201403309.png\" alt=\"image-20240523201403309\"></p>\n<p>点击URL，即可进入到LLama的微调界面，点选中文。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195348022.png\" alt=\"image-20240523195348022\"></p>\n<p>之后把模型选中ChatGLM3-6B-Chat，模型路径填入之前复制到前端界面的模型路径</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/mnt/workspace/models/chatglm3-6b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"模型微调\"><a href=\"#模型微调\" class=\"headerlink\" title=\"模型微调\"></a>模型微调</h4><p>微调方法选择lora，lora是目前比较主流的微调模型训练方案，在选择模型的时候加上lora模型的权重，生成的时候就会调用对应的lora模型。</p>\n<p>在计算资源充足的情况下也可以使用full，全量微调，个人感觉应该是会直接在原模型上进行训练，生成的模型应该也是完整的，不需要额外添加权重参数的模型，但是应该会需要非常巨大的计算资源。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195941533.png\" alt=\"image-20240523195941533\"></p>\n<p>作为尝试，我们先使用来自lalama自带的数据集</p>\n<p><code>alpaca_zh_demo.json</code></p>\n<p>这个数据集内容大致是用GPT翻译过来的中文问答。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523211307451.png\" alt=\"image-20240523211307451\"></p>\n<p>第一次运行在加载模型中途出现了类似<code>CUDA error: device kernel image is invalid</code>之类的报错。</p>\n<p><strong>解决方式</strong>：<del>重启服务器。</del></p>\n<p>多次重复操作即可，这个错误是阿里云的GPU没反应过来，多次申请调用GPU就可以了。</p>\n<p>使用默认参数，先跑三轮试试。（我个人习惯先使用预定义好的参数进行一次尝试）</p>\n<p>况且这个数据集总的来说还算比较庞大，网络上大多数人的反馈是在使用精简数据集时50轮以上才有比较明显的效果。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523211423933.png\" alt=\"image-20240523211423933\"></p>\n<p>不得不说LLama的前端真的很人性化，做了损失函数折线图和训练轮数的进度条，不过我觉得输出框应该限制一下长度（输出数据太多了），虽然我也不会写，但是在sovits的整合包里看到过有人能写出来。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523212233490.png\" alt=\"image-20240523212233490\"></p>\n<p>训练完成之后刷新一下适配器</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213212442.png\" alt=\"image-20240523213212442\"></p>\n<p>以下是使用了训练的<strong>Lora模型</strong>的效果</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213437417.png\" alt=\"image-20240523213437417\"></p>\n<p>以下是<strong>原模型</strong>的效果</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213609821.png\" alt=\"image-20240523213609821\"></p>\n<p>可以看到，Lora模型很明显是起作用的，就像Stable-Diffusion的Lora模型可以改变画风一样，LLM的Lora也可以起到包括但不限于改变自我认知，拓宽知识面，语言专业化等效果。</p>\n<h4 id=\"自定义模型\"><a href=\"#自定义模型\" class=\"headerlink\" title=\"自定义模型\"></a>自定义模型</h4><p>我们下载之前所提到的dataset配置文件。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214052614.png\" alt=\"image-20240523214052614\"></p>\n<p>可以看到，该文件的格式为</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"前端显示的数据集名\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"file_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"所加载的数据集.json\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也即是说，我们自定义数据集的话，准备一份如下图的数据集</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214241120.png\" alt=\"image-20240523214241120\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214255418.png\" alt=\"image-20240523214255418\"></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"instruction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"提问\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"input\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"output\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"回答\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  ......\n <span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是以上json格式的文件，再将文件名填入dataset配置文件即可加载自定义数据集。</p>\n<p>至此，ChatGML3-6B的微调学习告一段落。</p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p>每次学习这种项目，挫败感最强的一般不是难以看懂的各种神经网络框架或者文件处理代码，最让人心烦的往往就是运行环境，比如这次的这个cuda图像核的报错，搜索了半天都没个结果，搜到的第一个结论是降低pytorch版本，但是项目推荐的版本就是2.2，按教程改成1.2甚至会连cuda都不匹配。</p>\n<p>在尝试重启之后短暂缓解了问题，在多次尝试之后发现这只是阿里云GPU服务器的一个小bug，多点几次其实就解决问题了。</p>\n<p><strong><del>只能说跑模型就和运维一样啊，越老越吃香。</del></strong></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"ChatGLM3-6B微调学习记录\"><a href=\"#ChatGLM3-6B微调学习记录\" class=\"headerlink\" title=\"ChatGLM3-6B微调学习记录\"></a>ChatGLM3-6B微调学习记录</h3><p>前文学习了ChatGLM3-6B模型在阿里云DSW服务器上的部署，本文对微调此模型的过程做一个记录。</p>\n<p>如果需要学习部署可以移步前文<a href=\"https://blog.aou123.xyz/2024/05/20/chatglm3-6b%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/\">chatglm3-6b部署学习记录 | Hexo-Aou (aou123.xyz)</a></p>\n<h4 id=\"微调工具：LlaMa-Factory\"><a href=\"#微调工具：LlaMa-Factory\" class=\"headerlink\" title=\"微调工具：LlaMa-Factory\"></a>微调工具：LlaMa-Factory</h4><p><a href=\"https://github.com/hiyouga/LLaMA-Factory\">hiyouga&#x2F;LLaMA-Factory: Unify Efficient Fine-Tuning of 100+ LLMs (github.com)</a></p>\n<p>该工具提供一个清晰明确的gradio前端，方便用户进行交互式调参</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523194106731.png\" alt=\"image-20240523194106731\"></p>\n<p>首先克隆该项目</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/hiyouga/LLaMA-Factory.git\n<span class=\"token builtin class-name\">cd</span> LLaMA-Factory\n<span class=\"token comment\">#安装依赖</span>\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt\npip <span class=\"token function\">install</span> transformers_stream_generator bitsandbytes tiktoken auto-gptq optimum autoawq\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">--upgrade</span> tensorflow\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-e</span> .<span class=\"token punctuation\">[</span>torch,metrics<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#运行</span>\n<span class=\"token comment\">#以下版本已停用</span>\n<span class=\"token comment\">#CUDA_VISIBLE_DEVICES=0 USE_MODELSCOPE_HUB=1 python src/train_web.py</span>\n<span class=\"token comment\">#现在需要进入src目录运行webui.py文件，推测是更新版本后统一了命名</span>\n<span class=\"token assign-left variable\">CUDA_VISIBLE_DEVICES</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">USE_MODELSCOPE_HUB</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> python src/webui.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>一个小报错</strong>：<code>Cannot open data/dataset_info.json due to [Errno 2] No such file or directory: &#39;data/dataset_info.json&#39;.</code></p>\n<p>之前为了图方便是cd到了src目录看了下webui改成啥名字了，导致从src下直接python了webui.py</p>\n<p>用上面修改后的shell命令就可以正常读取到自带的数据集。</p>\n<p><strong>修改前</strong></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195153331.png\" alt=\"image-20240523195153331\"></p>\n<p><strong>修改后</strong></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523201403309.png\" alt=\"image-20240523201403309\"></p>\n<p>点击URL，即可进入到LLama的微调界面，点选中文。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195348022.png\" alt=\"image-20240523195348022\"></p>\n<p>之后把模型选中ChatGLM3-6B-Chat，模型路径填入之前复制到前端界面的模型路径</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/mnt/workspace/models/chatglm3-6b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"模型微调\"><a href=\"#模型微调\" class=\"headerlink\" title=\"模型微调\"></a>模型微调</h4><p>微调方法选择lora，lora是目前比较主流的微调模型训练方案，在选择模型的时候加上lora模型的权重，生成的时候就会调用对应的lora模型。</p>\n<p>在计算资源充足的情况下也可以使用full，全量微调，个人感觉应该是会直接在原模型上进行训练，生成的模型应该也是完整的，不需要额外添加权重参数的模型，但是应该会需要非常巨大的计算资源。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523195941533.png\" alt=\"image-20240523195941533\"></p>\n<p>作为尝试，我们先使用来自lalama自带的数据集</p>\n<p><code>alpaca_zh_demo.json</code></p>\n<p>这个数据集内容大致是用GPT翻译过来的中文问答。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523211307451.png\" alt=\"image-20240523211307451\"></p>\n<p>第一次运行在加载模型中途出现了类似<code>CUDA error: device kernel image is invalid</code>之类的报错。</p>\n<p><strong>解决方式</strong>：<del>重启服务器。</del></p>\n<p>多次重复操作即可，这个错误是阿里云的GPU没反应过来，多次申请调用GPU就可以了。</p>\n<p>使用默认参数，先跑三轮试试。（我个人习惯先使用预定义好的参数进行一次尝试）</p>\n<p>况且这个数据集总的来说还算比较庞大，网络上大多数人的反馈是在使用精简数据集时50轮以上才有比较明显的效果。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523211423933.png\" alt=\"image-20240523211423933\"></p>\n<p>不得不说LLama的前端真的很人性化，做了损失函数折线图和训练轮数的进度条，不过我觉得输出框应该限制一下长度（输出数据太多了），虽然我也不会写，但是在sovits的整合包里看到过有人能写出来。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523212233490.png\" alt=\"image-20240523212233490\"></p>\n<p>训练完成之后刷新一下适配器</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213212442.png\" alt=\"image-20240523213212442\"></p>\n<p>以下是使用了训练的<strong>Lora模型</strong>的效果</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213437417.png\" alt=\"image-20240523213437417\"></p>\n<p>以下是<strong>原模型</strong>的效果</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523213609821.png\" alt=\"image-20240523213609821\"></p>\n<p>可以看到，Lora模型很明显是起作用的，就像Stable-Diffusion的Lora模型可以改变画风一样，LLM的Lora也可以起到包括但不限于改变自我认知，拓宽知识面，语言专业化等效果。</p>\n<h4 id=\"自定义模型\"><a href=\"#自定义模型\" class=\"headerlink\" title=\"自定义模型\"></a>自定义模型</h4><p>我们下载之前所提到的dataset配置文件。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214052614.png\" alt=\"image-20240523214052614\"></p>\n<p>可以看到，该文件的格式为</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"前端显示的数据集名\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"file_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"所加载的数据集.json\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也即是说，我们自定义数据集的话，准备一份如下图的数据集</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214241120.png\" alt=\"image-20240523214241120\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240523214255418.png\" alt=\"image-20240523214255418\"></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"instruction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"提问\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"input\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"output\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"回答\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  ......\n <span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是以上json格式的文件，再将文件名填入dataset配置文件即可加载自定义数据集。</p>\n<p>至此，ChatGML3-6B的微调学习告一段落。</p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p>每次学习这种项目，挫败感最强的一般不是难以看懂的各种神经网络框架或者文件处理代码，最让人心烦的往往就是运行环境，比如这次的这个cuda图像核的报错，搜索了半天都没个结果，搜到的第一个结论是降低pytorch版本，但是项目推荐的版本就是2.2，按教程改成1.2甚至会连cuda都不匹配。</p>\n<p>在尝试重启之后短暂缓解了问题，在多次尝试之后发现这只是阿里云GPU服务器的一个小bug，多点几次其实就解决问题了。</p>\n<p><strong><del>只能说跑模型就和运维一样啊，越老越吃香。</del></strong></p>\n"},{"title":"Hexo安装过程与问题解决","date":"2024-04-25T10:39:29.000Z","typora-root-url":"Hexo安装过程与问题解决.assets","top_img":"https://s21.ax1x.com/2024/05/20/pkKysN8.png","cover":"https://s21.ax1x.com/2024/05/20/pkKysN8.png","_content":"\n\n\n\n\n##### 参考文章[零成本搭建一款博客网站(基于Vercel+Hexo完美实现)【保姆级教程】_helo博客建站系统-CSDN博客](https://blog.csdn.net/weixin_52908342/article/details/135173988)\n\n### 环境需求\n\n本地安装Node.js 和 Git，配置好环境变量\n\n\n\n### Hexo\n\nwin+r管理员权限输入CMD\n在命令提示符输入\n\n```shell\nnpm install -g hexo-cli\n```\n\n\n\n![image-20240425184750101](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425184750101.png)\n\n找一个准备作为博客仓库的文件夹，地址栏全选输入CMD（也可以直接在cmd里cd到该文件夹），此时我已建站，因此有个myblog\n\n![imgimage-20240425185141220](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425185141220-17141013416943.png)\n\n```shell\nhexo init myblog\n```\n\n执行之后正确输出如下\n\n![image-20240425185325821](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425185325821.png)\n\n此时运行\n\n```shell\ncd myblog\nnpm install\nhexo server\n```\n\n会下载npm（node的包管理器），并且启动基本的hexo博客服务，在地址栏粘贴弹出的地址，进入以下主页，证明框架基本安装完毕\n\n\n\n![image-20240425185601131](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425185601131.png)\n\n### 主题配置\n\n这里采用 Github的安知鱼主题\n\n如果使用windows/Linux + git进行部署：\n\n```shell\ngit clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu\n```\n\n如果使用git + GitHub + vercel进行部署：\n\n删除文件目录下的theme文件夹（不然在vercel自动化部署时会出现git嵌套导致主题不加载，变成空白网页），之后运行\n\n```shell\nnpm install hexo-theme-anzhiyu\n```\n\n这样就好了，安知鱼主题的官方文档：[进阶配置 | 安知鱼主题官方文档 (anheyu.com)](https://vcl-docs.anheyu.com/advanced/)\n\n如果没有pug和stylus渲染器：\n\n```shell\n npm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n\n如果是Linux/macos（防止拉取更新时覆盖掉配置文件）\n\n```shell\ncp -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml\n```\n\n最后在项目根目录找到网页配置文件，将theme后的值修改成anzhiyu,作者和博客地址什么的也是在这个配置文件\n\n![image-20240425191140144](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425191140144.png)\n\n设置完毕后重新唤醒网页，我这个稍微改了点东西，一般正常的部署完是作者设置的hello world\n\n```shell\nhexo server\n```\n\n![image-20240425191627146](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425191627146.png)\n\n![image-20240425191755468](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425191755468.png)\n\n至此，正常的项目落地教程结束，接下来开始GitHub+vercel部署教程：\n\n### Github\n\n首先创建一个空仓库，在主页正中将仓库地址复制下来（如果你创建的时候勾选了添加readme，那地址就在绿色code按钮里）\n\n### Git\n\n```shell\ngit config --global user.email \"你的邮箱地址\" //绑定邮箱\n\ngit config --global user.name \"你的用户名\"\t//绑定用户\n\ngit init //初始化一个git项目\n\ngit add . //将本地仓库加载到git缓存中\n\ngit commit -m \"描述\" // 将文件的更改保存到本地代码仓库中\n\ngit remote add origin 仓库地址 //链接在线仓库\n\ngit push -u origin master \t//将本地仓库更新到线上\n\ngit pull origin master //将线上仓库更新到本地（若本地仓库与线上存在额外文件，需要先更新本地，当然，也可以在push里使用force强行替换）\n```\n\n执行完之后大致仓库如下\n\n![image-20240425192752256](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425192752256.png)\n\n### Vercel\n\n首先用你的GitHub注册vercel~GitHub网页**右上角**有他们的地址\n\n[vercel/vercel: Develop. Preview. Ship. (github.com)](https://github.com/vercel/vercel)\n\n![image-20240425193221563](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425193221563.png)\n\n注册完成登录见如下图片，点击**右边**那个**Add New**-Project\n\n![](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425192903088.png)\n\n选定咱创建的仓库\n\n![image-20240425193853050](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425193853050.png)\n\n修改名称（只会影响vercel随机分配的域名）\n\n![image-20240425194025109](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimgimage-20240425194025109.png)\n\n## 此时你大概率会报错\n\nError: Command \"npm run build\" exited with 126 vercel........\n\n别慌，解决方法给你找好了（快速部署直接跳到下一个代码块，底下对很多人来说是废话）\n\n##### 先说结论\n\n这个报错一般是Linux系统权限不足或者缺少依赖，但是我们在本地Windows/Linux上能跑呀，因此只能是Linux权限不足了，众所周知Linux系统授权执行一般有两种方法：root账户执行和sudo执行，由于vercel这个项目是自动化部署的，没有提供给用户的终端面板，因此我们只能想办法让其以sudo的形式执行。\n\n因此，打开配置文件package.json，将build一行修改为：\n\n```json\nchmod -R 777 node_modules/ && hexo generate\n```\n\n代表赋予所有用户（拥有者、所属组、其他用户）读取、写入和执行的权限。~~这段授权代码让我想起了实习时候搞嵌入式开发的悲惨历程~~\n\n![image-20240425194631335](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425194631335.png)\n\n之后执行以下内容将更新加载到仓库\n\n```shell\ngit add . //将本地仓库加载到git缓存中\n\ngit commit -m \"描述\" // 将文件的更改保存到本地代码仓库中\n\ngit push -u origin master \t//将本地仓库更新到线上\n\n```\n\n\n\n此时，删除原来的vercel部署的项目（不是很确定，因此推荐在setting的常规设置滑到最底下删除旧的部署，因为我必须要删除重新部署，不然不能应用上游更改），重新执行前面的部署，等待彩条喷出，网站即可正确部署。\n\n部署完毕会给咱一个域名，可惜的是。vercel的域名已经被污染得差不多了。\n\n此时需要代理工具，访问项目给咱的域名，于是就能够浏览自己的博客了~。\n\n### 自定义域名\n\n如果咱自己有域名的话（没有的话不行哦，得自己购买并且实名），按照以下操作\n\n![image-20240425195944460](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425195944460.png)\n\n一般有A和CNAME两种自定义域名方式\n\n### A\n\n即Apex，顶级域名，输入框3之后会有一个框内提示域名未初始化，并且给出一个IP。\n\n将这个IP填入咱自己的域名提供商的解析ip就可以了、\n\n### CNAME\n\n这个是二级域名，自定义域名方式是域名转域名，输入框3后的值Value就是域名提供商页面的“目标值”，填好即可。\n\n\n\n最后完成后显示如图（虽然不知道打码的意义是什么但是按照惯例域名还是码了）\n\n![image-20240425200457461](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425200457461.png)\n\n最后就可以通过域名访问咱自己的博客了~\n\n有空的话下一篇写怎么更新这个博客~\n","source":"_posts/Hexo安装过程与问题解决.md","raw":"---\ntitle: Hexo安装过程与问题解决\ndate: 2024-04-25 18:39:29\ntags: Hexo\ntypora-root-url: Hexo安装过程与问题解决.assets\ncategories: 开发教程\ntop_img: https://s21.ax1x.com/2024/05/20/pkKysN8.png\ncover: https://s21.ax1x.com/2024/05/20/pkKysN8.png\n---\n\n\n\n\n\n##### 参考文章[零成本搭建一款博客网站(基于Vercel+Hexo完美实现)【保姆级教程】_helo博客建站系统-CSDN博客](https://blog.csdn.net/weixin_52908342/article/details/135173988)\n\n### 环境需求\n\n本地安装Node.js 和 Git，配置好环境变量\n\n\n\n### Hexo\n\nwin+r管理员权限输入CMD\n在命令提示符输入\n\n```shell\nnpm install -g hexo-cli\n```\n\n\n\n![image-20240425184750101](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425184750101.png)\n\n找一个准备作为博客仓库的文件夹，地址栏全选输入CMD（也可以直接在cmd里cd到该文件夹），此时我已建站，因此有个myblog\n\n![imgimage-20240425185141220](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425185141220-17141013416943.png)\n\n```shell\nhexo init myblog\n```\n\n执行之后正确输出如下\n\n![image-20240425185325821](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425185325821.png)\n\n此时运行\n\n```shell\ncd myblog\nnpm install\nhexo server\n```\n\n会下载npm（node的包管理器），并且启动基本的hexo博客服务，在地址栏粘贴弹出的地址，进入以下主页，证明框架基本安装完毕\n\n\n\n![image-20240425185601131](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425185601131.png)\n\n### 主题配置\n\n这里采用 Github的安知鱼主题\n\n如果使用windows/Linux + git进行部署：\n\n```shell\ngit clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu\n```\n\n如果使用git + GitHub + vercel进行部署：\n\n删除文件目录下的theme文件夹（不然在vercel自动化部署时会出现git嵌套导致主题不加载，变成空白网页），之后运行\n\n```shell\nnpm install hexo-theme-anzhiyu\n```\n\n这样就好了，安知鱼主题的官方文档：[进阶配置 | 安知鱼主题官方文档 (anheyu.com)](https://vcl-docs.anheyu.com/advanced/)\n\n如果没有pug和stylus渲染器：\n\n```shell\n npm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n\n如果是Linux/macos（防止拉取更新时覆盖掉配置文件）\n\n```shell\ncp -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml\n```\n\n最后在项目根目录找到网页配置文件，将theme后的值修改成anzhiyu,作者和博客地址什么的也是在这个配置文件\n\n![image-20240425191140144](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425191140144.png)\n\n设置完毕后重新唤醒网页，我这个稍微改了点东西，一般正常的部署完是作者设置的hello world\n\n```shell\nhexo server\n```\n\n![image-20240425191627146](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425191627146.png)\n\n![image-20240425191755468](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425191755468.png)\n\n至此，正常的项目落地教程结束，接下来开始GitHub+vercel部署教程：\n\n### Github\n\n首先创建一个空仓库，在主页正中将仓库地址复制下来（如果你创建的时候勾选了添加readme，那地址就在绿色code按钮里）\n\n### Git\n\n```shell\ngit config --global user.email \"你的邮箱地址\" //绑定邮箱\n\ngit config --global user.name \"你的用户名\"\t//绑定用户\n\ngit init //初始化一个git项目\n\ngit add . //将本地仓库加载到git缓存中\n\ngit commit -m \"描述\" // 将文件的更改保存到本地代码仓库中\n\ngit remote add origin 仓库地址 //链接在线仓库\n\ngit push -u origin master \t//将本地仓库更新到线上\n\ngit pull origin master //将线上仓库更新到本地（若本地仓库与线上存在额外文件，需要先更新本地，当然，也可以在push里使用force强行替换）\n```\n\n执行完之后大致仓库如下\n\n![image-20240425192752256](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425192752256.png)\n\n### Vercel\n\n首先用你的GitHub注册vercel~GitHub网页**右上角**有他们的地址\n\n[vercel/vercel: Develop. Preview. Ship. (github.com)](https://github.com/vercel/vercel)\n\n![image-20240425193221563](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425193221563.png)\n\n注册完成登录见如下图片，点击**右边**那个**Add New**-Project\n\n![](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425192903088.png)\n\n选定咱创建的仓库\n\n![image-20240425193853050](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425193853050.png)\n\n修改名称（只会影响vercel随机分配的域名）\n\n![image-20240425194025109](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimgimage-20240425194025109.png)\n\n## 此时你大概率会报错\n\nError: Command \"npm run build\" exited with 126 vercel........\n\n别慌，解决方法给你找好了（快速部署直接跳到下一个代码块，底下对很多人来说是废话）\n\n##### 先说结论\n\n这个报错一般是Linux系统权限不足或者缺少依赖，但是我们在本地Windows/Linux上能跑呀，因此只能是Linux权限不足了，众所周知Linux系统授权执行一般有两种方法：root账户执行和sudo执行，由于vercel这个项目是自动化部署的，没有提供给用户的终端面板，因此我们只能想办法让其以sudo的形式执行。\n\n因此，打开配置文件package.json，将build一行修改为：\n\n```json\nchmod -R 777 node_modules/ && hexo generate\n```\n\n代表赋予所有用户（拥有者、所属组、其他用户）读取、写入和执行的权限。~~这段授权代码让我想起了实习时候搞嵌入式开发的悲惨历程~~\n\n![image-20240425194631335](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425194631335.png)\n\n之后执行以下内容将更新加载到仓库\n\n```shell\ngit add . //将本地仓库加载到git缓存中\n\ngit commit -m \"描述\" // 将文件的更改保存到本地代码仓库中\n\ngit push -u origin master \t//将本地仓库更新到线上\n\n```\n\n\n\n此时，删除原来的vercel部署的项目（不是很确定，因此推荐在setting的常规设置滑到最底下删除旧的部署，因为我必须要删除重新部署，不然不能应用上游更改），重新执行前面的部署，等待彩条喷出，网站即可正确部署。\n\n部署完毕会给咱一个域名，可惜的是。vercel的域名已经被污染得差不多了。\n\n此时需要代理工具，访问项目给咱的域名，于是就能够浏览自己的博客了~。\n\n### 自定义域名\n\n如果咱自己有域名的话（没有的话不行哦，得自己购买并且实名），按照以下操作\n\n![image-20240425195944460](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425195944460.png)\n\n一般有A和CNAME两种自定义域名方式\n\n### A\n\n即Apex，顶级域名，输入框3之后会有一个框内提示域名未初始化，并且给出一个IP。\n\n将这个IP填入咱自己的域名提供商的解析ip就可以了、\n\n### CNAME\n\n这个是二级域名，自定义域名方式是域名转域名，输入框3后的值Value就是域名提供商页面的“目标值”，填好即可。\n\n\n\n最后完成后显示如图（虽然不知道打码的意义是什么但是按照惯例域名还是码了）\n\n![image-20240425200457461](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425200457461.png)\n\n最后就可以通过域名访问咱自己的博客了~\n\n有空的话下一篇写怎么更新这个博客~\n","slug":"Hexo安装过程与问题解决","published":1,"updated":"2024-05-20T10:56:20.110Z","comments":1,"layout":"post","photos":[],"_id":"clwnrkl340003osw59xkx47eg","content":"<h5 id=\"参考文章零成本搭建一款博客网站-基于Vercel-Hexo完美实现-【保姆级教程】-helo博客建站系统-CSDN博客\"><a href=\"#参考文章零成本搭建一款博客网站-基于Vercel-Hexo完美实现-【保姆级教程】-helo博客建站系统-CSDN博客\" class=\"headerlink\" title=\"参考文章零成本搭建一款博客网站(基于Vercel+Hexo完美实现)【保姆级教程】_helo博客建站系统-CSDN博客\"></a>参考文章<a href=\"https://blog.csdn.net/weixin_52908342/article/details/135173988\">零成本搭建一款博客网站(基于Vercel+Hexo完美实现)【保姆级教程】_helo博客建站系统-CSDN博客</a></h5><h3 id=\"环境需求\"><a href=\"#环境需求\" class=\"headerlink\" title=\"环境需求\"></a>环境需求</h3><p>本地安装Node.js 和 Git，配置好环境变量</p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p>win+r管理员权限输入CMD<br>在命令提示符输入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425184750101.png\" alt=\"image-20240425184750101\"></p>\n<p>找一个准备作为博客仓库的文件夹，地址栏全选输入CMD（也可以直接在cmd里cd到该文件夹），此时我已建站，因此有个myblog</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425185141220-17141013416943.png\" alt=\"imgimage-20240425185141220\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init myblog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行之后正确输出如下</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425185325821.png\" alt=\"image-20240425185325821\"></p>\n<p>此时运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> myblog\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\nhexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>会下载npm（node的包管理器），并且启动基本的hexo博客服务，在地址栏粘贴弹出的地址，进入以下主页，证明框架基本安装完毕</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425185601131.png\" alt=\"image-20240425185601131\"></p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p>这里采用 Github的安知鱼主题</p>\n<p>如果使用windows&#x2F;Linux + git进行部署：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果使用git + GitHub + vercel进行部署：</p>\n<p>删除文件目录下的theme文件夹（不然在vercel自动化部署时会出现git嵌套导致主题不加载，变成空白网页），之后运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-theme-anzhiyu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样就好了，安知鱼主题的官方文档：<a href=\"https://vcl-docs.anheyu.com/advanced/\">进阶配置 | 安知鱼主题官方文档 (anheyu.com)</a></p>\n<p>如果没有pug和stylus渲染器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-renderer-pug hexo-renderer-stylus <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果是Linux&#x2F;macos（防止拉取更新时覆盖掉配置文件）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-rf</span> ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后在项目根目录找到网页配置文件，将theme后的值修改成anzhiyu,作者和博客地址什么的也是在这个配置文件</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425191140144.png\" alt=\"image-20240425191140144\"></p>\n<p>设置完毕后重新唤醒网页，我这个稍微改了点东西，一般正常的部署完是作者设置的hello world</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425191627146.png\" alt=\"image-20240425191627146\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425191755468.png\" alt=\"image-20240425191755468\"></p>\n<p>至此，正常的项目落地教程结束，接下来开始GitHub+vercel部署教程：</p>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><p>首先创建一个空仓库，在主页正中将仓库地址复制下来（如果你创建的时候勾选了添加readme，那地址就在绿色code按钮里）</p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"你的邮箱地址\"</span> //绑定邮箱\n\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"你的用户名\"</span>\t//绑定用户\n\n<span class=\"token function\">git</span> init //初始化一个git项目\n\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> //将本地仓库加载到git缓存中\n\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"描述\"</span> // 将文件的更改保存到本地代码仓库中\n\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin 仓库地址 //链接在线仓库\n\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master \t//将本地仓库更新到线上\n\n<span class=\"token function\">git</span> pull origin master //将线上仓库更新到本地（若本地仓库与线上存在额外文件，需要先更新本地，当然，也可以在push里使用force强行替换）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行完之后大致仓库如下</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425192752256.png\" alt=\"image-20240425192752256\"></p>\n<h3 id=\"Vercel\"><a href=\"#Vercel\" class=\"headerlink\" title=\"Vercel\"></a>Vercel</h3><p>首先用你的GitHub注册vercel~GitHub网页<strong>右上角</strong>有他们的地址</p>\n<p><a href=\"https://github.com/vercel/vercel\">vercel&#x2F;vercel: Develop. Preview. Ship. (github.com)</a></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425193221563.png\" alt=\"image-20240425193221563\"></p>\n<p>注册完成登录见如下图片，点击<strong>右边</strong>那个<strong>Add New</strong>-Project</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425192903088.png\"></p>\n<p>选定咱创建的仓库</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425193853050.png\" alt=\"image-20240425193853050\"></p>\n<p>修改名称（只会影响vercel随机分配的域名）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimgimage-20240425194025109.png\" alt=\"image-20240425194025109\"></p>\n<h2 id=\"此时你大概率会报错\"><a href=\"#此时你大概率会报错\" class=\"headerlink\" title=\"此时你大概率会报错\"></a>此时你大概率会报错</h2><p>Error: Command “npm run build” exited with 126 vercel……..</p>\n<p>别慌，解决方法给你找好了（快速部署直接跳到下一个代码块，底下对很多人来说是废话）</p>\n<h5 id=\"先说结论\"><a href=\"#先说结论\" class=\"headerlink\" title=\"先说结论\"></a>先说结论</h5><p>这个报错一般是Linux系统权限不足或者缺少依赖，但是我们在本地Windows&#x2F;Linux上能跑呀，因此只能是Linux权限不足了，众所周知Linux系统授权执行一般有两种方法：root账户执行和sudo执行，由于vercel这个项目是自动化部署的，没有提供给用户的终端面板，因此我们只能想办法让其以sudo的形式执行。</p>\n<p>因此，打开配置文件package.json，将build一行修改为：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">chmod -R <span class=\"token number\">777</span> node_modules/ &amp;&amp; hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>代表赋予所有用户（拥有者、所属组、其他用户）读取、写入和执行的权限。<del>这段授权代码让我想起了实习时候搞嵌入式开发的悲惨历程</del></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425194631335.png\" alt=\"image-20240425194631335\"></p>\n<p>之后执行以下内容将更新加载到仓库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> //将本地仓库加载到git缓存中\n\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"描述\"</span> // 将文件的更改保存到本地代码仓库中\n\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master \t//将本地仓库更新到线上\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>此时，删除原来的vercel部署的项目（不是很确定，因此推荐在setting的常规设置滑到最底下删除旧的部署，因为我必须要删除重新部署，不然不能应用上游更改），重新执行前面的部署，等待彩条喷出，网站即可正确部署。</p>\n<p>部署完毕会给咱一个域名，可惜的是。vercel的域名已经被污染得差不多了。</p>\n<p>此时需要代理工具，访问项目给咱的域名，于是就能够浏览自己的博客了~。</p>\n<h3 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h3><p>如果咱自己有域名的话（没有的话不行哦，得自己购买并且实名），按照以下操作</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425195944460.png\" alt=\"image-20240425195944460\"></p>\n<p>一般有A和CNAME两种自定义域名方式</p>\n<h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h3><p>即Apex，顶级域名，输入框3之后会有一个框内提示域名未初始化，并且给出一个IP。</p>\n<p>将这个IP填入咱自己的域名提供商的解析ip就可以了、</p>\n<h3 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h3><p>这个是二级域名，自定义域名方式是域名转域名，输入框3后的值Value就是域名提供商页面的“目标值”，填好即可。</p>\n<p>最后完成后显示如图（虽然不知道打码的意义是什么但是按照惯例域名还是码了）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425200457461.png\" alt=\"image-20240425200457461\"></p>\n<p>最后就可以通过域名访问咱自己的博客了~</p>\n<p>有空的话下一篇写怎么更新这个博客~</p>\n","cover_type":"img","excerpt":"","more":"<h5 id=\"参考文章零成本搭建一款博客网站-基于Vercel-Hexo完美实现-【保姆级教程】-helo博客建站系统-CSDN博客\"><a href=\"#参考文章零成本搭建一款博客网站-基于Vercel-Hexo完美实现-【保姆级教程】-helo博客建站系统-CSDN博客\" class=\"headerlink\" title=\"参考文章零成本搭建一款博客网站(基于Vercel+Hexo完美实现)【保姆级教程】_helo博客建站系统-CSDN博客\"></a>参考文章<a href=\"https://blog.csdn.net/weixin_52908342/article/details/135173988\">零成本搭建一款博客网站(基于Vercel+Hexo完美实现)【保姆级教程】_helo博客建站系统-CSDN博客</a></h5><h3 id=\"环境需求\"><a href=\"#环境需求\" class=\"headerlink\" title=\"环境需求\"></a>环境需求</h3><p>本地安装Node.js 和 Git，配置好环境变量</p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p>win+r管理员权限输入CMD<br>在命令提示符输入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425184750101.png\" alt=\"image-20240425184750101\"></p>\n<p>找一个准备作为博客仓库的文件夹，地址栏全选输入CMD（也可以直接在cmd里cd到该文件夹），此时我已建站，因此有个myblog</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425185141220-17141013416943.png\" alt=\"imgimage-20240425185141220\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init myblog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行之后正确输出如下</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425185325821.png\" alt=\"image-20240425185325821\"></p>\n<p>此时运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> myblog\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\nhexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>会下载npm（node的包管理器），并且启动基本的hexo博客服务，在地址栏粘贴弹出的地址，进入以下主页，证明框架基本安装完毕</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425185601131.png\" alt=\"image-20240425185601131\"></p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p>这里采用 Github的安知鱼主题</p>\n<p>如果使用windows&#x2F;Linux + git进行部署：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果使用git + GitHub + vercel进行部署：</p>\n<p>删除文件目录下的theme文件夹（不然在vercel自动化部署时会出现git嵌套导致主题不加载，变成空白网页），之后运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-theme-anzhiyu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样就好了，安知鱼主题的官方文档：<a href=\"https://vcl-docs.anheyu.com/advanced/\">进阶配置 | 安知鱼主题官方文档 (anheyu.com)</a></p>\n<p>如果没有pug和stylus渲染器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-renderer-pug hexo-renderer-stylus <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果是Linux&#x2F;macos（防止拉取更新时覆盖掉配置文件）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-rf</span> ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后在项目根目录找到网页配置文件，将theme后的值修改成anzhiyu,作者和博客地址什么的也是在这个配置文件</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425191140144.png\" alt=\"image-20240425191140144\"></p>\n<p>设置完毕后重新唤醒网页，我这个稍微改了点东西，一般正常的部署完是作者设置的hello world</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425191627146.png\" alt=\"image-20240425191627146\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425191755468.png\" alt=\"image-20240425191755468\"></p>\n<p>至此，正常的项目落地教程结束，接下来开始GitHub+vercel部署教程：</p>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><p>首先创建一个空仓库，在主页正中将仓库地址复制下来（如果你创建的时候勾选了添加readme，那地址就在绿色code按钮里）</p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"你的邮箱地址\"</span> //绑定邮箱\n\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"你的用户名\"</span>\t//绑定用户\n\n<span class=\"token function\">git</span> init //初始化一个git项目\n\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> //将本地仓库加载到git缓存中\n\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"描述\"</span> // 将文件的更改保存到本地代码仓库中\n\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin 仓库地址 //链接在线仓库\n\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master \t//将本地仓库更新到线上\n\n<span class=\"token function\">git</span> pull origin master //将线上仓库更新到本地（若本地仓库与线上存在额外文件，需要先更新本地，当然，也可以在push里使用force强行替换）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行完之后大致仓库如下</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425192752256.png\" alt=\"image-20240425192752256\"></p>\n<h3 id=\"Vercel\"><a href=\"#Vercel\" class=\"headerlink\" title=\"Vercel\"></a>Vercel</h3><p>首先用你的GitHub注册vercel~GitHub网页<strong>右上角</strong>有他们的地址</p>\n<p><a href=\"https://github.com/vercel/vercel\">vercel&#x2F;vercel: Develop. Preview. Ship. (github.com)</a></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimage-20240425193221563.png\" alt=\"image-20240425193221563\"></p>\n<p>注册完成登录见如下图片，点击<strong>右边</strong>那个<strong>Add New</strong>-Project</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425192903088.png\"></p>\n<p>选定咱创建的仓库</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425193853050.png\" alt=\"image-20240425193853050\"></p>\n<p>修改名称（只会影响vercel随机分配的域名）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimgimage-20240425194025109.png\" alt=\"image-20240425194025109\"></p>\n<h2 id=\"此时你大概率会报错\"><a href=\"#此时你大概率会报错\" class=\"headerlink\" title=\"此时你大概率会报错\"></a>此时你大概率会报错</h2><p>Error: Command “npm run build” exited with 126 vercel……..</p>\n<p>别慌，解决方法给你找好了（快速部署直接跳到下一个代码块，底下对很多人来说是废话）</p>\n<h5 id=\"先说结论\"><a href=\"#先说结论\" class=\"headerlink\" title=\"先说结论\"></a>先说结论</h5><p>这个报错一般是Linux系统权限不足或者缺少依赖，但是我们在本地Windows&#x2F;Linux上能跑呀，因此只能是Linux权限不足了，众所周知Linux系统授权执行一般有两种方法：root账户执行和sudo执行，由于vercel这个项目是自动化部署的，没有提供给用户的终端面板，因此我们只能想办法让其以sudo的形式执行。</p>\n<p>因此，打开配置文件package.json，将build一行修改为：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">chmod -R <span class=\"token number\">777</span> node_modules/ &amp;&amp; hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>代表赋予所有用户（拥有者、所属组、其他用户）读取、写入和执行的权限。<del>这段授权代码让我想起了实习时候搞嵌入式开发的悲惨历程</del></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425194631335.png\" alt=\"image-20240425194631335\"></p>\n<p>之后执行以下内容将更新加载到仓库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> //将本地仓库加载到git缓存中\n\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"描述\"</span> // 将文件的更改保存到本地代码仓库中\n\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master \t//将本地仓库更新到线上\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>此时，删除原来的vercel部署的项目（不是很确定，因此推荐在setting的常规设置滑到最底下删除旧的部署，因为我必须要删除重新部署，不然不能应用上游更改），重新执行前面的部署，等待彩条喷出，网站即可正确部署。</p>\n<p>部署完毕会给咱一个域名，可惜的是。vercel的域名已经被污染得差不多了。</p>\n<p>此时需要代理工具，访问项目给咱的域名，于是就能够浏览自己的博客了~。</p>\n<h3 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h3><p>如果咱自己有域名的话（没有的话不行哦，得自己购买并且实名），按照以下操作</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425195944460.png\" alt=\"image-20240425195944460\"></p>\n<p>一般有A和CNAME两种自定义域名方式</p>\n<h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h3><p>即Apex，顶级域名，输入框3之后会有一个框内提示域名未初始化，并且给出一个IP。</p>\n<p>将这个IP填入咱自己的域名提供商的解析ip就可以了、</p>\n<h3 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h3><p>这个是二级域名，自定义域名方式是域名转域名，输入框3后的值Value就是域名提供商页面的“目标值”，填好即可。</p>\n<p>最后完成后显示如图（虽然不知道打码的意义是什么但是按照惯例域名还是码了）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240425200457461.png\" alt=\"image-20240425200457461\"></p>\n<p>最后就可以通过域名访问咱自己的博客了~</p>\n<p>有空的话下一篇写怎么更新这个博客~</p>\n"},{"title":"chatglm3-6b部署学习记录","date":"2024-05-20T08:25:25.000Z","top_img":"https://s21.ax1x.com/2024/05/20/pkKyVtU.png","cover":"https://s21.ax1x.com/2024/05/20/pkKyVtU.png","_content":"\n## 本文作为re0部署ChatGLM3-6B模型过程的记录\n\n目前来说，个人部署大语言模型可以通过阿里云、autodl等平台自带的快速部署功能一键部署，但是本文记录从申请阿里云免费5000cu开始，通过命令行部署的过程。\n\n参考文献[ChatGLM3-6B大模型部署、微调【0到1小白教程】_chatglm3 6b最低部署要求-CSDN博客](https://blog.csdn.net/weixin_44480960/article/details/137092717?csdn_share_tail={\"type\"%3A\"blog\"%2C\"rType\"%3A\"article\"%2C\"rId\"%3A\"137092717\"%2C\"source\"%3A\"weixin_44480960\"}&fromshare=blogdetail)\n\n#### GPU申请\n\n首先申请这个阿里云的5000计算时产品，有A10和V100两张GUP可选\n\n感谢阿里云的免费计算资源\n\n![image-20240520163240884](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520163240884.png)\n\n稍等一会之后点选免费试用\n\n![image-20240520163848394](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520163848394.png)\n\n点选**第一个**即可，其他两个我暂时还不了解，有需要的可以自己申请用\n\n![image-20240520164011525](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164011525.png)\n\n点击之后会跳转到控制台，在控制台点选**新建实例**（因为我之前创建过因此存在实例）\n\n![image-20240520164107448](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164107448.png)\n\n配置选择GPU服务器，其中**A10**和**V100**是可以通过免费计算时抵扣的，二者的区别如下：\n\nA10：显存更大，擅长进行图形计算任务\n\nV100：计算能力更强，显存比A10小，整体多2G内存\n\n其中，A10不关机够用**30**天，V100够用**15**天，虽然是免费资源，**但是还是提醒记得关机~**\n\n（也可以多开资源，但是目前我没尝试过）\n\n![image-20240520164537417](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164537417.png)\n\n环境选择，我这里是目前官方默认的，建议\n\n- **pytorch2.1.2**\n- **tensorflow2.14.0**\n- **py310**\n\n以上环境是目前主流pytorch深度学习项目选择的环境，你也可以自己选择喜欢的镜像。\n\n![image-20240520165156759](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520165156759.png)\n\n配置完成后在交互式建模界面可以看到实例，默认应该是开好机的，图示中我已经关机了\n\n![image-20240520165824955](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520165824955.png)\n\n至此，硬件环境安装到此结束。\n\n\n\n#### 开始chatglm3-6b部署\n\n```shell\nmkdir models\ncd models\n#创建模型文件夹\napt update\napt install git-lfs\n#更新apt和安装git\ngit clone https://www.modelscope.cn/ZhipuAI/chatglm3-6b.git\n# 克隆chatGLM3-6b大模型\n\n```\n\n阿里云的DSW终端不支持方向键回滚命令...所以还是一条一条复制吧（如果是设置问题希望有人能教我一下怎么把方向键绑定为上一条下一条命令的快捷键）\n\n```shell\nmkdir webcodes\ncd webcodes\n \ngit clone https://github.com/THUDM/ChatGLM3.git\\\n# 下载chatglm3-6b web_demo项目\n\ncd ChatGLM3\n#原博主忘了把这一条cd命令加进去\n\npip install -r requirements.txt\n# 安装依赖\n```\n\n![image-20240520172513472](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520172513472.png)\n\n有一些版本相关的报错，先跑后面的项目，如果出现依赖问题，再进行修改。\n\n点击阿里云左上角文件标志，进入webcodes/ChatGLM3/basic_demo选择**cli_demo.py**文件\n\n![image-20240520173117842](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173117842.png)\n\n修改文件路径，用终端cd到对应模型的文件夹下，pwd打出路径进行复制\n\n![image-20240520173551060](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173551060.png)\n\n最后在cli里替换掉路径就可以了\n\n![image-20240520173656400](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173656400.png)\n\n之后回到对应目录运行前端\n\n```shell\ncd /mnt/workspace/models/webcodes/ChatGLM3/basic_demo/\npython cli_demo.py\n```\n\n![image-20240520174224228](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520174224228.png)\n\n此时已经正常启动小黑窗进行对话了，然后上面出现的报错是因为一开始输入了**中文逗号**，无法识别为字符串，不清楚是python的问题还是编码的问题。\n\n之后同样是对gradio前端和stream前端路径进行修改，让其读取本地的模型\n\n![image-20240520174620647](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520174620647.png)\n\n修改完成后ctrl+c退出之前运行的小黑窗，运行gradio前端\n\n```shell\npython web_demo_gradio.py\n```\n\n首次运行的时候我出现了报错ModuleNotFoundError: No module named 'peft'\n\n重新安装一下这个peft\n\n```shell\npip install peft\n```\n\n此时重新启动gradio前端就可以正常运行了（**点击阿里云给的本地ip，会自动跳转到域名链接，这一点很不错**）\n\n![image-20240520175229381](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520175229381.png)\n\n进入gradio前端发现无法正常对话，推测是gradio版本的问题，因为终端出现了输入信息，但是没有返回\n\n![image-20240520175739297](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520175739297.png)\n\n```shell\npip show gradio\n```\n\n发现我的服务器安装的gradio版本为\n\n**Name: gradio**\n**Version: 4.31.4**\n\n换成4.2的版本试过，还是不行，命令行提示4.29版本可以更新，4.29也不行\n\n![image-20240520180624589](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520180624589.png)\n\n```shell\npip install \"gradio>=3.38.0,<4.0.0\"\n```\n\n最终使用了3.50版本，成功解决了部署问题。\n\n![image-20240520181333764](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520181333764.png)\n\n\n\n最后再来试试stream的前端\n\n```shell\npython web_demo_streamlit.py\n```\n\n报错，显示history没有初始化。\n\n```shell\nstreamlit run web_demo_streamlit.py\n```\n\n使用以上命令可以正常运行，但是打不开网页\n\n最后了解到是因为阿里云的这个GPU服务器不支持IP+端口号访问，streamlit前端只能以后到autodl或者其他GPU云服务器平台再玩了。\n\n至此，chatglm3-6b的部署过程就结束了\n\n过几天尝试chatglm3-6b的微调训练。\n","source":"_posts/chatglm3-6b部署学习记录.md","raw":"---\ntitle: chatglm3-6b部署学习记录\ndate: 2024-05-20 16:25:25\ntags: LLM \ncategories: 开发教程\ntop_img: https://s21.ax1x.com/2024/05/20/pkKyVtU.png\ncover: https://s21.ax1x.com/2024/05/20/pkKyVtU.png\n---\n\n## 本文作为re0部署ChatGLM3-6B模型过程的记录\n\n目前来说，个人部署大语言模型可以通过阿里云、autodl等平台自带的快速部署功能一键部署，但是本文记录从申请阿里云免费5000cu开始，通过命令行部署的过程。\n\n参考文献[ChatGLM3-6B大模型部署、微调【0到1小白教程】_chatglm3 6b最低部署要求-CSDN博客](https://blog.csdn.net/weixin_44480960/article/details/137092717?csdn_share_tail={\"type\"%3A\"blog\"%2C\"rType\"%3A\"article\"%2C\"rId\"%3A\"137092717\"%2C\"source\"%3A\"weixin_44480960\"}&fromshare=blogdetail)\n\n#### GPU申请\n\n首先申请这个阿里云的5000计算时产品，有A10和V100两张GUP可选\n\n感谢阿里云的免费计算资源\n\n![image-20240520163240884](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520163240884.png)\n\n稍等一会之后点选免费试用\n\n![image-20240520163848394](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520163848394.png)\n\n点选**第一个**即可，其他两个我暂时还不了解，有需要的可以自己申请用\n\n![image-20240520164011525](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164011525.png)\n\n点击之后会跳转到控制台，在控制台点选**新建实例**（因为我之前创建过因此存在实例）\n\n![image-20240520164107448](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164107448.png)\n\n配置选择GPU服务器，其中**A10**和**V100**是可以通过免费计算时抵扣的，二者的区别如下：\n\nA10：显存更大，擅长进行图形计算任务\n\nV100：计算能力更强，显存比A10小，整体多2G内存\n\n其中，A10不关机够用**30**天，V100够用**15**天，虽然是免费资源，**但是还是提醒记得关机~**\n\n（也可以多开资源，但是目前我没尝试过）\n\n![image-20240520164537417](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164537417.png)\n\n环境选择，我这里是目前官方默认的，建议\n\n- **pytorch2.1.2**\n- **tensorflow2.14.0**\n- **py310**\n\n以上环境是目前主流pytorch深度学习项目选择的环境，你也可以自己选择喜欢的镜像。\n\n![image-20240520165156759](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520165156759.png)\n\n配置完成后在交互式建模界面可以看到实例，默认应该是开好机的，图示中我已经关机了\n\n![image-20240520165824955](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520165824955.png)\n\n至此，硬件环境安装到此结束。\n\n\n\n#### 开始chatglm3-6b部署\n\n```shell\nmkdir models\ncd models\n#创建模型文件夹\napt update\napt install git-lfs\n#更新apt和安装git\ngit clone https://www.modelscope.cn/ZhipuAI/chatglm3-6b.git\n# 克隆chatGLM3-6b大模型\n\n```\n\n阿里云的DSW终端不支持方向键回滚命令...所以还是一条一条复制吧（如果是设置问题希望有人能教我一下怎么把方向键绑定为上一条下一条命令的快捷键）\n\n```shell\nmkdir webcodes\ncd webcodes\n \ngit clone https://github.com/THUDM/ChatGLM3.git\\\n# 下载chatglm3-6b web_demo项目\n\ncd ChatGLM3\n#原博主忘了把这一条cd命令加进去\n\npip install -r requirements.txt\n# 安装依赖\n```\n\n![image-20240520172513472](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520172513472.png)\n\n有一些版本相关的报错，先跑后面的项目，如果出现依赖问题，再进行修改。\n\n点击阿里云左上角文件标志，进入webcodes/ChatGLM3/basic_demo选择**cli_demo.py**文件\n\n![image-20240520173117842](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173117842.png)\n\n修改文件路径，用终端cd到对应模型的文件夹下，pwd打出路径进行复制\n\n![image-20240520173551060](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173551060.png)\n\n最后在cli里替换掉路径就可以了\n\n![image-20240520173656400](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173656400.png)\n\n之后回到对应目录运行前端\n\n```shell\ncd /mnt/workspace/models/webcodes/ChatGLM3/basic_demo/\npython cli_demo.py\n```\n\n![image-20240520174224228](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520174224228.png)\n\n此时已经正常启动小黑窗进行对话了，然后上面出现的报错是因为一开始输入了**中文逗号**，无法识别为字符串，不清楚是python的问题还是编码的问题。\n\n之后同样是对gradio前端和stream前端路径进行修改，让其读取本地的模型\n\n![image-20240520174620647](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520174620647.png)\n\n修改完成后ctrl+c退出之前运行的小黑窗，运行gradio前端\n\n```shell\npython web_demo_gradio.py\n```\n\n首次运行的时候我出现了报错ModuleNotFoundError: No module named 'peft'\n\n重新安装一下这个peft\n\n```shell\npip install peft\n```\n\n此时重新启动gradio前端就可以正常运行了（**点击阿里云给的本地ip，会自动跳转到域名链接，这一点很不错**）\n\n![image-20240520175229381](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520175229381.png)\n\n进入gradio前端发现无法正常对话，推测是gradio版本的问题，因为终端出现了输入信息，但是没有返回\n\n![image-20240520175739297](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520175739297.png)\n\n```shell\npip show gradio\n```\n\n发现我的服务器安装的gradio版本为\n\n**Name: gradio**\n**Version: 4.31.4**\n\n换成4.2的版本试过，还是不行，命令行提示4.29版本可以更新，4.29也不行\n\n![image-20240520180624589](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520180624589.png)\n\n```shell\npip install \"gradio>=3.38.0,<4.0.0\"\n```\n\n最终使用了3.50版本，成功解决了部署问题。\n\n![image-20240520181333764](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520181333764.png)\n\n\n\n最后再来试试stream的前端\n\n```shell\npython web_demo_streamlit.py\n```\n\n报错，显示history没有初始化。\n\n```shell\nstreamlit run web_demo_streamlit.py\n```\n\n使用以上命令可以正常运行，但是打不开网页\n\n最后了解到是因为阿里云的这个GPU服务器不支持IP+端口号访问，streamlit前端只能以后到autodl或者其他GPU云服务器平台再玩了。\n\n至此，chatglm3-6b的部署过程就结束了\n\n过几天尝试chatglm3-6b的微调训练。\n","slug":"chatglm3-6b部署学习记录","published":1,"updated":"2024-05-20T15:39:59.236Z","comments":1,"layout":"post","photos":[],"_id":"clwnrkl3d0007osw5hgcg9c2r","content":"<h2 id=\"本文作为re0部署ChatGLM3-6B模型过程的记录\"><a href=\"#本文作为re0部署ChatGLM3-6B模型过程的记录\" class=\"headerlink\" title=\"本文作为re0部署ChatGLM3-6B模型过程的记录\"></a>本文作为re0部署ChatGLM3-6B模型过程的记录</h2><p>目前来说，个人部署大语言模型可以通过阿里云、autodl等平台自带的快速部署功能一键部署，但是本文记录从申请阿里云免费5000cu开始，通过命令行部署的过程。</p>\n<p>参考文献<a href=\"https://blog.csdn.net/weixin_44480960/article/details/137092717?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22137092717%22,%22source%22:%22weixin_44480960%22%7D&fromshare=blogdetail\">ChatGLM3-6B大模型部署、微调【0到1小白教程】_chatglm3 6b最低部署要求-CSDN博客</a></p>\n<h4 id=\"GPU申请\"><a href=\"#GPU申请\" class=\"headerlink\" title=\"GPU申请\"></a>GPU申请</h4><p>首先申请这个阿里云的5000计算时产品，有A10和V100两张GUP可选</p>\n<p>感谢阿里云的免费计算资源</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520163240884.png\" alt=\"image-20240520163240884\"></p>\n<p>稍等一会之后点选免费试用</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520163848394.png\" alt=\"image-20240520163848394\"></p>\n<p>点选<strong>第一个</strong>即可，其他两个我暂时还不了解，有需要的可以自己申请用</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164011525.png\" alt=\"image-20240520164011525\"></p>\n<p>点击之后会跳转到控制台，在控制台点选<strong>新建实例</strong>（因为我之前创建过因此存在实例）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164107448.png\" alt=\"image-20240520164107448\"></p>\n<p>配置选择GPU服务器，其中<strong>A10</strong>和<strong>V100</strong>是可以通过免费计算时抵扣的，二者的区别如下：</p>\n<p>A10：显存更大，擅长进行图形计算任务</p>\n<p>V100：计算能力更强，显存比A10小，整体多2G内存</p>\n<p>其中，A10不关机够用<strong>30</strong>天，V100够用<strong>15</strong>天，虽然是免费资源，<strong>但是还是提醒记得关机~</strong></p>\n<p>（也可以多开资源，但是目前我没尝试过）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164537417.png\" alt=\"image-20240520164537417\"></p>\n<p>环境选择，我这里是目前官方默认的，建议</p>\n<ul>\n<li><strong>pytorch2.1.2</strong></li>\n<li><strong>tensorflow2.14.0</strong></li>\n<li><strong>py310</strong></li>\n</ul>\n<p>以上环境是目前主流pytorch深度学习项目选择的环境，你也可以自己选择喜欢的镜像。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520165156759.png\" alt=\"image-20240520165156759\"></p>\n<p>配置完成后在交互式建模界面可以看到实例，默认应该是开好机的，图示中我已经关机了</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520165824955.png\" alt=\"image-20240520165824955\"></p>\n<p>至此，硬件环境安装到此结束。</p>\n<h4 id=\"开始chatglm3-6b部署\"><a href=\"#开始chatglm3-6b部署\" class=\"headerlink\" title=\"开始chatglm3-6b部署\"></a>开始chatglm3-6b部署</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> models\n<span class=\"token builtin class-name\">cd</span> models\n<span class=\"token comment\">#创建模型文件夹</span>\n<span class=\"token function\">apt</span> update\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> git-lfs\n<span class=\"token comment\">#更新apt和安装git</span>\n<span class=\"token function\">git</span> clone https://www.modelscope.cn/ZhipuAI/chatglm3-6b.git\n<span class=\"token comment\"># 克隆chatGLM3-6b大模型</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>阿里云的DSW终端不支持方向键回滚命令…所以还是一条一条复制吧（如果是设置问题希望有人能教我一下怎么把方向键绑定为上一条下一条命令的快捷键）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> webcodes\n<span class=\"token builtin class-name\">cd</span> webcodes\n \n<span class=\"token function\">git</span> clone https://github.com/THUDM/ChatGLM3.git<span class=\"token punctuation\">\\</span>\n<span class=\"token comment\"># 下载chatglm3-6b web_demo项目</span>\n\n<span class=\"token builtin class-name\">cd</span> ChatGLM3\n<span class=\"token comment\">#原博主忘了把这一条cd命令加进去</span>\n\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt\n<span class=\"token comment\"># 安装依赖</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520172513472.png\" alt=\"image-20240520172513472\"></p>\n<p>有一些版本相关的报错，先跑后面的项目，如果出现依赖问题，再进行修改。</p>\n<p>点击阿里云左上角文件标志，进入webcodes&#x2F;ChatGLM3&#x2F;basic_demo选择<strong>cli_demo.py</strong>文件</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173117842.png\" alt=\"image-20240520173117842\"></p>\n<p>修改文件路径，用终端cd到对应模型的文件夹下，pwd打出路径进行复制</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173551060.png\" alt=\"image-20240520173551060\"></p>\n<p>最后在cli里替换掉路径就可以了</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173656400.png\" alt=\"image-20240520173656400\"></p>\n<p>之后回到对应目录运行前端</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /mnt/workspace/models/webcodes/ChatGLM3/basic_demo/\npython cli_demo.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520174224228.png\" alt=\"image-20240520174224228\"></p>\n<p>此时已经正常启动小黑窗进行对话了，然后上面出现的报错是因为一开始输入了<strong>中文逗号</strong>，无法识别为字符串，不清楚是python的问题还是编码的问题。</p>\n<p>之后同样是对gradio前端和stream前端路径进行修改，让其读取本地的模型</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520174620647.png\" alt=\"image-20240520174620647\"></p>\n<p>修改完成后ctrl+c退出之前运行的小黑窗，运行gradio前端</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python web_demo_gradio.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首次运行的时候我出现了报错ModuleNotFoundError: No module named ‘peft’</p>\n<p>重新安装一下这个peft</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> peft<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时重新启动gradio前端就可以正常运行了（<strong>点击阿里云给的本地ip，会自动跳转到域名链接，这一点很不错</strong>）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520175229381.png\" alt=\"image-20240520175229381\"></p>\n<p>进入gradio前端发现无法正常对话，推测是gradio版本的问题，因为终端出现了输入信息，但是没有返回</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520175739297.png\" alt=\"image-20240520175739297\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip show gradio<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>发现我的服务器安装的gradio版本为</p>\n<p><strong>Name: gradio</strong><br><strong>Version: 4.31.4</strong></p>\n<p>换成4.2的版本试过，还是不行，命令行提示4.29版本可以更新，4.29也不行</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520180624589.png\" alt=\"image-20240520180624589\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token string\">\"gradio>=3.38.0,&lt;4.0.0\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最终使用了3.50版本，成功解决了部署问题。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520181333764.png\" alt=\"image-20240520181333764\"></p>\n<p>最后再来试试stream的前端</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python web_demo_streamlit.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>报错，显示history没有初始化。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">streamlit run web_demo_streamlit.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用以上命令可以正常运行，但是打不开网页</p>\n<p>最后了解到是因为阿里云的这个GPU服务器不支持IP+端口号访问，streamlit前端只能以后到autodl或者其他GPU云服务器平台再玩了。</p>\n<p>至此，chatglm3-6b的部署过程就结束了</p>\n<p>过几天尝试chatglm3-6b的微调训练。</p>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"本文作为re0部署ChatGLM3-6B模型过程的记录\"><a href=\"#本文作为re0部署ChatGLM3-6B模型过程的记录\" class=\"headerlink\" title=\"本文作为re0部署ChatGLM3-6B模型过程的记录\"></a>本文作为re0部署ChatGLM3-6B模型过程的记录</h2><p>目前来说，个人部署大语言模型可以通过阿里云、autodl等平台自带的快速部署功能一键部署，但是本文记录从申请阿里云免费5000cu开始，通过命令行部署的过程。</p>\n<p>参考文献<a href=\"https://blog.csdn.net/weixin_44480960/article/details/137092717?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22137092717%22,%22source%22:%22weixin_44480960%22%7D&fromshare=blogdetail\">ChatGLM3-6B大模型部署、微调【0到1小白教程】_chatglm3 6b最低部署要求-CSDN博客</a></p>\n<h4 id=\"GPU申请\"><a href=\"#GPU申请\" class=\"headerlink\" title=\"GPU申请\"></a>GPU申请</h4><p>首先申请这个阿里云的5000计算时产品，有A10和V100两张GUP可选</p>\n<p>感谢阿里云的免费计算资源</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520163240884.png\" alt=\"image-20240520163240884\"></p>\n<p>稍等一会之后点选免费试用</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520163848394.png\" alt=\"image-20240520163848394\"></p>\n<p>点选<strong>第一个</strong>即可，其他两个我暂时还不了解，有需要的可以自己申请用</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164011525.png\" alt=\"image-20240520164011525\"></p>\n<p>点击之后会跳转到控制台，在控制台点选<strong>新建实例</strong>（因为我之前创建过因此存在实例）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164107448.png\" alt=\"image-20240520164107448\"></p>\n<p>配置选择GPU服务器，其中<strong>A10</strong>和<strong>V100</strong>是可以通过免费计算时抵扣的，二者的区别如下：</p>\n<p>A10：显存更大，擅长进行图形计算任务</p>\n<p>V100：计算能力更强，显存比A10小，整体多2G内存</p>\n<p>其中，A10不关机够用<strong>30</strong>天，V100够用<strong>15</strong>天，虽然是免费资源，<strong>但是还是提醒记得关机~</strong></p>\n<p>（也可以多开资源，但是目前我没尝试过）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520164537417.png\" alt=\"image-20240520164537417\"></p>\n<p>环境选择，我这里是目前官方默认的，建议</p>\n<ul>\n<li><strong>pytorch2.1.2</strong></li>\n<li><strong>tensorflow2.14.0</strong></li>\n<li><strong>py310</strong></li>\n</ul>\n<p>以上环境是目前主流pytorch深度学习项目选择的环境，你也可以自己选择喜欢的镜像。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520165156759.png\" alt=\"image-20240520165156759\"></p>\n<p>配置完成后在交互式建模界面可以看到实例，默认应该是开好机的，图示中我已经关机了</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520165824955.png\" alt=\"image-20240520165824955\"></p>\n<p>至此，硬件环境安装到此结束。</p>\n<h4 id=\"开始chatglm3-6b部署\"><a href=\"#开始chatglm3-6b部署\" class=\"headerlink\" title=\"开始chatglm3-6b部署\"></a>开始chatglm3-6b部署</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> models\n<span class=\"token builtin class-name\">cd</span> models\n<span class=\"token comment\">#创建模型文件夹</span>\n<span class=\"token function\">apt</span> update\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> git-lfs\n<span class=\"token comment\">#更新apt和安装git</span>\n<span class=\"token function\">git</span> clone https://www.modelscope.cn/ZhipuAI/chatglm3-6b.git\n<span class=\"token comment\"># 克隆chatGLM3-6b大模型</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>阿里云的DSW终端不支持方向键回滚命令…所以还是一条一条复制吧（如果是设置问题希望有人能教我一下怎么把方向键绑定为上一条下一条命令的快捷键）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> webcodes\n<span class=\"token builtin class-name\">cd</span> webcodes\n \n<span class=\"token function\">git</span> clone https://github.com/THUDM/ChatGLM3.git<span class=\"token punctuation\">\\</span>\n<span class=\"token comment\"># 下载chatglm3-6b web_demo项目</span>\n\n<span class=\"token builtin class-name\">cd</span> ChatGLM3\n<span class=\"token comment\">#原博主忘了把这一条cd命令加进去</span>\n\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt\n<span class=\"token comment\"># 安装依赖</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520172513472.png\" alt=\"image-20240520172513472\"></p>\n<p>有一些版本相关的报错，先跑后面的项目，如果出现依赖问题，再进行修改。</p>\n<p>点击阿里云左上角文件标志，进入webcodes&#x2F;ChatGLM3&#x2F;basic_demo选择<strong>cli_demo.py</strong>文件</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173117842.png\" alt=\"image-20240520173117842\"></p>\n<p>修改文件路径，用终端cd到对应模型的文件夹下，pwd打出路径进行复制</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173551060.png\" alt=\"image-20240520173551060\"></p>\n<p>最后在cli里替换掉路径就可以了</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520173656400.png\" alt=\"image-20240520173656400\"></p>\n<p>之后回到对应目录运行前端</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /mnt/workspace/models/webcodes/ChatGLM3/basic_demo/\npython cli_demo.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520174224228.png\" alt=\"image-20240520174224228\"></p>\n<p>此时已经正常启动小黑窗进行对话了，然后上面出现的报错是因为一开始输入了<strong>中文逗号</strong>，无法识别为字符串，不清楚是python的问题还是编码的问题。</p>\n<p>之后同样是对gradio前端和stream前端路径进行修改，让其读取本地的模型</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520174620647.png\" alt=\"image-20240520174620647\"></p>\n<p>修改完成后ctrl+c退出之前运行的小黑窗，运行gradio前端</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python web_demo_gradio.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首次运行的时候我出现了报错ModuleNotFoundError: No module named ‘peft’</p>\n<p>重新安装一下这个peft</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> peft<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时重新启动gradio前端就可以正常运行了（<strong>点击阿里云给的本地ip，会自动跳转到域名链接，这一点很不错</strong>）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520175229381.png\" alt=\"image-20240520175229381\"></p>\n<p>进入gradio前端发现无法正常对话，推测是gradio版本的问题，因为终端出现了输入信息，但是没有返回</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520175739297.png\" alt=\"image-20240520175739297\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip show gradio<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>发现我的服务器安装的gradio版本为</p>\n<p><strong>Name: gradio</strong><br><strong>Version: 4.31.4</strong></p>\n<p>换成4.2的版本试过，还是不行，命令行提示4.29版本可以更新，4.29也不行</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520180624589.png\" alt=\"image-20240520180624589\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token string\">\"gradio>=3.38.0,&lt;4.0.0\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最终使用了3.50版本，成功解决了部署问题。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240520181333764.png\" alt=\"image-20240520181333764\"></p>\n<p>最后再来试试stream的前端</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python web_demo_streamlit.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>报错，显示history没有初始化。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">streamlit run web_demo_streamlit.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用以上命令可以正常运行，但是打不开网页</p>\n<p>最后了解到是因为阿里云的这个GPU服务器不支持IP+端口号访问，streamlit前端只能以后到autodl或者其他GPU云服务器平台再玩了。</p>\n<p>至此，chatglm3-6b的部署过程就结束了</p>\n<p>过几天尝试chatglm3-6b的微调训练。</p>\n"},{"title":"hexo博客更新文章教程","date":"2024-05-19T07:13:41.000Z","top_img":"https://s21.ax1x.com/2024/05/20/pkKysN8.png","cover":"https://s21.ax1x.com/2024/05/20/pkKysN8.png","_content":"\n## 本文将系统性介绍如何通过hexo博客写文章上传\n\n如果阅读本文前未部署个人博客请结合[Hexo安装过程与问题解决 | Hexo-Aou (aou123.xyz)](https://blog.aou123.xyz/2024/04/25/Hexo安装过程与问题解决/)使用\n\n\n\n#### 进入hexo\n\n打开**git cmd**，先输入对应的盘符（比如我本地仓库在D盘，需要先输入D:回车，默认C盘不需要操作）\n\n移动到博客本地仓库，再使用hexo new命令新建一个文章\n\n```shell\ncd 本地仓库地址\nhexo new \"你的文章名字\"\n```\n\n\n\n![image-20240519152223867](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519152223867.png)\n\n之后在\\source\\\\_posts文件夹下可以看见新建的md文件\n\n![image-20240519152735054](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519152735054.png)\n\n\n\n#### 编辑文本\n\n使用md编辑器打开文件，我使用的是**Typora**，大家可以使用自己喜欢的编辑器\n\n文件内自动生成了一个hexo的标题，冒号后面的内容都是可以进行修改的，其中tags需要自己去阅读hexo或者anzhiyu主题的文档进行添加功能。\n\n![image-20240519153758654](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519153758654.png)\n\n其中，有一个小bug，当第一个输入的正文字符为中文时，会自动写到tags：后面，因此我的解决方案是先如图输入一个数字或者西文字符，写完再第一行再把它删除。\n\n\n\n#### 配置图床\n\n**图床**简单来说就是用于存储图片的服务器，由于博客部署在vercel上，无法直接通过相对路径索引的形式加载图片，这时就需要用到图床。\n\n**如果博客部署在个人服务器上**，**那么图床服务可以不按照以下教程进行**（我没有能够作为图床的个人服务器，不清楚服务器环境下hexo能否直接从本地加载图片）\n\n\n\n首先安装**PicGo**，这是一个开源的图床软件，我安装的版本是2.4.0\n\n[Releases · Molunerfinn/PicGo (github.com)](https://github.com/Molunerfinn/PicGo/releases)\n\n安装完成后，进入图床设置 本文使用**GitHub**作为图床\n\n仓库名为GitHub主页显示的：\n\n![image-20240519160055399](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519160055399.png)\n\n分支名为你自己的分支名，如果完全按照我的教程来，应该是master，使用默认分支名的话，一般情况是main，可以在GitHub仓库的顶部分支看到。\n\ntoken去GitHub-setting-develop setting里申请，具体教程在百度上有很清晰的图文\n\n![image-20240519160816009](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519160816009.png)\n\n储存路径可以自己新建文件夹但是注意，picgo的储存路径最后一项不是文件夹，是图片头的名字（即会给图片加一个前缀）\n\n![image-20240519155601082](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519155601082.png)\n\nCDN加速用的是https://jsdelivr.codeqihan.com/\n\n加上gh/GitHub用户名/仓库名\n\n是启涵大佬的镜像[自制的一个jsDelivr镜像分享 - 启涵的博客 (codeqihan.com)](https://www.codeqihan.com/post/zi-zhi-de-yi-ge-jsdelivr-jing-xiang-fen-xiang/)\n\n\n\n配置完成后，在typora偏好设置中配置picgo图床\n\n![image-20240519234608363](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519234608363.png)\n\n写完博客后直接在格式-图像-上传所有本地图片就ok了\n\n![image-20240519234535806](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519234535806.png)\n\n如果上传失败，在保证配置正确的情况下，优先考虑是不是开了代理，包括但不限于**steam++**，科学上网等\n\n图片传完记得去git推送一下更新。\n\n```shell\ngit add .\ngit commit -m \"博客更新\"\ngit pull\ngit push\n```\n\n\n\n本文至此告一段落。\n","source":"_posts/hexo博客更新文章教程.md","raw":"---\ntitle: hexo博客更新文章教程\ndate: 2024-05-19 15:13:41\ntags: Hexo\ncategories: 开发教程\ntop_img: https://s21.ax1x.com/2024/05/20/pkKysN8.png\ncover: https://s21.ax1x.com/2024/05/20/pkKysN8.png\n---\n\n## 本文将系统性介绍如何通过hexo博客写文章上传\n\n如果阅读本文前未部署个人博客请结合[Hexo安装过程与问题解决 | Hexo-Aou (aou123.xyz)](https://blog.aou123.xyz/2024/04/25/Hexo安装过程与问题解决/)使用\n\n\n\n#### 进入hexo\n\n打开**git cmd**，先输入对应的盘符（比如我本地仓库在D盘，需要先输入D:回车，默认C盘不需要操作）\n\n移动到博客本地仓库，再使用hexo new命令新建一个文章\n\n```shell\ncd 本地仓库地址\nhexo new \"你的文章名字\"\n```\n\n\n\n![image-20240519152223867](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519152223867.png)\n\n之后在\\source\\\\_posts文件夹下可以看见新建的md文件\n\n![image-20240519152735054](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519152735054.png)\n\n\n\n#### 编辑文本\n\n使用md编辑器打开文件，我使用的是**Typora**，大家可以使用自己喜欢的编辑器\n\n文件内自动生成了一个hexo的标题，冒号后面的内容都是可以进行修改的，其中tags需要自己去阅读hexo或者anzhiyu主题的文档进行添加功能。\n\n![image-20240519153758654](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519153758654.png)\n\n其中，有一个小bug，当第一个输入的正文字符为中文时，会自动写到tags：后面，因此我的解决方案是先如图输入一个数字或者西文字符，写完再第一行再把它删除。\n\n\n\n#### 配置图床\n\n**图床**简单来说就是用于存储图片的服务器，由于博客部署在vercel上，无法直接通过相对路径索引的形式加载图片，这时就需要用到图床。\n\n**如果博客部署在个人服务器上**，**那么图床服务可以不按照以下教程进行**（我没有能够作为图床的个人服务器，不清楚服务器环境下hexo能否直接从本地加载图片）\n\n\n\n首先安装**PicGo**，这是一个开源的图床软件，我安装的版本是2.4.0\n\n[Releases · Molunerfinn/PicGo (github.com)](https://github.com/Molunerfinn/PicGo/releases)\n\n安装完成后，进入图床设置 本文使用**GitHub**作为图床\n\n仓库名为GitHub主页显示的：\n\n![image-20240519160055399](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519160055399.png)\n\n分支名为你自己的分支名，如果完全按照我的教程来，应该是master，使用默认分支名的话，一般情况是main，可以在GitHub仓库的顶部分支看到。\n\ntoken去GitHub-setting-develop setting里申请，具体教程在百度上有很清晰的图文\n\n![image-20240519160816009](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519160816009.png)\n\n储存路径可以自己新建文件夹但是注意，picgo的储存路径最后一项不是文件夹，是图片头的名字（即会给图片加一个前缀）\n\n![image-20240519155601082](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519155601082.png)\n\nCDN加速用的是https://jsdelivr.codeqihan.com/\n\n加上gh/GitHub用户名/仓库名\n\n是启涵大佬的镜像[自制的一个jsDelivr镜像分享 - 启涵的博客 (codeqihan.com)](https://www.codeqihan.com/post/zi-zhi-de-yi-ge-jsdelivr-jing-xiang-fen-xiang/)\n\n\n\n配置完成后，在typora偏好设置中配置picgo图床\n\n![image-20240519234608363](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519234608363.png)\n\n写完博客后直接在格式-图像-上传所有本地图片就ok了\n\n![image-20240519234535806](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519234535806.png)\n\n如果上传失败，在保证配置正确的情况下，优先考虑是不是开了代理，包括但不限于**steam++**，科学上网等\n\n图片传完记得去git推送一下更新。\n\n```shell\ngit add .\ngit commit -m \"博客更新\"\ngit pull\ngit push\n```\n\n\n\n本文至此告一段落。\n","slug":"hexo博客更新文章教程","published":1,"updated":"2024-05-20T10:56:37.037Z","comments":1,"layout":"post","photos":[],"_id":"clwnrkl3n0009osw5ejo6eeb3","content":"<h2 id=\"本文将系统性介绍如何通过hexo博客写文章上传\"><a href=\"#本文将系统性介绍如何通过hexo博客写文章上传\" class=\"headerlink\" title=\"本文将系统性介绍如何通过hexo博客写文章上传\"></a>本文将系统性介绍如何通过hexo博客写文章上传</h2><p>如果阅读本文前未部署个人博客请结合<a href=\"https://blog.aou123.xyz/2024/04/25/Hexo%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/\">Hexo安装过程与问题解决 | Hexo-Aou (aou123.xyz)</a>使用</p>\n<h4 id=\"进入hexo\"><a href=\"#进入hexo\" class=\"headerlink\" title=\"进入hexo\"></a>进入hexo</h4><p>打开<strong>git cmd</strong>，先输入对应的盘符（比如我本地仓库在D盘，需要先输入D:回车，默认C盘不需要操作）</p>\n<p>移动到博客本地仓库，再使用hexo new命令新建一个文章</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> 本地仓库地址\nhexo new <span class=\"token string\">\"你的文章名字\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519152223867.png\" alt=\"image-20240519152223867\"></p>\n<p>之后在\\source\\_posts文件夹下可以看见新建的md文件</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519152735054.png\" alt=\"image-20240519152735054\"></p>\n<h4 id=\"编辑文本\"><a href=\"#编辑文本\" class=\"headerlink\" title=\"编辑文本\"></a>编辑文本</h4><p>使用md编辑器打开文件，我使用的是<strong>Typora</strong>，大家可以使用自己喜欢的编辑器</p>\n<p>文件内自动生成了一个hexo的标题，冒号后面的内容都是可以进行修改的，其中tags需要自己去阅读hexo或者anzhiyu主题的文档进行添加功能。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519153758654.png\" alt=\"image-20240519153758654\"></p>\n<p>其中，有一个小bug，当第一个输入的正文字符为中文时，会自动写到tags：后面，因此我的解决方案是先如图输入一个数字或者西文字符，写完再第一行再把它删除。</p>\n<h4 id=\"配置图床\"><a href=\"#配置图床\" class=\"headerlink\" title=\"配置图床\"></a>配置图床</h4><p><strong>图床</strong>简单来说就是用于存储图片的服务器，由于博客部署在vercel上，无法直接通过相对路径索引的形式加载图片，这时就需要用到图床。</p>\n<p><strong>如果博客部署在个人服务器上</strong>，<strong>那么图床服务可以不按照以下教程进行</strong>（我没有能够作为图床的个人服务器，不清楚服务器环境下hexo能否直接从本地加载图片）</p>\n<p>首先安装<strong>PicGo</strong>，这是一个开源的图床软件，我安装的版本是2.4.0</p>\n<p><a href=\"https://github.com/Molunerfinn/PicGo/releases\">Releases · Molunerfinn&#x2F;PicGo (github.com)</a></p>\n<p>安装完成后，进入图床设置 本文使用<strong>GitHub</strong>作为图床</p>\n<p>仓库名为GitHub主页显示的：</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519160055399.png\" alt=\"image-20240519160055399\"></p>\n<p>分支名为你自己的分支名，如果完全按照我的教程来，应该是master，使用默认分支名的话，一般情况是main，可以在GitHub仓库的顶部分支看到。</p>\n<p>token去GitHub-setting-develop setting里申请，具体教程在百度上有很清晰的图文</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519160816009.png\" alt=\"image-20240519160816009\"></p>\n<p>储存路径可以自己新建文件夹但是注意，picgo的储存路径最后一项不是文件夹，是图片头的名字（即会给图片加一个前缀）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519155601082.png\" alt=\"image-20240519155601082\"></p>\n<p>CDN加速用的是<a href=\"https://jsdelivr.codeqihan.com/\">https://jsdelivr.codeqihan.com/</a></p>\n<p>加上gh&#x2F;GitHub用户名&#x2F;仓库名</p>\n<p>是启涵大佬的镜像<a href=\"https://www.codeqihan.com/post/zi-zhi-de-yi-ge-jsdelivr-jing-xiang-fen-xiang/\">自制的一个jsDelivr镜像分享 - 启涵的博客 (codeqihan.com)</a></p>\n<p>配置完成后，在typora偏好设置中配置picgo图床</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519234608363.png\" alt=\"image-20240519234608363\"></p>\n<p>写完博客后直接在格式-图像-上传所有本地图片就ok了</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519234535806.png\" alt=\"image-20240519234535806\"></p>\n<p>如果上传失败，在保证配置正确的情况下，优先考虑是不是开了代理，包括但不限于**steam++**，科学上网等</p>\n<p>图片传完记得去git推送一下更新。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"博客更新\"</span>\n<span class=\"token function\">git</span> pull\n<span class=\"token function\">git</span> push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>本文至此告一段落。</p>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"本文将系统性介绍如何通过hexo博客写文章上传\"><a href=\"#本文将系统性介绍如何通过hexo博客写文章上传\" class=\"headerlink\" title=\"本文将系统性介绍如何通过hexo博客写文章上传\"></a>本文将系统性介绍如何通过hexo博客写文章上传</h2><p>如果阅读本文前未部署个人博客请结合<a href=\"https://blog.aou123.xyz/2024/04/25/Hexo%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/\">Hexo安装过程与问题解决 | Hexo-Aou (aou123.xyz)</a>使用</p>\n<h4 id=\"进入hexo\"><a href=\"#进入hexo\" class=\"headerlink\" title=\"进入hexo\"></a>进入hexo</h4><p>打开<strong>git cmd</strong>，先输入对应的盘符（比如我本地仓库在D盘，需要先输入D:回车，默认C盘不需要操作）</p>\n<p>移动到博客本地仓库，再使用hexo new命令新建一个文章</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> 本地仓库地址\nhexo new <span class=\"token string\">\"你的文章名字\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519152223867.png\" alt=\"image-20240519152223867\"></p>\n<p>之后在\\source\\_posts文件夹下可以看见新建的md文件</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519152735054.png\" alt=\"image-20240519152735054\"></p>\n<h4 id=\"编辑文本\"><a href=\"#编辑文本\" class=\"headerlink\" title=\"编辑文本\"></a>编辑文本</h4><p>使用md编辑器打开文件，我使用的是<strong>Typora</strong>，大家可以使用自己喜欢的编辑器</p>\n<p>文件内自动生成了一个hexo的标题，冒号后面的内容都是可以进行修改的，其中tags需要自己去阅读hexo或者anzhiyu主题的文档进行添加功能。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519153758654.png\" alt=\"image-20240519153758654\"></p>\n<p>其中，有一个小bug，当第一个输入的正文字符为中文时，会自动写到tags：后面，因此我的解决方案是先如图输入一个数字或者西文字符，写完再第一行再把它删除。</p>\n<h4 id=\"配置图床\"><a href=\"#配置图床\" class=\"headerlink\" title=\"配置图床\"></a>配置图床</h4><p><strong>图床</strong>简单来说就是用于存储图片的服务器，由于博客部署在vercel上，无法直接通过相对路径索引的形式加载图片，这时就需要用到图床。</p>\n<p><strong>如果博客部署在个人服务器上</strong>，<strong>那么图床服务可以不按照以下教程进行</strong>（我没有能够作为图床的个人服务器，不清楚服务器环境下hexo能否直接从本地加载图片）</p>\n<p>首先安装<strong>PicGo</strong>，这是一个开源的图床软件，我安装的版本是2.4.0</p>\n<p><a href=\"https://github.com/Molunerfinn/PicGo/releases\">Releases · Molunerfinn&#x2F;PicGo (github.com)</a></p>\n<p>安装完成后，进入图床设置 本文使用<strong>GitHub</strong>作为图床</p>\n<p>仓库名为GitHub主页显示的：</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519160055399.png\" alt=\"image-20240519160055399\"></p>\n<p>分支名为你自己的分支名，如果完全按照我的教程来，应该是master，使用默认分支名的话，一般情况是main，可以在GitHub仓库的顶部分支看到。</p>\n<p>token去GitHub-setting-develop setting里申请，具体教程在百度上有很清晰的图文</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519160816009.png\" alt=\"image-20240519160816009\"></p>\n<p>储存路径可以自己新建文件夹但是注意，picgo的储存路径最后一项不是文件夹，是图片头的名字（即会给图片加一个前缀）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519155601082.png\" alt=\"image-20240519155601082\"></p>\n<p>CDN加速用的是<a href=\"https://jsdelivr.codeqihan.com/\">https://jsdelivr.codeqihan.com/</a></p>\n<p>加上gh&#x2F;GitHub用户名&#x2F;仓库名</p>\n<p>是启涵大佬的镜像<a href=\"https://www.codeqihan.com/post/zi-zhi-de-yi-ge-jsdelivr-jing-xiang-fen-xiang/\">自制的一个jsDelivr镜像分享 - 启涵的博客 (codeqihan.com)</a></p>\n<p>配置完成后，在typora偏好设置中配置picgo图床</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519234608363.png\" alt=\"image-20240519234608363\"></p>\n<p>写完博客后直接在格式-图像-上传所有本地图片就ok了</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240519234535806.png\" alt=\"image-20240519234535806\"></p>\n<p>如果上传失败，在保证配置正确的情况下，优先考虑是不是开了代理，包括但不限于**steam++**，科学上网等</p>\n<p>图片传完记得去git推送一下更新。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"博客更新\"</span>\n<span class=\"token function\">git</span> pull\n<span class=\"token function\">git</span> push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>本文至此告一段落。</p>\n"},{"title":"刷题日记（一）","date":"2024-05-20T16:09:24.000Z","mathjax":true,"top_img":"https://s21.ax1x.com/2024/05/21/pkKTgoQ.png","cover":"https://s21.ax1x.com/2024/05/21/pkKTgoQ.png","_content":"\n## 以后有时间就会刷刷力扣，提升一下自己的算法水平\n\n今天两道简单一道中等\n\n### 第一题\n\n[160. 相交链表](https://leetcode.cn/problems/intersection-of-two-linked-lists/)\n\n给你两个单链表的头节点 `headA` 和 `headB` ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 `null` 。\n\n图示两个链表在节点 `c1` 开始相交**：**\n\n[![img](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/img160_statement.png)](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)\n\n题目数据 **保证** 整个链式结构中不存在环。\n\n**注意**，函数返回结果后，链表必须 **保持其原始结构** 。\n\n**自定义评测：**\n\n**评测系统** 的输入如下（你设计的程序 **不适用** 此输入）：\n\n- `intersectVal` - 相交的起始节点的值。如果不存在相交节点，这一值为 `0`\n- `listA` - 第一个链表\n- `listB` - 第二个链表\n- `skipA` - 在 `listA` 中（从头节点开始）跳到交叉节点的节点数\n- `skipB` - 在 `listB` 中（从头节点开始）跳到交叉节点的节点数\n\n评测系统将根据这些输入创建链式数据结构，并将两个头节点 `headA` 和 `headB` 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 **视作正确答案** 。\n\n\n\n**思路：**对于链表题目，我第一个想到的首先是遍历链表。两个链表遍历起来会有什么不同点呢？\n\n**首先**，两个链表进行遍历，很容易想到的方法是双指针思想\n\n**其次**，通过分析我们可以发现，如果两段链表是等长的，那么在遍历到相交节点的时候，两个指针指向的节点相同。\n\n**最后**，如果两个链表的长度不相等，遍历到表尾后，我们让a链表再从b链表的头节点开始，同时b链表也从a链表的头节点开始，假设a表长m，b表长n，那么最后走的距离就是 `a:m+skipB` `b:n+skipA`,这时候我们发现，ab走了相同的距离，第二次到达了终点c。而c恰好就是相交节点。\n\n理论成立，开始编程\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        tmpA = headA\n        tmpB = headB#头节点指针\n        while tmpA != tmpB:#遍历A，B链表，直到二者相遇\n            tmpA = tmpA.next if tmpA else headB\n            tmpB = tmpB.next if tmpB else headA#谁到了链表尾就去另一个链表的表头\n        return tmpA\n#很浪漫的链表：我们的道路再次相交，因为你我都走过了彼此的道路。        \n```\n\n时间复杂度：$O(n)$\n\n遍历了`m+skipB`长度的链表\n\n空间复杂度:$O(1)$\n\n直接在原链表进行操作\n\n\n\n### 第二题\n\n[226. 翻转二叉树 - 力扣（LeetCode）](https://leetcode.cn/problems/invert-binary-tree/description/)\n\n给你一棵二叉树的根节点 `root` ，翻转这棵二叉树，并返回其根节点。\n\n\n\n**思路**：很讨厌做树相关的题目，因为树相关的题目总会涉及到递归。但是困难总得克服。\n\n**首先**，最开始的想法是，树是百分之九十九要递归处理的，看到这道题，以用例一为例\n\n![img](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imginvert1-tree.jpg)\n\n翻转一颗二叉树，相当于递归翻转其左右子树。\n\n理论成立，开始编程\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root:#设置递归出口\n            return None \n        root.left,root.right = self.invertTree(root.right),self.invertTree(root.left)\n        return root\n```\n\n这是python平行赋值的写法，如果不使用这个机制，应该用一个tmp存储其中一颗子树。\n\n例如\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root:#设置递归出口\n            return None \n        tmp = root.left\n        root.left = self.invertTree(root.right)\n        root.right = self.invertTree(tmp)\n        return root\n```\n\n当然这样在力扣的执行用时会更快，但是复杂度是不变的。\n\n时间复杂度:$O(n)$\n\n递归遍历了所有节点\n\n空间复杂度：$O(n)$\n\n最差情况下（当二叉树退化为链表），递归时系统需使用$O(n)$大小的栈空间。(这里我理解还不到位，摘抄的其他博主的评论。)\n\n虽然我递归写了出来，但是看其他人题解的时候看到大佬这句话：\n\n**调用`invertTree(TreeNode root)`函数就是能实现翻转二叉树的目的，不需要理解函数内部怎么实现的。**\n\n确实我又有些迷茫了，递归的底层怎么实现一直是我纠结的问题，每次都会花大量时间去思考，希望在未来的学习中能够彻底理解前辈的话语。\n\n\n\n### 第三题\n\n[17. 电话号码的字母组合 - 力扣（LeetCode）](https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/)\n\n给定一个仅包含数字 `2-9` 的字符串，返回所有它能表示的字母组合。答案可以按 **任意顺序** 返回。\n\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n![img](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/img200px-telephone-keypad2svg.png)\n\n**思考**：又是一道递归题目，由原问题到子问题，枚举字符，然后再枚举n-1个字符...\n\n**回溯，也叫试探法，它尝试寻找问题的解，如果发现当前的解不能得到有效的结果，就“回溯”到前一步，尝试其他可能的解。**\n\n从[灵茶山艾府](https://space.bilibili.com/206214)老师那学习了回溯的解题思路，又叫**回溯三问**。\n\n首先：寻找当前操作或者每一步的操作（**当前操作**）\n\n枚举$path[i]$要填入的字母\n\n然后：构造子问题（**子问题**)\n\n即字符串$>=i$的部分\n\n最后：构造子问题的子问题（**下一个子问题**）\n\n即字符串$>=i+1$的部分\n\n```python\nMAPPING = \"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"\n\nclass Solution:\n    \n    def letterCombinations(self, digits: str) -> List[str]:\n\n        n = len(digits)\n        if n == 0:\n            return []\n        ans = []\n        path = [\"\" for i in range(n)] \n        def dfs(i):\n            if i == n:\n                ans.append(\"\".join(path))\n                return#递归出口 \n            for x in MAPPING[int(digits[i])]:#从字符串中取对应数字所对应的字符\n                path[i] = x\n                dfs(i+1)  \n        dfs(0)#递归入口\n        return ans\n```\n\n理解了好几遍之后照着思路写出来脑瓜子还是嗡嗡的,时间复杂度，空间复杂度就直接摘抄老师题解的了。\n\n时间复杂度：$O(n4^n)$其中 n 为 $digits$ 的长度。最坏情况下每次需要枚举 4个字母，递归次数为一个满四叉树的节点个数\n\n空间复杂度：$O(n)$\n\n\n\n### 总结：\n\n今天挑战了自己平常最害怕三大问题之二的的**递归**和**回溯**，希望有一天十分钟就能AC一道中等题目吧。\n\n第三座大山**动态规划**，总有一天也要掌握。\n\n","source":"_posts/刷题日记（一）.md","raw":"---\ntitle: 刷题日记（一）\ndate: 2024-05-21 00:09:24\ntags: [Python,数据结构,算法]\ncategories: 力扣刷题\nmathjax: true\ntop_img: https://s21.ax1x.com/2024/05/21/pkKTgoQ.png\ncover: https://s21.ax1x.com/2024/05/21/pkKTgoQ.png\n---\n\n## 以后有时间就会刷刷力扣，提升一下自己的算法水平\n\n今天两道简单一道中等\n\n### 第一题\n\n[160. 相交链表](https://leetcode.cn/problems/intersection-of-two-linked-lists/)\n\n给你两个单链表的头节点 `headA` 和 `headB` ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 `null` 。\n\n图示两个链表在节点 `c1` 开始相交**：**\n\n[![img](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/img160_statement.png)](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)\n\n题目数据 **保证** 整个链式结构中不存在环。\n\n**注意**，函数返回结果后，链表必须 **保持其原始结构** 。\n\n**自定义评测：**\n\n**评测系统** 的输入如下（你设计的程序 **不适用** 此输入）：\n\n- `intersectVal` - 相交的起始节点的值。如果不存在相交节点，这一值为 `0`\n- `listA` - 第一个链表\n- `listB` - 第二个链表\n- `skipA` - 在 `listA` 中（从头节点开始）跳到交叉节点的节点数\n- `skipB` - 在 `listB` 中（从头节点开始）跳到交叉节点的节点数\n\n评测系统将根据这些输入创建链式数据结构，并将两个头节点 `headA` 和 `headB` 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 **视作正确答案** 。\n\n\n\n**思路：**对于链表题目，我第一个想到的首先是遍历链表。两个链表遍历起来会有什么不同点呢？\n\n**首先**，两个链表进行遍历，很容易想到的方法是双指针思想\n\n**其次**，通过分析我们可以发现，如果两段链表是等长的，那么在遍历到相交节点的时候，两个指针指向的节点相同。\n\n**最后**，如果两个链表的长度不相等，遍历到表尾后，我们让a链表再从b链表的头节点开始，同时b链表也从a链表的头节点开始，假设a表长m，b表长n，那么最后走的距离就是 `a:m+skipB` `b:n+skipA`,这时候我们发现，ab走了相同的距离，第二次到达了终点c。而c恰好就是相交节点。\n\n理论成立，开始编程\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        tmpA = headA\n        tmpB = headB#头节点指针\n        while tmpA != tmpB:#遍历A，B链表，直到二者相遇\n            tmpA = tmpA.next if tmpA else headB\n            tmpB = tmpB.next if tmpB else headA#谁到了链表尾就去另一个链表的表头\n        return tmpA\n#很浪漫的链表：我们的道路再次相交，因为你我都走过了彼此的道路。        \n```\n\n时间复杂度：$O(n)$\n\n遍历了`m+skipB`长度的链表\n\n空间复杂度:$O(1)$\n\n直接在原链表进行操作\n\n\n\n### 第二题\n\n[226. 翻转二叉树 - 力扣（LeetCode）](https://leetcode.cn/problems/invert-binary-tree/description/)\n\n给你一棵二叉树的根节点 `root` ，翻转这棵二叉树，并返回其根节点。\n\n\n\n**思路**：很讨厌做树相关的题目，因为树相关的题目总会涉及到递归。但是困难总得克服。\n\n**首先**，最开始的想法是，树是百分之九十九要递归处理的，看到这道题，以用例一为例\n\n![img](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imginvert1-tree.jpg)\n\n翻转一颗二叉树，相当于递归翻转其左右子树。\n\n理论成立，开始编程\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root:#设置递归出口\n            return None \n        root.left,root.right = self.invertTree(root.right),self.invertTree(root.left)\n        return root\n```\n\n这是python平行赋值的写法，如果不使用这个机制，应该用一个tmp存储其中一颗子树。\n\n例如\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root:#设置递归出口\n            return None \n        tmp = root.left\n        root.left = self.invertTree(root.right)\n        root.right = self.invertTree(tmp)\n        return root\n```\n\n当然这样在力扣的执行用时会更快，但是复杂度是不变的。\n\n时间复杂度:$O(n)$\n\n递归遍历了所有节点\n\n空间复杂度：$O(n)$\n\n最差情况下（当二叉树退化为链表），递归时系统需使用$O(n)$大小的栈空间。(这里我理解还不到位，摘抄的其他博主的评论。)\n\n虽然我递归写了出来，但是看其他人题解的时候看到大佬这句话：\n\n**调用`invertTree(TreeNode root)`函数就是能实现翻转二叉树的目的，不需要理解函数内部怎么实现的。**\n\n确实我又有些迷茫了，递归的底层怎么实现一直是我纠结的问题，每次都会花大量时间去思考，希望在未来的学习中能够彻底理解前辈的话语。\n\n\n\n### 第三题\n\n[17. 电话号码的字母组合 - 力扣（LeetCode）](https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/)\n\n给定一个仅包含数字 `2-9` 的字符串，返回所有它能表示的字母组合。答案可以按 **任意顺序** 返回。\n\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n![img](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/img200px-telephone-keypad2svg.png)\n\n**思考**：又是一道递归题目，由原问题到子问题，枚举字符，然后再枚举n-1个字符...\n\n**回溯，也叫试探法，它尝试寻找问题的解，如果发现当前的解不能得到有效的结果，就“回溯”到前一步，尝试其他可能的解。**\n\n从[灵茶山艾府](https://space.bilibili.com/206214)老师那学习了回溯的解题思路，又叫**回溯三问**。\n\n首先：寻找当前操作或者每一步的操作（**当前操作**）\n\n枚举$path[i]$要填入的字母\n\n然后：构造子问题（**子问题**)\n\n即字符串$>=i$的部分\n\n最后：构造子问题的子问题（**下一个子问题**）\n\n即字符串$>=i+1$的部分\n\n```python\nMAPPING = \"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"\n\nclass Solution:\n    \n    def letterCombinations(self, digits: str) -> List[str]:\n\n        n = len(digits)\n        if n == 0:\n            return []\n        ans = []\n        path = [\"\" for i in range(n)] \n        def dfs(i):\n            if i == n:\n                ans.append(\"\".join(path))\n                return#递归出口 \n            for x in MAPPING[int(digits[i])]:#从字符串中取对应数字所对应的字符\n                path[i] = x\n                dfs(i+1)  \n        dfs(0)#递归入口\n        return ans\n```\n\n理解了好几遍之后照着思路写出来脑瓜子还是嗡嗡的,时间复杂度，空间复杂度就直接摘抄老师题解的了。\n\n时间复杂度：$O(n4^n)$其中 n 为 $digits$ 的长度。最坏情况下每次需要枚举 4个字母，递归次数为一个满四叉树的节点个数\n\n空间复杂度：$O(n)$\n\n\n\n### 总结：\n\n今天挑战了自己平常最害怕三大问题之二的的**递归**和**回溯**，希望有一天十分钟就能AC一道中等题目吧。\n\n第三座大山**动态规划**，总有一天也要掌握。\n\n","slug":"刷题日记（一）","published":1,"updated":"2024-05-20T18:55:50.826Z","comments":1,"layout":"post","photos":[],"_id":"clwnrkl3o000aosw52g7sf0bi","content":"<h2 id=\"以后有时间就会刷刷力扣，提升一下自己的算法水平\"><a href=\"#以后有时间就会刷刷力扣，提升一下自己的算法水平\" class=\"headerlink\" title=\"以后有时间就会刷刷力扣，提升一下自己的算法水平\"></a>以后有时间就会刷刷力扣，提升一下自己的算法水平</h2><p>今天两道简单一道中等</p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p><a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists/\">160. 相交链表</a></p>\n<p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p>\n<p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p>\n<p><a href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\"><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/img160_statement.png\" alt=\"img\"></a></p>\n<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p>\n<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>\n<p><strong>自定义评测：</strong></p>\n<p><strong>评测系统</strong> 的输入如下（你设计的程序 <strong>不适用</strong> 此输入）：</p>\n<ul>\n<li><code>intersectVal</code> - 相交的起始节点的值。如果不存在相交节点，这一值为 <code>0</code></li>\n<li><code>listA</code> - 第一个链表</li>\n<li><code>listB</code> - 第二个链表</li>\n<li><code>skipA</code> - 在 <code>listA</code> 中（从头节点开始）跳到交叉节点的节点数</li>\n<li><code>skipB</code> - 在 <code>listB</code> 中（从头节点开始）跳到交叉节点的节点数</li>\n</ul>\n<p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 <code>headA</code> 和 <code>headB</code> 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 <strong>视作正确答案</strong> 。</p>\n<p><strong>思路：</strong>对于链表题目，我第一个想到的首先是遍历链表。两个链表遍历起来会有什么不同点呢？</p>\n<p><strong>首先</strong>，两个链表进行遍历，很容易想到的方法是双指针思想</p>\n<p><strong>其次</strong>，通过分析我们可以发现，如果两段链表是等长的，那么在遍历到相交节点的时候，两个指针指向的节点相同。</p>\n<p><strong>最后</strong>，如果两个链表的长度不相等，遍历到表尾后，我们让a链表再从b链表的头节点开始，同时b链表也从a链表的头节点开始，假设a表长m，b表长n，那么最后走的距离就是 <code>a:m+skipB</code> <code>b:n+skipA</code>,这时候我们发现，ab走了相同的距离，第二次到达了终点c。而c恰好就是相交节点。</p>\n<p>理论成立，开始编程</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, x):</span>\n<span class=\"token comment\">#         self.val = x</span>\n<span class=\"token comment\">#         self.next = None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> headA<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">,</span> headB<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        tmpA <span class=\"token operator\">=</span> headA\n        tmpB <span class=\"token operator\">=</span> headB<span class=\"token comment\">#头节点指针</span>\n        <span class=\"token keyword\">while</span> tmpA <span class=\"token operator\">!=</span> tmpB<span class=\"token punctuation\">:</span><span class=\"token comment\">#遍历A，B链表，直到二者相遇</span>\n            tmpA <span class=\"token operator\">=</span> tmpA<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">if</span> tmpA <span class=\"token keyword\">else</span> headB\n            tmpB <span class=\"token operator\">=</span> tmpB<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">if</span> tmpB <span class=\"token keyword\">else</span> headA<span class=\"token comment\">#谁到了链表尾就去另一个链表的表头</span>\n        <span class=\"token keyword\">return</span> tmpA\n<span class=\"token comment\">#很浪漫的链表：我们的道路再次相交，因为你我都走过了彼此的道路。        </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：$O(n)$</p>\n<p>遍历了<code>m+skipB</code>长度的链表</p>\n<p>空间复杂度:$O(1)$</p>\n<p>直接在原链表进行操作</p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p><a href=\"https://leetcode.cn/problems/invert-binary-tree/description/\">226. 翻转二叉树 - 力扣（LeetCode）</a></p>\n<p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p>\n<p><strong>思路</strong>：很讨厌做树相关的题目，因为树相关的题目总会涉及到递归。但是困难总得克服。</p>\n<p><strong>首先</strong>，最开始的想法是，树是百分之九十九要递归处理的，看到这道题，以用例一为例</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imginvert1-tree.jpg\" alt=\"img\"></p>\n<p>翻转一颗二叉树，相当于递归翻转其左右子树。</p>\n<p>理论成立，开始编程</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span><span class=\"token comment\">#设置递归出口</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span> \n        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>invertTree<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>invertTree<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这是python平行赋值的写法，如果不使用这个机制，应该用一个tmp存储其中一颗子树。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span><span class=\"token comment\">#设置递归出口</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span> \n        tmp <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>invertTree<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>invertTree<span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当然这样在力扣的执行用时会更快，但是复杂度是不变的。</p>\n<p>时间复杂度:$O(n)$</p>\n<p>递归遍历了所有节点</p>\n<p>空间复杂度：$O(n)$</p>\n<p>最差情况下（当二叉树退化为链表），递归时系统需使用$O(n)$大小的栈空间。(这里我理解还不到位，摘抄的其他博主的评论。)</p>\n<p>虽然我递归写了出来，但是看其他人题解的时候看到大佬这句话：</p>\n<p><strong>调用<code>invertTree(TreeNode root)</code>函数就是能实现翻转二叉树的目的，不需要理解函数内部怎么实现的。</strong></p>\n<p>确实我又有些迷茫了，递归的底层怎么实现一直是我纠结的问题，每次都会花大量时间去思考，希望在未来的学习中能够彻底理解前辈的话语。</p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p><a href=\"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/\">17. 电话号码的字母组合 - 力扣（LeetCode）</a></p>\n<p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/img200px-telephone-keypad2svg.png\" alt=\"img\"></p>\n<p><strong>思考</strong>：又是一道递归题目，由原问题到子问题，枚举字符，然后再枚举n-1个字符…</p>\n<p><strong>回溯，也叫试探法，它尝试寻找问题的解，如果发现当前的解不能得到有效的结果，就“回溯”到前一步，尝试其他可能的解。</strong></p>\n<p>从<a href=\"https://space.bilibili.com/206214\">灵茶山艾府</a>老师那学习了回溯的解题思路，又叫<strong>回溯三问</strong>。</p>\n<p>首先：寻找当前操作或者每一步的操作（<strong>当前操作</strong>）</p>\n<p>枚举$path[i]$要填入的字母</p>\n<p>然后：构造子问题（<strong>子问题</strong>)</p>\n<p>即字符串$&gt;&#x3D;i$的部分</p>\n<p>最后：构造子问题的子问题（<strong>下一个子问题</strong>）</p>\n<p>即字符串$&gt;&#x3D;i+1$的部分</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">MAPPING <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wxyz\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">letterCombinations</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> \n        <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> n<span class=\"token punctuation\">:</span>\n                ans<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token comment\">#递归出口 </span>\n            <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> MAPPING<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#从字符串中取对应数字所对应的字符</span>\n                path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n                dfs<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n        dfs<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#递归入口</span>\n        <span class=\"token keyword\">return</span> ans<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>理解了好几遍之后照着思路写出来脑瓜子还是嗡嗡的,时间复杂度，空间复杂度就直接摘抄老师题解的了。</p>\n<p>时间复杂度：$O(n4^n)$其中 n 为 $digits$ 的长度。最坏情况下每次需要枚举 4个字母，递归次数为一个满四叉树的节点个数</p>\n<p>空间复杂度：$O(n)$</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>今天挑战了自己平常最害怕三大问题之二的的<strong>递归</strong>和<strong>回溯</strong>，希望有一天十分钟就能AC一道中等题目吧。</p>\n<p>第三座大山<strong>动态规划</strong>，总有一天也要掌握。</p>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"以后有时间就会刷刷力扣，提升一下自己的算法水平\"><a href=\"#以后有时间就会刷刷力扣，提升一下自己的算法水平\" class=\"headerlink\" title=\"以后有时间就会刷刷力扣，提升一下自己的算法水平\"></a>以后有时间就会刷刷力扣，提升一下自己的算法水平</h2><p>今天两道简单一道中等</p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p><a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists/\">160. 相交链表</a></p>\n<p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p>\n<p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p>\n<p><a href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\"><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/img160_statement.png\" alt=\"img\"></a></p>\n<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p>\n<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>\n<p><strong>自定义评测：</strong></p>\n<p><strong>评测系统</strong> 的输入如下（你设计的程序 <strong>不适用</strong> 此输入）：</p>\n<ul>\n<li><code>intersectVal</code> - 相交的起始节点的值。如果不存在相交节点，这一值为 <code>0</code></li>\n<li><code>listA</code> - 第一个链表</li>\n<li><code>listB</code> - 第二个链表</li>\n<li><code>skipA</code> - 在 <code>listA</code> 中（从头节点开始）跳到交叉节点的节点数</li>\n<li><code>skipB</code> - 在 <code>listB</code> 中（从头节点开始）跳到交叉节点的节点数</li>\n</ul>\n<p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 <code>headA</code> 和 <code>headB</code> 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 <strong>视作正确答案</strong> 。</p>\n<p><strong>思路：</strong>对于链表题目，我第一个想到的首先是遍历链表。两个链表遍历起来会有什么不同点呢？</p>\n<p><strong>首先</strong>，两个链表进行遍历，很容易想到的方法是双指针思想</p>\n<p><strong>其次</strong>，通过分析我们可以发现，如果两段链表是等长的，那么在遍历到相交节点的时候，两个指针指向的节点相同。</p>\n<p><strong>最后</strong>，如果两个链表的长度不相等，遍历到表尾后，我们让a链表再从b链表的头节点开始，同时b链表也从a链表的头节点开始，假设a表长m，b表长n，那么最后走的距离就是 <code>a:m+skipB</code> <code>b:n+skipA</code>,这时候我们发现，ab走了相同的距离，第二次到达了终点c。而c恰好就是相交节点。</p>\n<p>理论成立，开始编程</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, x):</span>\n<span class=\"token comment\">#         self.val = x</span>\n<span class=\"token comment\">#         self.next = None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> headA<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">,</span> headB<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        tmpA <span class=\"token operator\">=</span> headA\n        tmpB <span class=\"token operator\">=</span> headB<span class=\"token comment\">#头节点指针</span>\n        <span class=\"token keyword\">while</span> tmpA <span class=\"token operator\">!=</span> tmpB<span class=\"token punctuation\">:</span><span class=\"token comment\">#遍历A，B链表，直到二者相遇</span>\n            tmpA <span class=\"token operator\">=</span> tmpA<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">if</span> tmpA <span class=\"token keyword\">else</span> headB\n            tmpB <span class=\"token operator\">=</span> tmpB<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">if</span> tmpB <span class=\"token keyword\">else</span> headA<span class=\"token comment\">#谁到了链表尾就去另一个链表的表头</span>\n        <span class=\"token keyword\">return</span> tmpA\n<span class=\"token comment\">#很浪漫的链表：我们的道路再次相交，因为你我都走过了彼此的道路。        </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：$O(n)$</p>\n<p>遍历了<code>m+skipB</code>长度的链表</p>\n<p>空间复杂度:$O(1)$</p>\n<p>直接在原链表进行操作</p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p><a href=\"https://leetcode.cn/problems/invert-binary-tree/description/\">226. 翻转二叉树 - 力扣（LeetCode）</a></p>\n<p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p>\n<p><strong>思路</strong>：很讨厌做树相关的题目，因为树相关的题目总会涉及到递归。但是困难总得克服。</p>\n<p><strong>首先</strong>，最开始的想法是，树是百分之九十九要递归处理的，看到这道题，以用例一为例</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imginvert1-tree.jpg\" alt=\"img\"></p>\n<p>翻转一颗二叉树，相当于递归翻转其左右子树。</p>\n<p>理论成立，开始编程</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span><span class=\"token comment\">#设置递归出口</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span> \n        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>invertTree<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>invertTree<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这是python平行赋值的写法，如果不使用这个机制，应该用一个tmp存储其中一颗子树。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span><span class=\"token comment\">#设置递归出口</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span> \n        tmp <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>invertTree<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>invertTree<span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当然这样在力扣的执行用时会更快，但是复杂度是不变的。</p>\n<p>时间复杂度:$O(n)$</p>\n<p>递归遍历了所有节点</p>\n<p>空间复杂度：$O(n)$</p>\n<p>最差情况下（当二叉树退化为链表），递归时系统需使用$O(n)$大小的栈空间。(这里我理解还不到位，摘抄的其他博主的评论。)</p>\n<p>虽然我递归写了出来，但是看其他人题解的时候看到大佬这句话：</p>\n<p><strong>调用<code>invertTree(TreeNode root)</code>函数就是能实现翻转二叉树的目的，不需要理解函数内部怎么实现的。</strong></p>\n<p>确实我又有些迷茫了，递归的底层怎么实现一直是我纠结的问题，每次都会花大量时间去思考，希望在未来的学习中能够彻底理解前辈的话语。</p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p><a href=\"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/\">17. 电话号码的字母组合 - 力扣（LeetCode）</a></p>\n<p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/img200px-telephone-keypad2svg.png\" alt=\"img\"></p>\n<p><strong>思考</strong>：又是一道递归题目，由原问题到子问题，枚举字符，然后再枚举n-1个字符…</p>\n<p><strong>回溯，也叫试探法，它尝试寻找问题的解，如果发现当前的解不能得到有效的结果，就“回溯”到前一步，尝试其他可能的解。</strong></p>\n<p>从<a href=\"https://space.bilibili.com/206214\">灵茶山艾府</a>老师那学习了回溯的解题思路，又叫<strong>回溯三问</strong>。</p>\n<p>首先：寻找当前操作或者每一步的操作（<strong>当前操作</strong>）</p>\n<p>枚举$path[i]$要填入的字母</p>\n<p>然后：构造子问题（<strong>子问题</strong>)</p>\n<p>即字符串$&gt;&#x3D;i$的部分</p>\n<p>最后：构造子问题的子问题（<strong>下一个子问题</strong>）</p>\n<p>即字符串$&gt;&#x3D;i+1$的部分</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">MAPPING <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wxyz\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">letterCombinations</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> \n        <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> n<span class=\"token punctuation\">:</span>\n                ans<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token comment\">#递归出口 </span>\n            <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> MAPPING<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#从字符串中取对应数字所对应的字符</span>\n                path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n                dfs<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n        dfs<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#递归入口</span>\n        <span class=\"token keyword\">return</span> ans<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>理解了好几遍之后照着思路写出来脑瓜子还是嗡嗡的,时间复杂度，空间复杂度就直接摘抄老师题解的了。</p>\n<p>时间复杂度：$O(n4^n)$其中 n 为 $digits$ 的长度。最坏情况下每次需要枚举 4个字母，递归次数为一个满四叉树的节点个数</p>\n<p>空间复杂度：$O(n)$</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>今天挑战了自己平常最害怕三大问题之二的的<strong>递归</strong>和<strong>回溯</strong>，希望有一天十分钟就能AC一道中等题目吧。</p>\n<p>第三座大山<strong>动态规划</strong>，总有一天也要掌握。</p>\n"},{"title":"刷题日记（三）","date":"2024-05-22T16:54:50.000Z","mathjax":true,"top_img":"https://s21.ax1x.com/2024/05/21/pkKTgoQ.png","cover":"https://s21.ax1x.com/2024/05/21/pkKTgoQ.png","_content":"\n## Day3.先解决每日一题吧 \n\n本期**无图**\n\n### 第一题\n\n[2225. 找出输掉零场或一场比赛的玩家 - 力扣（LeetCode）](https://leetcode.cn/problems/find-players-with-zero-or-one-losses/description/)\n\n给你一个整数数组 `matches` 其中 `matches[i] = [winneri, loseri]` 表示在一场比赛中 `winneri` 击败了 `loseri` 。\n\n返回一个长度为 2 的列表 `answer` ：\n\n- `answer[0]` 是所有 **没有** 输掉任何比赛的玩家列表。\n- `answer[1]` 是所有恰好输掉 **一场** 比赛的玩家列表。\n\n两个列表中的值都应该按 **递增** 顺序返回。\n\n**注意：**\n\n- 只考虑那些参与 **至少一场** 比赛的玩家。\n\n- 生成的测试用例保证 **不存在** 两场比赛结果 **相同** 。\n\n  \n\n**思路**：首先想到的是用哈希表来处理，在python中，哈希表可以用列表，集合，字典来表示。\n\n本题我考虑使用集合存储**所有**参加比赛的玩家，以下简称**大名单**\n\n再存储所有的**失败者名单**\n\n如果出现在**大名单**内的玩家没有出现在失败者名单内，则这名玩家**没有**输掉任何一场比赛。\n\n同时，统计失败者名单中失败次数为1的玩家，进行记录。\n\n\n\n理论成立，开始编程\n\n```python\nclass Solution:\n    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:\n        hash_p = set(x for i in matches for x in i)#存储大名单\n        #此时集合元素类似{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        ans = [[],[]]\n        loser_count = Counter(loser for _,loser in matches)#查找第二个元素\n        #Counter类作用如下\n     '''\n\t\tCounter({3: 2, 6: 2, 9: 2, 7: 1, 5: 1, 8: 1, 4: 1})\n\t '''\n        for x in hash_p:\n            if not x in loser_count:#全胜的玩家\n                ans[0].append(x)\n            if loser_count[x] == 1:#输一次的玩家\n                ans[1].append(x)\n        ans[0].sort()\n        ans[1].sort()    \n        return ans         \n```\n\n时间复杂度：$O(nlogn)$\n\n主要是排序，实际上主程序遍历哈希表是$O(n)$\n\n空间复杂度：$O(n)$\n\n创建哈希表\n\n\n\n### 第二题\n\n[114. 二叉树展开为链表 - 力扣（LeetCode）](https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/description/)\n\n给你二叉树的根结点 `root` ，请你将它展开为一个单链表：\n\n- 展开后的单链表应该同样使用 `TreeNode` ，其中 `right` 子指针指向链表中下一个结点，而左子指针始终为 `null` 。\n- 展开后的单链表应该与二叉树 [**先序遍历**](https://baike.baidu.com/item/先序遍历/6442839?fr=aladdin) 顺序相同。\n\n\n\n**思路**:都说到这份上了，说白了就是考树的先序遍历+链表遍历\n\n**树的先序遍历**：访问根节点，先序遍历左子树，先序遍历右子树。\n\n**链表的遍历**：$list = list.next$\n\n不过此处应该是左子树指空，右子树指向下一节点。\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    \n    def pre_order(self,root):\n        if root:\n            self.pre_list.append(root)\n            self.pre_order(root.left)\n            self.pre_order(root.right) #这是一个先序遍历的方法           \n    def flatten(self, root: Optional[TreeNode]) -> None:\n        self.pre_list = []#注意这个变量里存储的是节点而不是单纯的val\n        self.pre_order(root)\n        n = len(self.pre_list)\n        \n        for i in range(1,n):\n            pre,curr = self.pre_list[i-1],self.pre_list[i]\n            pre.left = None\n            pre.right = curr#完成链表的构建\n         '''\n         为了方便理解，写成以下形式也是正确的\n         for i in range(0,n-1):\n            curr,next = self.pre_list[i],self.pre_list[i+1]\n            curr.left = None\n            curr.right = next\n\n         '''        \n\n```\n\n时间复杂度：$O(n)$\n\n对整棵树进行了先序遍历，并且循环构建了一个新的链表树。\n\n空间复杂度：$O(n)$\n\n取决于递归调用时，栈的大小，和辅助列表的长度，最大为二叉树的节点数n。\n\n\n\n### 第三题\n\n[617. 合并二叉树 - 力扣（LeetCode）](https://leetcode.cn/problems/merge-two-binary-trees/description/)\n\n给你两棵二叉树： `root1` 和 `root2` 。\n\n想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，**不为** null 的节点将直接作为新二叉树的节点。\n\n返回合并后的二叉树。\n\n**注意:** 合并过程必须从两个树的根节点开始。\n\n\n\n**思路**：看见二叉树一般会去想递归\n\n当发现其中一棵树的空节点时，直接使用另一棵树的对应位置节点作为新树的节点，直到没有需要合并的节点。\n\n合并两棵树，子问题是合并两棵树的左右子树\n\n正常写出来就好了\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\n        if  root1==None:\n            return root2\n        if  root2==None:\n            return root1\n        newroot = TreeNode(root1.val+root2.val,self.mergeTrees(root1.left,root2.left),self.mergeTrees(root1.right,root2.right))\n        return newroot\n```\n\n时间复杂度$O(n)$\n\n取决于较小的那颗二叉树的节点数，因为只有两棵树都存在的节点才会进行合并操作\n\n空间复杂度$O(n)$\n\n同上。\n\n\n\n### 总结：\n\n今天是2中等1简单，至此hot100所有的简单题我成功ac了一遍，也算是从**不入流**步入了**初学者**的大门，虽然努力不一定会有回报，但是至少我努力过了，不是吗。\n\n接下来的题目大致浏览了一些，大多数都是回溯，动态规划，dfs，bfs，二分查找，贪心等算法思想，随便拿出来一道都是我得看半个小时题解才能理解的水准，也许我刷题的频率会放缓一些，多去补充一点理论基础和解题思路。\n\n我深知以后的路还很长，虽然我已不会再给自己立什么志向，但我已经无法回头了。\n\n","source":"_posts/刷题日记（三）.md","raw":"---\ntitle: 刷题日记（三）\ndate: 2024-05-23 00:54:50\ntags: [Python,数据结构,算法]\ncategories: 力扣刷题\nmathjax: true\ntop_img: https://s21.ax1x.com/2024/05/21/pkKTgoQ.png\ncover: https://s21.ax1x.com/2024/05/21/pkKTgoQ.png\n---\n\n## Day3.先解决每日一题吧 \n\n本期**无图**\n\n### 第一题\n\n[2225. 找出输掉零场或一场比赛的玩家 - 力扣（LeetCode）](https://leetcode.cn/problems/find-players-with-zero-or-one-losses/description/)\n\n给你一个整数数组 `matches` 其中 `matches[i] = [winneri, loseri]` 表示在一场比赛中 `winneri` 击败了 `loseri` 。\n\n返回一个长度为 2 的列表 `answer` ：\n\n- `answer[0]` 是所有 **没有** 输掉任何比赛的玩家列表。\n- `answer[1]` 是所有恰好输掉 **一场** 比赛的玩家列表。\n\n两个列表中的值都应该按 **递增** 顺序返回。\n\n**注意：**\n\n- 只考虑那些参与 **至少一场** 比赛的玩家。\n\n- 生成的测试用例保证 **不存在** 两场比赛结果 **相同** 。\n\n  \n\n**思路**：首先想到的是用哈希表来处理，在python中，哈希表可以用列表，集合，字典来表示。\n\n本题我考虑使用集合存储**所有**参加比赛的玩家，以下简称**大名单**\n\n再存储所有的**失败者名单**\n\n如果出现在**大名单**内的玩家没有出现在失败者名单内，则这名玩家**没有**输掉任何一场比赛。\n\n同时，统计失败者名单中失败次数为1的玩家，进行记录。\n\n\n\n理论成立，开始编程\n\n```python\nclass Solution:\n    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:\n        hash_p = set(x for i in matches for x in i)#存储大名单\n        #此时集合元素类似{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        ans = [[],[]]\n        loser_count = Counter(loser for _,loser in matches)#查找第二个元素\n        #Counter类作用如下\n     '''\n\t\tCounter({3: 2, 6: 2, 9: 2, 7: 1, 5: 1, 8: 1, 4: 1})\n\t '''\n        for x in hash_p:\n            if not x in loser_count:#全胜的玩家\n                ans[0].append(x)\n            if loser_count[x] == 1:#输一次的玩家\n                ans[1].append(x)\n        ans[0].sort()\n        ans[1].sort()    \n        return ans         \n```\n\n时间复杂度：$O(nlogn)$\n\n主要是排序，实际上主程序遍历哈希表是$O(n)$\n\n空间复杂度：$O(n)$\n\n创建哈希表\n\n\n\n### 第二题\n\n[114. 二叉树展开为链表 - 力扣（LeetCode）](https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/description/)\n\n给你二叉树的根结点 `root` ，请你将它展开为一个单链表：\n\n- 展开后的单链表应该同样使用 `TreeNode` ，其中 `right` 子指针指向链表中下一个结点，而左子指针始终为 `null` 。\n- 展开后的单链表应该与二叉树 [**先序遍历**](https://baike.baidu.com/item/先序遍历/6442839?fr=aladdin) 顺序相同。\n\n\n\n**思路**:都说到这份上了，说白了就是考树的先序遍历+链表遍历\n\n**树的先序遍历**：访问根节点，先序遍历左子树，先序遍历右子树。\n\n**链表的遍历**：$list = list.next$\n\n不过此处应该是左子树指空，右子树指向下一节点。\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    \n    def pre_order(self,root):\n        if root:\n            self.pre_list.append(root)\n            self.pre_order(root.left)\n            self.pre_order(root.right) #这是一个先序遍历的方法           \n    def flatten(self, root: Optional[TreeNode]) -> None:\n        self.pre_list = []#注意这个变量里存储的是节点而不是单纯的val\n        self.pre_order(root)\n        n = len(self.pre_list)\n        \n        for i in range(1,n):\n            pre,curr = self.pre_list[i-1],self.pre_list[i]\n            pre.left = None\n            pre.right = curr#完成链表的构建\n         '''\n         为了方便理解，写成以下形式也是正确的\n         for i in range(0,n-1):\n            curr,next = self.pre_list[i],self.pre_list[i+1]\n            curr.left = None\n            curr.right = next\n\n         '''        \n\n```\n\n时间复杂度：$O(n)$\n\n对整棵树进行了先序遍历，并且循环构建了一个新的链表树。\n\n空间复杂度：$O(n)$\n\n取决于递归调用时，栈的大小，和辅助列表的长度，最大为二叉树的节点数n。\n\n\n\n### 第三题\n\n[617. 合并二叉树 - 力扣（LeetCode）](https://leetcode.cn/problems/merge-two-binary-trees/description/)\n\n给你两棵二叉树： `root1` 和 `root2` 。\n\n想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，**不为** null 的节点将直接作为新二叉树的节点。\n\n返回合并后的二叉树。\n\n**注意:** 合并过程必须从两个树的根节点开始。\n\n\n\n**思路**：看见二叉树一般会去想递归\n\n当发现其中一棵树的空节点时，直接使用另一棵树的对应位置节点作为新树的节点，直到没有需要合并的节点。\n\n合并两棵树，子问题是合并两棵树的左右子树\n\n正常写出来就好了\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\n        if  root1==None:\n            return root2\n        if  root2==None:\n            return root1\n        newroot = TreeNode(root1.val+root2.val,self.mergeTrees(root1.left,root2.left),self.mergeTrees(root1.right,root2.right))\n        return newroot\n```\n\n时间复杂度$O(n)$\n\n取决于较小的那颗二叉树的节点数，因为只有两棵树都存在的节点才会进行合并操作\n\n空间复杂度$O(n)$\n\n同上。\n\n\n\n### 总结：\n\n今天是2中等1简单，至此hot100所有的简单题我成功ac了一遍，也算是从**不入流**步入了**初学者**的大门，虽然努力不一定会有回报，但是至少我努力过了，不是吗。\n\n接下来的题目大致浏览了一些，大多数都是回溯，动态规划，dfs，bfs，二分查找，贪心等算法思想，随便拿出来一道都是我得看半个小时题解才能理解的水准，也许我刷题的频率会放缓一些，多去补充一点理论基础和解题思路。\n\n我深知以后的路还很长，虽然我已不会再给自己立什么志向，但我已经无法回头了。\n\n","slug":"刷题日记（三）","published":1,"updated":"2024-05-22T18:32:50.593Z","comments":1,"layout":"post","photos":[],"_id":"clwnrkl3r000eosw5hilld2ev","content":"<h2 id=\"Day3-先解决每日一题吧\"><a href=\"#Day3-先解决每日一题吧\" class=\"headerlink\" title=\"Day3.先解决每日一题吧\"></a>Day3.先解决每日一题吧</h2><p>本期<strong>无图</strong></p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p><a href=\"https://leetcode.cn/problems/find-players-with-zero-or-one-losses/description/\">2225. 找出输掉零场或一场比赛的玩家 - 力扣（LeetCode）</a></p>\n<p>给你一个整数数组 <code>matches</code> 其中 <code>matches[i] = [winneri, loseri]</code> 表示在一场比赛中 <code>winneri</code> 击败了 <code>loseri</code> 。</p>\n<p>返回一个长度为 2 的列表 <code>answer</code> ：</p>\n<ul>\n<li><code>answer[0]</code> 是所有 <strong>没有</strong> 输掉任何比赛的玩家列表。</li>\n<li><code>answer[1]</code> 是所有恰好输掉 <strong>一场</strong> 比赛的玩家列表。</li>\n</ul>\n<p>两个列表中的值都应该按 <strong>递增</strong> 顺序返回。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li><p>只考虑那些参与 <strong>至少一场</strong> 比赛的玩家。</p>\n</li>\n<li><p>生成的测试用例保证 <strong>不存在</strong> 两场比赛结果 <strong>相同</strong> 。</p>\n</li>\n</ul>\n<p><strong>思路</strong>：首先想到的是用哈希表来处理，在python中，哈希表可以用列表，集合，字典来表示。</p>\n<p>本题我考虑使用集合存储<strong>所有</strong>参加比赛的玩家，以下简称<strong>大名单</strong></p>\n<p>再存储所有的<strong>失败者名单</strong></p>\n<p>如果出现在<strong>大名单</strong>内的玩家没有出现在失败者名单内，则这名玩家<strong>没有</strong>输掉任何一场比赛。</p>\n<p>同时，统计失败者名单中失败次数为1的玩家，进行记录。</p>\n<p>理论成立，开始编程</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findWinners</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> matches<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        hash_p <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> matches <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">)</span><span class=\"token comment\">#存储大名单</span>\n        <span class=\"token comment\">#此时集合元素类似&#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        loser_count <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>loser <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span>loser <span class=\"token keyword\">in</span> matches<span class=\"token punctuation\">)</span><span class=\"token comment\">#查找第二个元素</span>\n        <span class=\"token comment\">#Counter类作用如下</span>\n     <span class=\"token triple-quoted-string string\">'''\n\t\tCounter(&#123;3: 2, 6: 2, 9: 2, 7: 1, 5: 1, 8: 1, 4: 1&#125;)\n\t '''</span>\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> hash_p<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> x <span class=\"token keyword\">in</span> loser_count<span class=\"token punctuation\">:</span><span class=\"token comment\">#全胜的玩家</span>\n                ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> loser_count<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#输一次的玩家</span>\n                ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n        <span class=\"token keyword\">return</span> ans         <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：$O(nlogn)$</p>\n<p>主要是排序，实际上主程序遍历哈希表是$O(n)$</p>\n<p>空间复杂度：$O(n)$</p>\n<p>创建哈希表</p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p><a href=\"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/description/\">114. 二叉树展开为链表 - 力扣（LeetCode）</a></p>\n<p>给你二叉树的根结点 <code>root</code> ，请你将它展开为一个单链表：</p>\n<ul>\n<li>展开后的单链表应该同样使用 <code>TreeNode</code> ，其中 <code>right</code> 子指针指向链表中下一个结点，而左子指针始终为 <code>null</code> 。</li>\n<li>展开后的单链表应该与二叉树 <a href=\"https://baike.baidu.com/item/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/6442839?fr=aladdin\"><strong>先序遍历</strong></a> 顺序相同。</li>\n</ul>\n<p><strong>思路</strong>:都说到这份上了，说白了就是考树的先序遍历+链表遍历</p>\n<p><strong>树的先序遍历</strong>：访问根节点，先序遍历左子树，先序遍历右子树。</p>\n<p><strong>链表的遍历</strong>：$list &#x3D; list.next$</p>\n<p>不过此处应该是左子树指空，右子树指向下一节点。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> root<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>pre_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>pre_order<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>pre_order<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token comment\">#这是一个先序遍历的方法           </span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>pre_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#注意这个变量里存储的是节点而不是单纯的val</span>\n        self<span class=\"token punctuation\">.</span>pre_order<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pre_list<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            pre<span class=\"token punctuation\">,</span>curr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pre_list<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>pre_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            pre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> curr<span class=\"token comment\">#完成链表的构建</span>\n         <span class=\"token triple-quoted-string string\">'''\n         为了方便理解，写成以下形式也是正确的\n         for i in range(0,n-1):\n            curr,next = self.pre_list[i],self.pre_list[i+1]\n            curr.left = None\n            curr.right = next\n\n         '''</span>        \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：$O(n)$</p>\n<p>对整棵树进行了先序遍历，并且循环构建了一个新的链表树。</p>\n<p>空间复杂度：$O(n)$</p>\n<p>取决于递归调用时，栈的大小，和辅助列表的长度，最大为二叉树的节点数n。</p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p><a href=\"https://leetcode.cn/problems/merge-two-binary-trees/description/\">617. 合并二叉树 - 力扣（LeetCode）</a></p>\n<p>给你两棵二叉树： <code>root1</code> 和 <code>root2</code> 。</p>\n<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong> null 的节点将直接作为新二叉树的节点。</p>\n<p>返回合并后的二叉树。</p>\n<p><strong>注意:</strong> 合并过程必须从两个树的根节点开始。</p>\n<p><strong>思路</strong>：看见二叉树一般会去想递归</p>\n<p>当发现其中一棵树的空节点时，直接使用另一棵树的对应位置节点作为新树的节点，直到没有需要合并的节点。</p>\n<p>合并两棵树，子问题是合并两棵树的左右子树</p>\n<p>正常写出来就好了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root1<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> root2<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span>  root1<span class=\"token operator\">==</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> root2\n        <span class=\"token keyword\">if</span>  root2<span class=\"token operator\">==</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> root1\n        newroot <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>val<span class=\"token operator\">+</span>root2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>mergeTrees<span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>mergeTrees<span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> newroot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度$O(n)$</p>\n<p>取决于较小的那颗二叉树的节点数，因为只有两棵树都存在的节点才会进行合并操作</p>\n<p>空间复杂度$O(n)$</p>\n<p>同上。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>今天是2中等1简单，至此hot100所有的简单题我成功ac了一遍，也算是从<strong>不入流</strong>步入了<strong>初学者</strong>的大门，虽然努力不一定会有回报，但是至少我努力过了，不是吗。</p>\n<p>接下来的题目大致浏览了一些，大多数都是回溯，动态规划，dfs，bfs，二分查找，贪心等算法思想，随便拿出来一道都是我得看半个小时题解才能理解的水准，也许我刷题的频率会放缓一些，多去补充一点理论基础和解题思路。</p>\n<p>我深知以后的路还很长，虽然我已不会再给自己立什么志向，但我已经无法回头了。</p>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"Day3-先解决每日一题吧\"><a href=\"#Day3-先解决每日一题吧\" class=\"headerlink\" title=\"Day3.先解决每日一题吧\"></a>Day3.先解决每日一题吧</h2><p>本期<strong>无图</strong></p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p><a href=\"https://leetcode.cn/problems/find-players-with-zero-or-one-losses/description/\">2225. 找出输掉零场或一场比赛的玩家 - 力扣（LeetCode）</a></p>\n<p>给你一个整数数组 <code>matches</code> 其中 <code>matches[i] = [winneri, loseri]</code> 表示在一场比赛中 <code>winneri</code> 击败了 <code>loseri</code> 。</p>\n<p>返回一个长度为 2 的列表 <code>answer</code> ：</p>\n<ul>\n<li><code>answer[0]</code> 是所有 <strong>没有</strong> 输掉任何比赛的玩家列表。</li>\n<li><code>answer[1]</code> 是所有恰好输掉 <strong>一场</strong> 比赛的玩家列表。</li>\n</ul>\n<p>两个列表中的值都应该按 <strong>递增</strong> 顺序返回。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li><p>只考虑那些参与 <strong>至少一场</strong> 比赛的玩家。</p>\n</li>\n<li><p>生成的测试用例保证 <strong>不存在</strong> 两场比赛结果 <strong>相同</strong> 。</p>\n</li>\n</ul>\n<p><strong>思路</strong>：首先想到的是用哈希表来处理，在python中，哈希表可以用列表，集合，字典来表示。</p>\n<p>本题我考虑使用集合存储<strong>所有</strong>参加比赛的玩家，以下简称<strong>大名单</strong></p>\n<p>再存储所有的<strong>失败者名单</strong></p>\n<p>如果出现在<strong>大名单</strong>内的玩家没有出现在失败者名单内，则这名玩家<strong>没有</strong>输掉任何一场比赛。</p>\n<p>同时，统计失败者名单中失败次数为1的玩家，进行记录。</p>\n<p>理论成立，开始编程</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findWinners</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> matches<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        hash_p <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> matches <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">)</span><span class=\"token comment\">#存储大名单</span>\n        <span class=\"token comment\">#此时集合元素类似&#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        loser_count <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>loser <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span>loser <span class=\"token keyword\">in</span> matches<span class=\"token punctuation\">)</span><span class=\"token comment\">#查找第二个元素</span>\n        <span class=\"token comment\">#Counter类作用如下</span>\n     <span class=\"token triple-quoted-string string\">'''\n\t\tCounter(&#123;3: 2, 6: 2, 9: 2, 7: 1, 5: 1, 8: 1, 4: 1&#125;)\n\t '''</span>\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> hash_p<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> x <span class=\"token keyword\">in</span> loser_count<span class=\"token punctuation\">:</span><span class=\"token comment\">#全胜的玩家</span>\n                ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> loser_count<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#输一次的玩家</span>\n                ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n        <span class=\"token keyword\">return</span> ans         <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：$O(nlogn)$</p>\n<p>主要是排序，实际上主程序遍历哈希表是$O(n)$</p>\n<p>空间复杂度：$O(n)$</p>\n<p>创建哈希表</p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p><a href=\"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/description/\">114. 二叉树展开为链表 - 力扣（LeetCode）</a></p>\n<p>给你二叉树的根结点 <code>root</code> ，请你将它展开为一个单链表：</p>\n<ul>\n<li>展开后的单链表应该同样使用 <code>TreeNode</code> ，其中 <code>right</code> 子指针指向链表中下一个结点，而左子指针始终为 <code>null</code> 。</li>\n<li>展开后的单链表应该与二叉树 <a href=\"https://baike.baidu.com/item/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/6442839?fr=aladdin\"><strong>先序遍历</strong></a> 顺序相同。</li>\n</ul>\n<p><strong>思路</strong>:都说到这份上了，说白了就是考树的先序遍历+链表遍历</p>\n<p><strong>树的先序遍历</strong>：访问根节点，先序遍历左子树，先序遍历右子树。</p>\n<p><strong>链表的遍历</strong>：$list &#x3D; list.next$</p>\n<p>不过此处应该是左子树指空，右子树指向下一节点。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> root<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>pre_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>pre_order<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>pre_order<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token comment\">#这是一个先序遍历的方法           </span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>pre_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#注意这个变量里存储的是节点而不是单纯的val</span>\n        self<span class=\"token punctuation\">.</span>pre_order<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pre_list<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            pre<span class=\"token punctuation\">,</span>curr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pre_list<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>pre_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            pre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> curr<span class=\"token comment\">#完成链表的构建</span>\n         <span class=\"token triple-quoted-string string\">'''\n         为了方便理解，写成以下形式也是正确的\n         for i in range(0,n-1):\n            curr,next = self.pre_list[i],self.pre_list[i+1]\n            curr.left = None\n            curr.right = next\n\n         '''</span>        \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：$O(n)$</p>\n<p>对整棵树进行了先序遍历，并且循环构建了一个新的链表树。</p>\n<p>空间复杂度：$O(n)$</p>\n<p>取决于递归调用时，栈的大小，和辅助列表的长度，最大为二叉树的节点数n。</p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p><a href=\"https://leetcode.cn/problems/merge-two-binary-trees/description/\">617. 合并二叉树 - 力扣（LeetCode）</a></p>\n<p>给你两棵二叉树： <code>root1</code> 和 <code>root2</code> 。</p>\n<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong> null 的节点将直接作为新二叉树的节点。</p>\n<p>返回合并后的二叉树。</p>\n<p><strong>注意:</strong> 合并过程必须从两个树的根节点开始。</p>\n<p><strong>思路</strong>：看见二叉树一般会去想递归</p>\n<p>当发现其中一棵树的空节点时，直接使用另一棵树的对应位置节点作为新树的节点，直到没有需要合并的节点。</p>\n<p>合并两棵树，子问题是合并两棵树的左右子树</p>\n<p>正常写出来就好了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root1<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> root2<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span>  root1<span class=\"token operator\">==</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> root2\n        <span class=\"token keyword\">if</span>  root2<span class=\"token operator\">==</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> root1\n        newroot <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>val<span class=\"token operator\">+</span>root2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>mergeTrees<span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>mergeTrees<span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> newroot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度$O(n)$</p>\n<p>取决于较小的那颗二叉树的节点数，因为只有两棵树都存在的节点才会进行合并操作</p>\n<p>空间复杂度$O(n)$</p>\n<p>同上。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>今天是2中等1简单，至此hot100所有的简单题我成功ac了一遍，也算是从<strong>不入流</strong>步入了<strong>初学者</strong>的大门，虽然努力不一定会有回报，但是至少我努力过了，不是吗。</p>\n<p>接下来的题目大致浏览了一些，大多数都是回溯，动态规划，dfs，bfs，二分查找，贪心等算法思想，随便拿出来一道都是我得看半个小时题解才能理解的水准，也许我刷题的频率会放缓一些，多去补充一点理论基础和解题思路。</p>\n<p>我深知以后的路还很长，虽然我已不会再给自己立什么志向，但我已经无法回头了。</p>\n"},{"title":"刷题日记（二）","date":"2024-05-21T16:55:13.000Z","mathjax":true,"top_img":"https://s21.ax1x.com/2024/05/21/pkKTgoQ.png","cover":"https://s21.ax1x.com/2024/05/21/pkKTgoQ.png","_content":"\n### Day2打卡了\n\n今天是一道每日两道额外，2简单1困难【**本期无图片**】\n\n### 第一题\n\n[2769. 找出最大的可达成数字 - 力扣（LeetCode）](https://leetcode.cn/problems/find-the-maximum-achievable-number/description/?envType=daily-question&envId=2024-05-21)\n\n给你两个整数 `num` 和 `t` 。\n\n如果整数 `x` 可以在执行下述操作不超过 `t` 次的情况下变为与 `num` 相等，则称其为 **可达成数字** ：\n\n- 每次操作将 `x` 的值增加或减少 `1` ，同时可以选择将 `num` 的值增加或减少 `1` 。\n\n返回所有可达成数字中的最大值。可以证明至少存在一个可达成数字。\n\n\n\n**思路**：对于本题，我一开始想了很多复杂的处理，比如最容易想到的记录下所有的num和x的变化情况，再找出最大值。\n\n但是这很明显是**错误**的解法，因为num和x都是可以进行两种变化的，很难去枚举每一种情况。\n\n点击提示后，豁然开朗了。\n\n提示 1\n\nLet x be the answer, it’s always optimal to decrease x in each operation and increase nums.\n\n令x为答案，最佳的结果总是每次操作减少x并且增加num\n\n也就是$ x-t = num+t$,在函数中直接设置返回值x为$num+2t$即可\n\n编程用例如下：\n\n```python\nclass Solution:\n    def theMaximumAchievableX(self, num: int, t: int) -> int:\n        return num + t*2\n```\n\n就是这么简短，当然也可以通过赋值给x再返回，对于python来说，**执行时间**会少一些。\n\n时间复杂度和空间复杂度都是$O(1)$\n\n只用执行一次返回语句\n\n\n\n### 第二题\n\n[543. 二叉树的直径 - 力扣（LeetCode）](https://leetcode.cn/problems/diameter-of-binary-tree/description/)\n\n给你一棵二叉树的根节点，返回该树的 **直径** 。\n\n二叉树的 **直径** 是指树中任意两个节点之间最长路径的 **长度** 。这条路径可能经过也可能不经过根节点 `root` 。\n\n两节点之间路径的 **长度** 由它们之间边数表示。\n\n**思路**：很明显是可以使用递归解决。\n\n**原问题**：求一颗二叉树的直径\n\n**子问题**：左子树的直径和右子树的直径\n\n代码如下，深度优先搜索\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        ans = 1#最快情况下，只有根节点的话直径为0，返回就定为ans-1\n        def dfs(root):\n            if not root:\n                return 0#递归出口，找到叶子节点\n            l_node = dfs(root.left)\n            r_node = dfs(root.right)#递归寻找左右子树的最长路径\n            nonlocal ans\n            ans = max(ans,l_node+r_node+1)#因为返回值确定了是ans-1,那么这里补1\n            return max(l_node,r_node)+1#同上补1\n        dfs(root)\n        return ans-1\n\n```\n\n时间复杂度和空间复杂度都是$O(n)$\n\n需要遍历每个二叉树的节点，并且新建一个栈空间进行递归，空间大小取决于二叉树深度。\n\n\n\n### 第三题\n\n[124. 二叉树中的最大路径和 - 力扣（LeetCode）](https://leetcode.cn/problems/binary-tree-maximum-path-sum/)\n\n二叉树中的 **路径** 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 **至多出现一次** 。该路径 **至少包含一个** 节点，且不一定经过根节点。\n\n**路径和** 是路径中各节点值的总和。\n\n给你一个二叉树的根节点 `root` ，返回其 **最大路径和** 。\n\n**思路**：虽然是一道困难题，但是思路大同小异，直接复制第二题的代码。\n\n**由于**本题中，每个节点的值有可能是负数，那么我们初始化的ans为负无穷。\n\n**其次**：到达树的叶子节点后，叶子节点为空节点，返回的值视为0，也就是边界条件\n\n**最后**，ans的值为左子树的最大路径和加上右子树的最大路径和最后再加上此时的根节点值。\n\n**返回**左右子树较大的那条路径\n\n\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        ans = -inf\n        def dfs(root):\n            if not root:\n                return 0\n            l_val = dfs(root.left)\n            r_val = dfs(root.right)\n            nonlocal ans\n            ans = max(ans,l_val+r_val+root.val)\n            return max(max(l_val,r_val)+root.val,0)#左右子树如果加完是个负数不如不加\n        dfs(root)\n        return ans\n```\n\n时空复杂度同样都是$O(n)$,和上一题一样的。\n\n\n\n### 总结：\n\n对递归有了一点新的认识，nonlocal变量的作用是在内嵌函数中修改函数中非全局变量，感觉应该也可以通过类里的self成员来定义ans方法用来处理。\n\n希望有一天看到这种题目能够流畅的一路写完吧。\n","source":"_posts/刷题日记（二）.md","raw":"---\ntitle: 刷题日记（二）\ndate: 2024-05-22 00:55:13\ntags: [Python,数据结构,算法]\ncategories: 力扣刷题\nmathjax: true\ntop_img: https://s21.ax1x.com/2024/05/21/pkKTgoQ.png\ncover: https://s21.ax1x.com/2024/05/21/pkKTgoQ.png\n---\n\n### Day2打卡了\n\n今天是一道每日两道额外，2简单1困难【**本期无图片**】\n\n### 第一题\n\n[2769. 找出最大的可达成数字 - 力扣（LeetCode）](https://leetcode.cn/problems/find-the-maximum-achievable-number/description/?envType=daily-question&envId=2024-05-21)\n\n给你两个整数 `num` 和 `t` 。\n\n如果整数 `x` 可以在执行下述操作不超过 `t` 次的情况下变为与 `num` 相等，则称其为 **可达成数字** ：\n\n- 每次操作将 `x` 的值增加或减少 `1` ，同时可以选择将 `num` 的值增加或减少 `1` 。\n\n返回所有可达成数字中的最大值。可以证明至少存在一个可达成数字。\n\n\n\n**思路**：对于本题，我一开始想了很多复杂的处理，比如最容易想到的记录下所有的num和x的变化情况，再找出最大值。\n\n但是这很明显是**错误**的解法，因为num和x都是可以进行两种变化的，很难去枚举每一种情况。\n\n点击提示后，豁然开朗了。\n\n提示 1\n\nLet x be the answer, it’s always optimal to decrease x in each operation and increase nums.\n\n令x为答案，最佳的结果总是每次操作减少x并且增加num\n\n也就是$ x-t = num+t$,在函数中直接设置返回值x为$num+2t$即可\n\n编程用例如下：\n\n```python\nclass Solution:\n    def theMaximumAchievableX(self, num: int, t: int) -> int:\n        return num + t*2\n```\n\n就是这么简短，当然也可以通过赋值给x再返回，对于python来说，**执行时间**会少一些。\n\n时间复杂度和空间复杂度都是$O(1)$\n\n只用执行一次返回语句\n\n\n\n### 第二题\n\n[543. 二叉树的直径 - 力扣（LeetCode）](https://leetcode.cn/problems/diameter-of-binary-tree/description/)\n\n给你一棵二叉树的根节点，返回该树的 **直径** 。\n\n二叉树的 **直径** 是指树中任意两个节点之间最长路径的 **长度** 。这条路径可能经过也可能不经过根节点 `root` 。\n\n两节点之间路径的 **长度** 由它们之间边数表示。\n\n**思路**：很明显是可以使用递归解决。\n\n**原问题**：求一颗二叉树的直径\n\n**子问题**：左子树的直径和右子树的直径\n\n代码如下，深度优先搜索\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        ans = 1#最快情况下，只有根节点的话直径为0，返回就定为ans-1\n        def dfs(root):\n            if not root:\n                return 0#递归出口，找到叶子节点\n            l_node = dfs(root.left)\n            r_node = dfs(root.right)#递归寻找左右子树的最长路径\n            nonlocal ans\n            ans = max(ans,l_node+r_node+1)#因为返回值确定了是ans-1,那么这里补1\n            return max(l_node,r_node)+1#同上补1\n        dfs(root)\n        return ans-1\n\n```\n\n时间复杂度和空间复杂度都是$O(n)$\n\n需要遍历每个二叉树的节点，并且新建一个栈空间进行递归，空间大小取决于二叉树深度。\n\n\n\n### 第三题\n\n[124. 二叉树中的最大路径和 - 力扣（LeetCode）](https://leetcode.cn/problems/binary-tree-maximum-path-sum/)\n\n二叉树中的 **路径** 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 **至多出现一次** 。该路径 **至少包含一个** 节点，且不一定经过根节点。\n\n**路径和** 是路径中各节点值的总和。\n\n给你一个二叉树的根节点 `root` ，返回其 **最大路径和** 。\n\n**思路**：虽然是一道困难题，但是思路大同小异，直接复制第二题的代码。\n\n**由于**本题中，每个节点的值有可能是负数，那么我们初始化的ans为负无穷。\n\n**其次**：到达树的叶子节点后，叶子节点为空节点，返回的值视为0，也就是边界条件\n\n**最后**，ans的值为左子树的最大路径和加上右子树的最大路径和最后再加上此时的根节点值。\n\n**返回**左右子树较大的那条路径\n\n\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        ans = -inf\n        def dfs(root):\n            if not root:\n                return 0\n            l_val = dfs(root.left)\n            r_val = dfs(root.right)\n            nonlocal ans\n            ans = max(ans,l_val+r_val+root.val)\n            return max(max(l_val,r_val)+root.val,0)#左右子树如果加完是个负数不如不加\n        dfs(root)\n        return ans\n```\n\n时空复杂度同样都是$O(n)$,和上一题一样的。\n\n\n\n### 总结：\n\n对递归有了一点新的认识，nonlocal变量的作用是在内嵌函数中修改函数中非全局变量，感觉应该也可以通过类里的self成员来定义ans方法用来处理。\n\n希望有一天看到这种题目能够流畅的一路写完吧。\n","slug":"刷题日记（二）","published":1,"updated":"2024-05-22T07:35:23.219Z","comments":1,"layout":"post","photos":[],"_id":"clwnrkl3s000fosw5glz6a944","content":"<h3 id=\"Day2打卡了\"><a href=\"#Day2打卡了\" class=\"headerlink\" title=\"Day2打卡了\"></a>Day2打卡了</h3><p>今天是一道每日两道额外，2简单1困难【<strong>本期无图片</strong>】</p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p><a href=\"https://leetcode.cn/problems/find-the-maximum-achievable-number/description/?envType=daily-question&envId=2024-05-21\">2769. 找出最大的可达成数字 - 力扣（LeetCode）</a></p>\n<p>给你两个整数 <code>num</code> 和 <code>t</code> 。</p>\n<p>如果整数 <code>x</code> 可以在执行下述操作不超过 <code>t</code> 次的情况下变为与 <code>num</code> 相等，则称其为 <strong>可达成数字</strong> ：</p>\n<ul>\n<li>每次操作将 <code>x</code> 的值增加或减少 <code>1</code> ，同时可以选择将 <code>num</code> 的值增加或减少 <code>1</code> 。</li>\n</ul>\n<p>返回所有可达成数字中的最大值。可以证明至少存在一个可达成数字。</p>\n<p><strong>思路</strong>：对于本题，我一开始想了很多复杂的处理，比如最容易想到的记录下所有的num和x的变化情况，再找出最大值。</p>\n<p>但是这很明显是<strong>错误</strong>的解法，因为num和x都是可以进行两种变化的，很难去枚举每一种情况。</p>\n<p>点击提示后，豁然开朗了。</p>\n<p>提示 1</p>\n<p>Let x be the answer, it’s always optimal to decrease x in each operation and increase nums.</p>\n<p>令x为答案，最佳的结果总是每次操作减少x并且增加num</p>\n<p>也就是$ x-t &#x3D; num+t$,在函数中直接设置返回值x为$num+2t$即可</p>\n<p>编程用例如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">theMaximumAchievableX</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> t<span class=\"token operator\">*</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>就是这么简短，当然也可以通过赋值给x再返回，对于python来说，<strong>执行时间</strong>会少一些。</p>\n<p>时间复杂度和空间复杂度都是$O(1)$</p>\n<p>只用执行一次返回语句</p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p><a href=\"https://leetcode.cn/problems/diameter-of-binary-tree/description/\">543. 二叉树的直径 - 力扣（LeetCode）</a></p>\n<p>给你一棵二叉树的根节点，返回该树的 <strong>直径</strong> 。</p>\n<p>二叉树的 <strong>直径</strong> 是指树中任意两个节点之间最长路径的 <strong>长度</strong> 。这条路径可能经过也可能不经过根节点 <code>root</code> 。</p>\n<p>两节点之间路径的 <strong>长度</strong> 由它们之间边数表示。</p>\n<p><strong>思路</strong>：很明显是可以使用递归解决。</p>\n<p><strong>原问题</strong>：求一颗二叉树的直径</p>\n<p><strong>子问题</strong>：左子树的直径和右子树的直径</p>\n<p>代码如下，深度优先搜索</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">diameterOfBinaryTree</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token comment\">#最快情况下，只有根节点的话直径为0，返回就定为ans-1</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token comment\">#递归出口，找到叶子节点</span>\n            l_node <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n            r_node <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token comment\">#递归寻找左右子树的最长路径</span>\n            <span class=\"token keyword\">nonlocal</span> ans\n            ans <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>l_node<span class=\"token operator\">+</span>r_node<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#因为返回值确定了是ans-1,那么这里补1</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>l_node<span class=\"token punctuation\">,</span>r_node<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token comment\">#同上补1</span>\n        dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度和空间复杂度都是$O(n)$</p>\n<p>需要遍历每个二叉树的节点，并且新建一个栈空间进行递归，空间大小取决于二叉树深度。</p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p><a href=\"https://leetcode.cn/problems/binary-tree-maximum-path-sum/\">124. 二叉树中的最大路径和 - 力扣（LeetCode）</a></p>\n<p>二叉树中的 <strong>路径</strong> 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点。</p>\n<p><strong>路径和</strong> 是路径中各节点值的总和。</p>\n<p>给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> 。</p>\n<p><strong>思路</strong>：虽然是一道困难题，但是思路大同小异，直接复制第二题的代码。</p>\n<p><strong>由于</strong>本题中，每个节点的值有可能是负数，那么我们初始化的ans为负无穷。</p>\n<p><strong>其次</strong>：到达树的叶子节点后，叶子节点为空节点，返回的值视为0，也就是边界条件</p>\n<p><strong>最后</strong>，ans的值为左子树的最大路径和加上右子树的最大路径和最后再加上此时的根节点值。</p>\n<p><strong>返回</strong>左右子树较大的那条路径</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxPathSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>inf\n        <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            l_val <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n            r_val <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">nonlocal</span> ans\n            ans <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>l_val<span class=\"token operator\">+</span>r_val<span class=\"token operator\">+</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>l_val<span class=\"token punctuation\">,</span>r_val<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#左右子树如果加完是个负数不如不加</span>\n        dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ans<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时空复杂度同样都是$O(n)$,和上一题一样的。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>对递归有了一点新的认识，nonlocal变量的作用是在内嵌函数中修改函数中非全局变量，感觉应该也可以通过类里的self成员来定义ans方法用来处理。</p>\n<p>希望有一天看到这种题目能够流畅的一路写完吧。</p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"Day2打卡了\"><a href=\"#Day2打卡了\" class=\"headerlink\" title=\"Day2打卡了\"></a>Day2打卡了</h3><p>今天是一道每日两道额外，2简单1困难【<strong>本期无图片</strong>】</p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p><a href=\"https://leetcode.cn/problems/find-the-maximum-achievable-number/description/?envType=daily-question&envId=2024-05-21\">2769. 找出最大的可达成数字 - 力扣（LeetCode）</a></p>\n<p>给你两个整数 <code>num</code> 和 <code>t</code> 。</p>\n<p>如果整数 <code>x</code> 可以在执行下述操作不超过 <code>t</code> 次的情况下变为与 <code>num</code> 相等，则称其为 <strong>可达成数字</strong> ：</p>\n<ul>\n<li>每次操作将 <code>x</code> 的值增加或减少 <code>1</code> ，同时可以选择将 <code>num</code> 的值增加或减少 <code>1</code> 。</li>\n</ul>\n<p>返回所有可达成数字中的最大值。可以证明至少存在一个可达成数字。</p>\n<p><strong>思路</strong>：对于本题，我一开始想了很多复杂的处理，比如最容易想到的记录下所有的num和x的变化情况，再找出最大值。</p>\n<p>但是这很明显是<strong>错误</strong>的解法，因为num和x都是可以进行两种变化的，很难去枚举每一种情况。</p>\n<p>点击提示后，豁然开朗了。</p>\n<p>提示 1</p>\n<p>Let x be the answer, it’s always optimal to decrease x in each operation and increase nums.</p>\n<p>令x为答案，最佳的结果总是每次操作减少x并且增加num</p>\n<p>也就是$ x-t &#x3D; num+t$,在函数中直接设置返回值x为$num+2t$即可</p>\n<p>编程用例如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">theMaximumAchievableX</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> t<span class=\"token operator\">*</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>就是这么简短，当然也可以通过赋值给x再返回，对于python来说，<strong>执行时间</strong>会少一些。</p>\n<p>时间复杂度和空间复杂度都是$O(1)$</p>\n<p>只用执行一次返回语句</p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p><a href=\"https://leetcode.cn/problems/diameter-of-binary-tree/description/\">543. 二叉树的直径 - 力扣（LeetCode）</a></p>\n<p>给你一棵二叉树的根节点，返回该树的 <strong>直径</strong> 。</p>\n<p>二叉树的 <strong>直径</strong> 是指树中任意两个节点之间最长路径的 <strong>长度</strong> 。这条路径可能经过也可能不经过根节点 <code>root</code> 。</p>\n<p>两节点之间路径的 <strong>长度</strong> 由它们之间边数表示。</p>\n<p><strong>思路</strong>：很明显是可以使用递归解决。</p>\n<p><strong>原问题</strong>：求一颗二叉树的直径</p>\n<p><strong>子问题</strong>：左子树的直径和右子树的直径</p>\n<p>代码如下，深度优先搜索</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">diameterOfBinaryTree</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token comment\">#最快情况下，只有根节点的话直径为0，返回就定为ans-1</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token comment\">#递归出口，找到叶子节点</span>\n            l_node <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n            r_node <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token comment\">#递归寻找左右子树的最长路径</span>\n            <span class=\"token keyword\">nonlocal</span> ans\n            ans <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>l_node<span class=\"token operator\">+</span>r_node<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#因为返回值确定了是ans-1,那么这里补1</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>l_node<span class=\"token punctuation\">,</span>r_node<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token comment\">#同上补1</span>\n        dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度和空间复杂度都是$O(n)$</p>\n<p>需要遍历每个二叉树的节点，并且新建一个栈空间进行递归，空间大小取决于二叉树深度。</p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p><a href=\"https://leetcode.cn/problems/binary-tree-maximum-path-sum/\">124. 二叉树中的最大路径和 - 力扣（LeetCode）</a></p>\n<p>二叉树中的 <strong>路径</strong> 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点。</p>\n<p><strong>路径和</strong> 是路径中各节点值的总和。</p>\n<p>给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> 。</p>\n<p><strong>思路</strong>：虽然是一道困难题，但是思路大同小异，直接复制第二题的代码。</p>\n<p><strong>由于</strong>本题中，每个节点的值有可能是负数，那么我们初始化的ans为负无穷。</p>\n<p><strong>其次</strong>：到达树的叶子节点后，叶子节点为空节点，返回的值视为0，也就是边界条件</p>\n<p><strong>最后</strong>，ans的值为左子树的最大路径和加上右子树的最大路径和最后再加上此时的根节点值。</p>\n<p><strong>返回</strong>左右子树较大的那条路径</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxPathSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>inf\n        <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            l_val <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n            r_val <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">nonlocal</span> ans\n            ans <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>l_val<span class=\"token operator\">+</span>r_val<span class=\"token operator\">+</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>l_val<span class=\"token punctuation\">,</span>r_val<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#左右子树如果加完是个负数不如不加</span>\n        dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ans<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时空复杂度同样都是$O(n)$,和上一题一样的。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>对递归有了一点新的认识，nonlocal变量的作用是在内嵌函数中修改函数中非全局变量，感觉应该也可以通过类里的self成员来定义ans方法用来处理。</p>\n<p>希望有一天看到这种题目能够流畅的一路写完吧。</p>\n"},{"title":"刷题日记：番外-链表（一）","date":"2024-05-26T09:08:53.000Z","mathjax":true,"top_img":"https://s21.ax1x.com/2024/05/21/pkKTgoQ.png","cover":"https://s21.ax1x.com/2024/05/21/pkKTgoQ.png","_content":"\n### 链表篇\n\n#### 前言\n\n在我初学数据结构的时候，如果问我**前期**对初学者压力最大的数据结构是什么，我认为应该是链表。\n\n前期三大件，顺序表、链表、栈当中，顺序表和栈一般都是结合问题来运用其数据结构的知识来写算法。\n\n而链表不同，链表的问题一般就在对一个链表做各种操作，从我个人看来，与前二者不同，链表是一个数据结构知识比重占比大于算法知识的数据结构。\n\n况且，常规的应届生面试题里经常包括一些基本的链表题目。\n\n因此，本文着重从实践的角度，结合对应的链表题目来发散思考，用以解决绝大多数链表的普通题目。\n\n**编程语言主要还是python**\n\n\n\n#### 基本操作\n\n对于大多数简单的链表题目，有一个一定得烂熟于心的代码块：**遍历链表**，**删除节点**，**插入节点**\n\n遍历就是让头节点一直往后走，走到尾部，由于改变了head的内容，要注意有时候题目返回值需要提前把head存起来。\n\n![chrome-capture-2024-4-26](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26.gif)\n\n\n\n删除节点，如图所示，就是让待删除节点3的前驱节点2指向其后继结点4，在实际的运用当中，一般会直接在待删除节点的前驱节点进行操作。\n\n![chrome-capture-2024-4-26 (1)](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26%20(1)-17167448925031.gif)\n\n\n\n插入操作，如图所示，在节点2后插入一个值为5的节点，即让2的后继指向5，5的后继指向原2的后继3\n\n![chrome-capture-2024-4-26 (2)](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26%20(2).gif)\n\n```python\n#假设定义一个这样的链表，表头指针head\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#新建节点\nhead = ListNode()\nhead.next = ListNode()\n#链表遍历，在其中增减代码实现局部的额外操作。\nwhile head:\n    head = head.next\n#节点删除:令后继结点等于后继的后继\nhead.next = head.next.next\n#插入节点curr为当前节点，tmp为缓存节点,a为需要插入的节点\ntmp = curr.next\ncurr.next = a\na.next = tmp\n#python平行赋值可以不需要tmp\ncurr.next,a.next = a,curr.next.next\n```\n\n对于Python做链表相关的题目，有一点需要理解，就是例如**head**之类的指针只需要理解为链表某一**节点**（此处为头节点）的索引即可。\n\n**好的，现在我们已经掌握了链表的增删改查，现在让我们来解决实际题目吧！**\n\n### 第一题\n\n[83. 删除排序链表中的重复元素 - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/description/)\n\n给定一个已排序的链表的头 `head` ， *删除所有重复的元素，使每个元素只出现一次* 。返回 *已排序的链表* 。\n\n\n\n**思路**：本题给我们的是一个排序链表，也就是说，如果有重复元素，相同元素的节点**一定是相邻的**\n\n例如链表1-1-2-3-4-4-5，我们可以清晰的看到，一旦其有序，重复元素之间必定连续。\n\n那么就很简单了，直接在遍历链表的时候，检查当前节点和其后继结点的值是否相等，如果相等就将后继结点删除即可。\n\n\n\n理论成立，编程如下\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:#排除空链表\n            return head\n        curr = head#不直接修改head，head之后要作为返回值\n        while curr.next:#因为我们要和后继节点进行比较，如果不存在后继结点，就没必要管了，这样也能避免空指针问题\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next#删除后继\n            else: \n                curr = curr.next\n        return head            \n```\n\n\n\n时间复杂度：$O(n)$\n\n遍历链表\n\n空间复杂度：$O(1)$\n\n直接在原表进行修改\n\n\n\n### 第二题\n\n[82. 删除排序链表中的重复元素 II - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/)\n\n给定一个已排序的链表的头 `head` ， *删除原始链表中所有重复数字的节点，只留下不同的数字* 。返回 *已排序的链表* 。\n\n\n\n**思路**：本题与前一题很像，但是要求我们将全部的重复数字删除干净。\n\n**首先**，想一想还能不能使用原来的判断方式，即比较当前值和后继节点的值。\n\n很明显是没问题的。\n\n但我们还可以采取之前的删除方式吗?\n\n很明显会出现问题：当我们继续从删除完的当前节点进行判断时，由于后继的重复节点已被删除，我们无法判断该节点是否该删除。\n\n因此，本题我的解决方案是：**使用前驱节点直接删除一大段重复的节点**\n\n理论成立，代码如下。\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return head\n        curr = head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy#这个空节点是大部分题解中前置的前驱节点pre的默认写法\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next#我们在这里直接让当前节点指针走到相似串的尾部\n                pre.next = curr.next#直接全部删除\n            else:\n                pre = pre.next\n            curr = curr.next\n        return dummy.next\n\n            \n\n```\n\n\n\n时间复杂度：$O(n)$\n\n遍历链表，虽然看似是两层循环，但是外层循环的的次数会随内层循环次数改变而改变\n\n空间复杂度：$O(1)$\n\n只用了一个空节点，其余直接在原表进行修改\n\n\n\n### 第三题\n\n[LCR 024. 反转链表 - 力扣（LeetCode）](https://leetcode.cn/problems/UHnkqh/description/)\n\n给定单链表的头节点 `head` ，请反转链表，并返回反转后的链表的头节点。\n\n\n\n**注**：本题思想将可用于下一题\n\n**思路**：用举例的方法比较形象。\n\n请出我们的链表1>2>3>4,使用什么样的方式，我们才可以把它变成4>3>2>1呢？\n\n在链表的遍历中，一般我们每次处理的是单个节点和它的后继，有时候需要处理其前驱。\n\n那么我们可以像栈一样，一层一层的往上迭代，例如2>1,然后再将节点3接到2的前面即3>2>1，以此类推。\n\n\n\n理论成立，开始编程\n\n```python\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        cur,pre = head,None\n        while cur:\n            cur.next,pre,cur = pre,cur,cur.next\n            '''tmp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = tmp\n            '''\n        return pre\n```\n\n先建立一个空的前驱节点pre，再将其不断和cur一起往后进行遍历，并且将原本的前驱节点变成当前节点的后继，迭代解决问题。\n\n时间复杂度：$O(n)$\n\n遍历链表\n\n空间复杂度：$O(1)$\n\n直接修改原链表\n\n\n\n### 第四题\n\n[LCR 027. 回文链表 - 力扣（LeetCode）](https://leetcode.cn/problems/aMhZSa/description/)\n\n给定一个链表的 **头节点** `head` **，**请判断其是否为回文链表。\n\n如果一个链表是回文，那么链表节点序列从前往后看和从后往前看是相同的。\n\n\n\n**思路**：如果单纯从链表的角度进行思考，这题我会考虑快慢指针。\n\n快指针一次走两步，慢指针一次一步，到最后慢指针就处于链表的中点处停止了，我们只需要将慢指针开始的链表翻转，然后依次和头节点进行比较即可。\n\n\n\n代码来咯：\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        cur,pre = head,None\n        while cur:\n            cur.next,pre,cur = pre,cur,cur.next\n            '''tmp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = tmp\n            '''\n        return pre\n    #上面直接拷，该cv时就cv\n    def isPalindrome(self, head: ListNode) -> bool:\n        fast = head\n        slow = head\n        while fast:\n            fast = fast.next\n            slow = slow.next\n            if fast:\n                fast = fast.next#如果快指针已经空了就没必要了，循环会结束\n        mid = self.reverseList(slow)\n        while mid:#从mid开始就行，mid是中点，mid空head也到mid了\n            if mid.val != head.val:\n                return False\n            mid = mid.next\n            head = head.next\n        return True\n\n```\n\n时间复杂度：$O(n)$\n\n几个$O(n)$加在一起还是$O(n)$\n\n空间复杂度：$O(1)$\n\n都是在原表进行修改的\n\n**拓展**：其实真正刷题时，为了争分夺秒，一般会直接导入到数组里，python就更简单一点，列表有切片操作。\n\n推荐先学习前一种方法，加深对链表的理解，但是大家打争分夺秒的比赛，或者应对期末考试，等级考试直接暴力解就行了。\n\n**列表切片实现**：\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        l = []\n        while head:\n            l.append(head.val)\n            head = head.next\n        return l == l[::-1]\n```\n\n**栈实现：**\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        stack = []\n        tmp = head\n        while tmp:\n            stack.append(tmp.val)\n            tmp = tmp.next\n        while head:\n            if head.val != stack.pop():\n                return False\n            head = head.next\n        return True\n```\n\n空间复杂度会变成$O(n)$\n\n因为咱用了其他数据结构来存储嘛。\n\n\n\n### 第五题\n\n[148. 排序链表 - 力扣（LeetCode）](https://leetcode.cn/problems/sort-list/)\n\n给你链表的头结点 `head` ，请将其按 **升序** 排列并返回 **排序后的链表** 。\n\n\n\n**思考**（这次不是思路了）：排序和枚举作为最基本的算法，看起来好像很简单，但是这道链表题写的难度是中等，实际上，在我看来，链表排序应该是困难题。\n\n本题的**进阶：**你可以在 `O(n log n)` 时间复杂度和常数级空间复杂度下，对链表进行排序吗？\n\n看到这个复杂度，很明显是归并排序...但是比较简单实现归并排序的方法是自顶向下，使用递归，然鹅，递归的空间复杂度往往不是常数级的，也就是说，这一题需要自底向上的迭代法进行归并排序。\n\n以下是迭代法的常数级别空间复杂度\n\n1. **sortList函数：**\n   - 如果链表为空或只有一个节点，则直接返回链表。\n   - 首先获取链表的长度。\n   - 创建一个虚拟节点(dummy)作为辅助节点，将其指向头节点。\n   - 设置初始子链表长度为1，然后进入主循环。\n   - 在循环中，不断将链表拆分成长度为size的子链表，然后两两合并这些子链表，直到完成整个链表的排序。\n2. **split函数：**\n   - 该函数用于拆分链表，接收一个头节点和一个指定长度，返回拆分后的链表的头节点。\n   - 在循环中，移动指针找到应该截断的位置，然后进行拆分操作。\n3. **merge函数：**\n   - 该函数用于合并两个有序链表，接收两个有序链表的头节点和一个合并后链表的头节点，返回合并后的链表的尾节点。\n   - 在循环中，比较两个链表的节点值，将较小的节点连接到合并链表的尾部，直到其中一个链表为空，然后将另一个非空链表连接到合并链表的尾部。\n\n```python\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \n        if not head or not head.next:\n            return head\n        # 获取链表长度\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n        dummy = ListNode(0)\n        dummy.next = head\n        size = 1\n        while size < length:\n            tail = dummy\n            cur = dummy.next\n            while cur:\n                left = cur\n                right = self.split(left, size)\n                cur = self.split(right, size)\n                tail = self.merge(left, right, tail)\n            size *= 2\n        return dummy.next\n\n    def split(self, head, size):\n        for _ in range(size - 1):\n            if not head:\n                break\n            head = head.next\n        if not head:\n            return None\n        next, head.next = head.next, None\n        return next\n\n    def merge(self, l1, l2, head):\n        cur = head\n        while l1 and l2:\n            if l1.val < l2.val:\n                cur.next, l1 = l1, l1.next\n            else:\n                cur.next, l2 = l2, l2.next\n            cur = cur.next\n        cur.next = l1 if l1 else l2\n        while cur.next:\n            cur = cur.next\n        return cur\n\n```\n\n\n\n递归法，空间复杂度为$O(logn)$\n\n1. **mergesort函数：**\n   - mergesort函数用于合并两个已排序的链表a和b。\n   - 首先，对a和b分别调用sortList函数进行排序。\n   - 创建一个新的头节点head，并使用tail指针指向它，用于构建合并后的链表。\n   - 在while循环中，比较a和b当前节点的值，将较小的节点连接到tail后，并更新相应的指针。\n   - 循环直到a或b其中一个为空，然后将另一个非空的链表直接连接到tail后。\n   - 返回合并后的链表头节点。\n2. **sortList函数：**\n   - sortList函数用于对链表进行归并排序。\n   - 首先检查链表是否为空或只有一个节点，如果是，则直接返回链表。\n   - 使用双指针fast和slow找到链表的中间节点，将链表分为两部分。\n   - 通过递归调用mergesort函数对左右两部分分别进行排序。\n   - 最后，将排序后的两部分合并。\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergesort(self,a,b):\n        a = self.sortList(a)\n        b = self.sortList(b)\n        head = ListNode()\n        tail = head\n        while a or b:\n            if a == None:\n                tail.next = b\n                break\n            elif b == None:\n                tail.next = a\n                break\n            elif a.val > b.val:\n                tail.next = b\n                b = b.next\n            else:\n                tail.next = a\n                a = a.next\n            tail = tail.next\n            tail.next = None\n        return head.next\n            \n\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if head == None:\n            return None\n        if head.next == None:\n            return head\n        fast = head\n        slow = head\n        prev = None\n        while fast:\n            prev = slow\n            fast = fast.next\n            slow = slow.next\n            if fast:\n                fast = fast.next\n        prev.next = None\n        return self.mergesort(head,slow)         \n        \n```\n\n\n\n最后，让我们不受进阶规则的束缚，来一段酣畅淋漓的暴力解：\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        l = []\n        if not head:\n            return head\n        \n        while head:\n            l.append(head.val)\n            head = head.next\n        l.sort()\n        head = ListNode(l[0])\n        pre = head\n        for i in range(1,len(l)):\n            pre.next = ListNode(l[i])\n            pre = pre.next\n        return head\n        \n            \n```\n\n空间复杂度会变成$O(n)$\n\n\n\n### 总结\n\n算法刷题任重而道远，不过既然朋友你都已经学会链表了，快去把力扣里的链表题全部ac了吧！！！！！！！！\n\n","source":"_posts/刷题日记：番外-链表（一）.md","raw":"---\ntitle: 刷题日记：番外-链表（一）\ndate: 2024-05-26 17:08:53\ntags: [Python,数据结构,算法,链表]\ncategories: 力扣刷题\nmathjax: true\ntop_img: https://s21.ax1x.com/2024/05/21/pkKTgoQ.png\ncover: https://s21.ax1x.com/2024/05/21/pkKTgoQ.png\n---\n\n### 链表篇\n\n#### 前言\n\n在我初学数据结构的时候，如果问我**前期**对初学者压力最大的数据结构是什么，我认为应该是链表。\n\n前期三大件，顺序表、链表、栈当中，顺序表和栈一般都是结合问题来运用其数据结构的知识来写算法。\n\n而链表不同，链表的问题一般就在对一个链表做各种操作，从我个人看来，与前二者不同，链表是一个数据结构知识比重占比大于算法知识的数据结构。\n\n况且，常规的应届生面试题里经常包括一些基本的链表题目。\n\n因此，本文着重从实践的角度，结合对应的链表题目来发散思考，用以解决绝大多数链表的普通题目。\n\n**编程语言主要还是python**\n\n\n\n#### 基本操作\n\n对于大多数简单的链表题目，有一个一定得烂熟于心的代码块：**遍历链表**，**删除节点**，**插入节点**\n\n遍历就是让头节点一直往后走，走到尾部，由于改变了head的内容，要注意有时候题目返回值需要提前把head存起来。\n\n![chrome-capture-2024-4-26](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26.gif)\n\n\n\n删除节点，如图所示，就是让待删除节点3的前驱节点2指向其后继结点4，在实际的运用当中，一般会直接在待删除节点的前驱节点进行操作。\n\n![chrome-capture-2024-4-26 (1)](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26%20(1)-17167448925031.gif)\n\n\n\n插入操作，如图所示，在节点2后插入一个值为5的节点，即让2的后继指向5，5的后继指向原2的后继3\n\n![chrome-capture-2024-4-26 (2)](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26%20(2).gif)\n\n```python\n#假设定义一个这样的链表，表头指针head\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#新建节点\nhead = ListNode()\nhead.next = ListNode()\n#链表遍历，在其中增减代码实现局部的额外操作。\nwhile head:\n    head = head.next\n#节点删除:令后继结点等于后继的后继\nhead.next = head.next.next\n#插入节点curr为当前节点，tmp为缓存节点,a为需要插入的节点\ntmp = curr.next\ncurr.next = a\na.next = tmp\n#python平行赋值可以不需要tmp\ncurr.next,a.next = a,curr.next.next\n```\n\n对于Python做链表相关的题目，有一点需要理解，就是例如**head**之类的指针只需要理解为链表某一**节点**（此处为头节点）的索引即可。\n\n**好的，现在我们已经掌握了链表的增删改查，现在让我们来解决实际题目吧！**\n\n### 第一题\n\n[83. 删除排序链表中的重复元素 - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/description/)\n\n给定一个已排序的链表的头 `head` ， *删除所有重复的元素，使每个元素只出现一次* 。返回 *已排序的链表* 。\n\n\n\n**思路**：本题给我们的是一个排序链表，也就是说，如果有重复元素，相同元素的节点**一定是相邻的**\n\n例如链表1-1-2-3-4-4-5，我们可以清晰的看到，一旦其有序，重复元素之间必定连续。\n\n那么就很简单了，直接在遍历链表的时候，检查当前节点和其后继结点的值是否相等，如果相等就将后继结点删除即可。\n\n\n\n理论成立，编程如下\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:#排除空链表\n            return head\n        curr = head#不直接修改head，head之后要作为返回值\n        while curr.next:#因为我们要和后继节点进行比较，如果不存在后继结点，就没必要管了，这样也能避免空指针问题\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next#删除后继\n            else: \n                curr = curr.next\n        return head            \n```\n\n\n\n时间复杂度：$O(n)$\n\n遍历链表\n\n空间复杂度：$O(1)$\n\n直接在原表进行修改\n\n\n\n### 第二题\n\n[82. 删除排序链表中的重复元素 II - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/)\n\n给定一个已排序的链表的头 `head` ， *删除原始链表中所有重复数字的节点，只留下不同的数字* 。返回 *已排序的链表* 。\n\n\n\n**思路**：本题与前一题很像，但是要求我们将全部的重复数字删除干净。\n\n**首先**，想一想还能不能使用原来的判断方式，即比较当前值和后继节点的值。\n\n很明显是没问题的。\n\n但我们还可以采取之前的删除方式吗?\n\n很明显会出现问题：当我们继续从删除完的当前节点进行判断时，由于后继的重复节点已被删除，我们无法判断该节点是否该删除。\n\n因此，本题我的解决方案是：**使用前驱节点直接删除一大段重复的节点**\n\n理论成立，代码如下。\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return head\n        curr = head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy#这个空节点是大部分题解中前置的前驱节点pre的默认写法\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next#我们在这里直接让当前节点指针走到相似串的尾部\n                pre.next = curr.next#直接全部删除\n            else:\n                pre = pre.next\n            curr = curr.next\n        return dummy.next\n\n            \n\n```\n\n\n\n时间复杂度：$O(n)$\n\n遍历链表，虽然看似是两层循环，但是外层循环的的次数会随内层循环次数改变而改变\n\n空间复杂度：$O(1)$\n\n只用了一个空节点，其余直接在原表进行修改\n\n\n\n### 第三题\n\n[LCR 024. 反转链表 - 力扣（LeetCode）](https://leetcode.cn/problems/UHnkqh/description/)\n\n给定单链表的头节点 `head` ，请反转链表，并返回反转后的链表的头节点。\n\n\n\n**注**：本题思想将可用于下一题\n\n**思路**：用举例的方法比较形象。\n\n请出我们的链表1>2>3>4,使用什么样的方式，我们才可以把它变成4>3>2>1呢？\n\n在链表的遍历中，一般我们每次处理的是单个节点和它的后继，有时候需要处理其前驱。\n\n那么我们可以像栈一样，一层一层的往上迭代，例如2>1,然后再将节点3接到2的前面即3>2>1，以此类推。\n\n\n\n理论成立，开始编程\n\n```python\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        cur,pre = head,None\n        while cur:\n            cur.next,pre,cur = pre,cur,cur.next\n            '''tmp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = tmp\n            '''\n        return pre\n```\n\n先建立一个空的前驱节点pre，再将其不断和cur一起往后进行遍历，并且将原本的前驱节点变成当前节点的后继，迭代解决问题。\n\n时间复杂度：$O(n)$\n\n遍历链表\n\n空间复杂度：$O(1)$\n\n直接修改原链表\n\n\n\n### 第四题\n\n[LCR 027. 回文链表 - 力扣（LeetCode）](https://leetcode.cn/problems/aMhZSa/description/)\n\n给定一个链表的 **头节点** `head` **，**请判断其是否为回文链表。\n\n如果一个链表是回文，那么链表节点序列从前往后看和从后往前看是相同的。\n\n\n\n**思路**：如果单纯从链表的角度进行思考，这题我会考虑快慢指针。\n\n快指针一次走两步，慢指针一次一步，到最后慢指针就处于链表的中点处停止了，我们只需要将慢指针开始的链表翻转，然后依次和头节点进行比较即可。\n\n\n\n代码来咯：\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        cur,pre = head,None\n        while cur:\n            cur.next,pre,cur = pre,cur,cur.next\n            '''tmp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = tmp\n            '''\n        return pre\n    #上面直接拷，该cv时就cv\n    def isPalindrome(self, head: ListNode) -> bool:\n        fast = head\n        slow = head\n        while fast:\n            fast = fast.next\n            slow = slow.next\n            if fast:\n                fast = fast.next#如果快指针已经空了就没必要了，循环会结束\n        mid = self.reverseList(slow)\n        while mid:#从mid开始就行，mid是中点，mid空head也到mid了\n            if mid.val != head.val:\n                return False\n            mid = mid.next\n            head = head.next\n        return True\n\n```\n\n时间复杂度：$O(n)$\n\n几个$O(n)$加在一起还是$O(n)$\n\n空间复杂度：$O(1)$\n\n都是在原表进行修改的\n\n**拓展**：其实真正刷题时，为了争分夺秒，一般会直接导入到数组里，python就更简单一点，列表有切片操作。\n\n推荐先学习前一种方法，加深对链表的理解，但是大家打争分夺秒的比赛，或者应对期末考试，等级考试直接暴力解就行了。\n\n**列表切片实现**：\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        l = []\n        while head:\n            l.append(head.val)\n            head = head.next\n        return l == l[::-1]\n```\n\n**栈实现：**\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        stack = []\n        tmp = head\n        while tmp:\n            stack.append(tmp.val)\n            tmp = tmp.next\n        while head:\n            if head.val != stack.pop():\n                return False\n            head = head.next\n        return True\n```\n\n空间复杂度会变成$O(n)$\n\n因为咱用了其他数据结构来存储嘛。\n\n\n\n### 第五题\n\n[148. 排序链表 - 力扣（LeetCode）](https://leetcode.cn/problems/sort-list/)\n\n给你链表的头结点 `head` ，请将其按 **升序** 排列并返回 **排序后的链表** 。\n\n\n\n**思考**（这次不是思路了）：排序和枚举作为最基本的算法，看起来好像很简单，但是这道链表题写的难度是中等，实际上，在我看来，链表排序应该是困难题。\n\n本题的**进阶：**你可以在 `O(n log n)` 时间复杂度和常数级空间复杂度下，对链表进行排序吗？\n\n看到这个复杂度，很明显是归并排序...但是比较简单实现归并排序的方法是自顶向下，使用递归，然鹅，递归的空间复杂度往往不是常数级的，也就是说，这一题需要自底向上的迭代法进行归并排序。\n\n以下是迭代法的常数级别空间复杂度\n\n1. **sortList函数：**\n   - 如果链表为空或只有一个节点，则直接返回链表。\n   - 首先获取链表的长度。\n   - 创建一个虚拟节点(dummy)作为辅助节点，将其指向头节点。\n   - 设置初始子链表长度为1，然后进入主循环。\n   - 在循环中，不断将链表拆分成长度为size的子链表，然后两两合并这些子链表，直到完成整个链表的排序。\n2. **split函数：**\n   - 该函数用于拆分链表，接收一个头节点和一个指定长度，返回拆分后的链表的头节点。\n   - 在循环中，移动指针找到应该截断的位置，然后进行拆分操作。\n3. **merge函数：**\n   - 该函数用于合并两个有序链表，接收两个有序链表的头节点和一个合并后链表的头节点，返回合并后的链表的尾节点。\n   - 在循环中，比较两个链表的节点值，将较小的节点连接到合并链表的尾部，直到其中一个链表为空，然后将另一个非空链表连接到合并链表的尾部。\n\n```python\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \n        if not head or not head.next:\n            return head\n        # 获取链表长度\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n        dummy = ListNode(0)\n        dummy.next = head\n        size = 1\n        while size < length:\n            tail = dummy\n            cur = dummy.next\n            while cur:\n                left = cur\n                right = self.split(left, size)\n                cur = self.split(right, size)\n                tail = self.merge(left, right, tail)\n            size *= 2\n        return dummy.next\n\n    def split(self, head, size):\n        for _ in range(size - 1):\n            if not head:\n                break\n            head = head.next\n        if not head:\n            return None\n        next, head.next = head.next, None\n        return next\n\n    def merge(self, l1, l2, head):\n        cur = head\n        while l1 and l2:\n            if l1.val < l2.val:\n                cur.next, l1 = l1, l1.next\n            else:\n                cur.next, l2 = l2, l2.next\n            cur = cur.next\n        cur.next = l1 if l1 else l2\n        while cur.next:\n            cur = cur.next\n        return cur\n\n```\n\n\n\n递归法，空间复杂度为$O(logn)$\n\n1. **mergesort函数：**\n   - mergesort函数用于合并两个已排序的链表a和b。\n   - 首先，对a和b分别调用sortList函数进行排序。\n   - 创建一个新的头节点head，并使用tail指针指向它，用于构建合并后的链表。\n   - 在while循环中，比较a和b当前节点的值，将较小的节点连接到tail后，并更新相应的指针。\n   - 循环直到a或b其中一个为空，然后将另一个非空的链表直接连接到tail后。\n   - 返回合并后的链表头节点。\n2. **sortList函数：**\n   - sortList函数用于对链表进行归并排序。\n   - 首先检查链表是否为空或只有一个节点，如果是，则直接返回链表。\n   - 使用双指针fast和slow找到链表的中间节点，将链表分为两部分。\n   - 通过递归调用mergesort函数对左右两部分分别进行排序。\n   - 最后，将排序后的两部分合并。\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergesort(self,a,b):\n        a = self.sortList(a)\n        b = self.sortList(b)\n        head = ListNode()\n        tail = head\n        while a or b:\n            if a == None:\n                tail.next = b\n                break\n            elif b == None:\n                tail.next = a\n                break\n            elif a.val > b.val:\n                tail.next = b\n                b = b.next\n            else:\n                tail.next = a\n                a = a.next\n            tail = tail.next\n            tail.next = None\n        return head.next\n            \n\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if head == None:\n            return None\n        if head.next == None:\n            return head\n        fast = head\n        slow = head\n        prev = None\n        while fast:\n            prev = slow\n            fast = fast.next\n            slow = slow.next\n            if fast:\n                fast = fast.next\n        prev.next = None\n        return self.mergesort(head,slow)         \n        \n```\n\n\n\n最后，让我们不受进阶规则的束缚，来一段酣畅淋漓的暴力解：\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        l = []\n        if not head:\n            return head\n        \n        while head:\n            l.append(head.val)\n            head = head.next\n        l.sort()\n        head = ListNode(l[0])\n        pre = head\n        for i in range(1,len(l)):\n            pre.next = ListNode(l[i])\n            pre = pre.next\n        return head\n        \n            \n```\n\n空间复杂度会变成$O(n)$\n\n\n\n### 总结\n\n算法刷题任重而道远，不过既然朋友你都已经学会链表了，快去把力扣里的链表题全部ac了吧！！！！！！！！\n\n","slug":"刷题日记：番外-链表（一）","published":1,"updated":"2024-05-26T17:43:02.612Z","_id":"clwnrkl46001eosw59584bljj","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"链表篇\"><a href=\"#链表篇\" class=\"headerlink\" title=\"链表篇\"></a>链表篇</h3><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在我初学数据结构的时候，如果问我<strong>前期</strong>对初学者压力最大的数据结构是什么，我认为应该是链表。</p>\n<p>前期三大件，顺序表、链表、栈当中，顺序表和栈一般都是结合问题来运用其数据结构的知识来写算法。</p>\n<p>而链表不同，链表的问题一般就在对一个链表做各种操作，从我个人看来，与前二者不同，链表是一个数据结构知识比重占比大于算法知识的数据结构。</p>\n<p>况且，常规的应届生面试题里经常包括一些基本的链表题目。</p>\n<p>因此，本文着重从实践的角度，结合对应的链表题目来发散思考，用以解决绝大多数链表的普通题目。</p>\n<p><strong>编程语言主要还是python</strong></p>\n<h4 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h4><p>对于大多数简单的链表题目，有一个一定得烂熟于心的代码块：<strong>遍历链表</strong>，<strong>删除节点</strong>，<strong>插入节点</strong></p>\n<p>遍历就是让头节点一直往后走，走到尾部，由于改变了head的内容，要注意有时候题目返回值需要提前把head存起来。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26.gif\" alt=\"chrome-capture-2024-4-26\"></p>\n<p>删除节点，如图所示，就是让待删除节点3的前驱节点2指向其后继结点4，在实际的运用当中，一般会直接在待删除节点的前驱节点进行操作。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26%20(1)-17167448925031.gif\" alt=\"chrome-capture-2024-4-26 (1)\"></p>\n<p>插入操作，如图所示，在节点2后插入一个值为5的节点，即让2的后继指向5，5的后继指向原2的后继3</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26%20(2).gif\" alt=\"chrome-capture-2024-4-26 (2)\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#假设定义一个这样的链表，表头指针head</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token comment\">#新建节点</span>\nhead <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nhead<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#链表遍历，在其中增减代码实现局部的额外操作。</span>\n<span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n    head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token comment\">#节点删除:令后继结点等于后继的后继</span>\nhead<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token comment\">#插入节点curr为当前节点，tmp为缓存节点,a为需要插入的节点</span>\ntmp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\ncurr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a\na<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> tmp\n<span class=\"token comment\">#python平行赋值可以不需要tmp</span>\ncurr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">,</span>curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于Python做链表相关的题目，有一点需要理解，就是例如<strong>head</strong>之类的指针只需要理解为链表某一<strong>节点</strong>（此处为头节点）的索引即可。</p>\n<p><strong>好的，现在我们已经掌握了链表的增删改查，现在让我们来解决实际题目吧！</strong></p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/description/\">83. 删除排序链表中的重复元素 - 力扣（LeetCode）</a></p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><strong>思路</strong>：本题给我们的是一个排序链表，也就是说，如果有重复元素，相同元素的节点<strong>一定是相邻的</strong></p>\n<p>例如链表1-1-2-3-4-4-5，我们可以清晰的看到，一旦其有序，重复元素之间必定连续。</p>\n<p>那么就很简单了，直接在遍历链表的时候，检查当前节点和其后继结点的值是否相等，如果相等就将后继结点删除即可。</p>\n<p>理论成立，编程如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span><span class=\"token comment\">#排除空链表</span>\n            <span class=\"token keyword\">return</span> head\n        curr <span class=\"token operator\">=</span> head<span class=\"token comment\">#不直接修改head，head之后要作为返回值</span>\n        <span class=\"token keyword\">while</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#因为我们要和后继节点进行比较，如果不存在后继结点，就没必要管了，这样也能避免空指针问题</span>\n            <span class=\"token keyword\">if</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token comment\">#删除后继</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> \n                curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> head            <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>时间复杂度：$O(n)$</p>\n<p>遍历链表</p>\n<p>空间复杂度：$O(1)$</p>\n<p>直接在原表进行修改</p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/\">82. 删除排序链表中的重复元素 II - 力扣（LeetCode）</a></p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除原始链表中所有重复数字的节点，只留下不同的数字</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><strong>思路</strong>：本题与前一题很像，但是要求我们将全部的重复数字删除干净。</p>\n<p><strong>首先</strong>，想一想还能不能使用原来的判断方式，即比较当前值和后继节点的值。</p>\n<p>很明显是没问题的。</p>\n<p>但我们还可以采取之前的删除方式吗?</p>\n<p>很明显会出现问题：当我们继续从删除完的当前节点进行判断时，由于后继的重复节点已被删除，我们无法判断该节点是否该删除。</p>\n<p>因此，本题我的解决方案是：<strong>使用前驱节点直接删除一大段重复的节点</strong></p>\n<p>理论成立，代码如下。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        curr <span class=\"token operator\">=</span> head\n        dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head\n        pre <span class=\"token operator\">=</span> dummy<span class=\"token comment\">#这个空节点是大部分题解中前置的前驱节点pre的默认写法</span>\n        <span class=\"token keyword\">while</span> curr <span class=\"token keyword\">and</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">while</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">and</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                    curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token comment\">#我们在这里直接让当前节点指针走到相似串的尾部</span>\n                pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token comment\">#直接全部删除</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n            \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>时间复杂度：$O(n)$</p>\n<p>遍历链表，虽然看似是两层循环，但是外层循环的的次数会随内层循环次数改变而改变</p>\n<p>空间复杂度：$O(1)$</p>\n<p>只用了一个空节点，其余直接在原表进行修改</p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p><a href=\"https://leetcode.cn/problems/UHnkqh/description/\">LCR 024. 反转链表 - 力扣（LeetCode）</a></p>\n<p>给定单链表的头节点 <code>head</code> ，请反转链表，并返回反转后的链表的头节点。</p>\n<p><strong>注</strong>：本题思想将可用于下一题</p>\n<p><strong>思路</strong>：用举例的方法比较形象。</p>\n<p>请出我们的链表1&gt;2&gt;3&gt;4,使用什么样的方式，我们才可以把它变成4&gt;3&gt;2&gt;1呢？</p>\n<p>在链表的遍历中，一般我们每次处理的是单个节点和它的后继，有时候需要处理其前驱。</p>\n<p>那么我们可以像栈一样，一层一层的往上迭代，例如2&gt;1,然后再将节点3接到2的前面即3&gt;2&gt;1，以此类推。</p>\n<p>理论成立，开始编程</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        cur<span class=\"token punctuation\">,</span>pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span>\n            cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">,</span>cur <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token triple-quoted-string string\">'''tmp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = tmp\n            '''</span>\n        <span class=\"token keyword\">return</span> pre<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>先建立一个空的前驱节点pre，再将其不断和cur一起往后进行遍历，并且将原本的前驱节点变成当前节点的后继，迭代解决问题。</p>\n<p>时间复杂度：$O(n)$</p>\n<p>遍历链表</p>\n<p>空间复杂度：$O(1)$</p>\n<p>直接修改原链表</p>\n<h3 id=\"第四题\"><a href=\"#第四题\" class=\"headerlink\" title=\"第四题\"></a>第四题</h3><p><a href=\"https://leetcode.cn/problems/aMhZSa/description/\">LCR 027. 回文链表 - 力扣（LeetCode）</a></p>\n<p>给定一个链表的 <strong>头节点</strong> <code>head</code> <strong>，</strong>请判断其是否为回文链表。</p>\n<p>如果一个链表是回文，那么链表节点序列从前往后看和从后往前看是相同的。</p>\n<p><strong>思路</strong>：如果单纯从链表的角度进行思考，这题我会考虑快慢指针。</p>\n<p>快指针一次走两步，慢指针一次一步，到最后慢指针就处于链表的中点处停止了，我们只需要将慢指针开始的链表翻转，然后依次和头节点进行比较即可。</p>\n<p>代码来咯：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        cur<span class=\"token punctuation\">,</span>pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span>\n            cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">,</span>cur <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token triple-quoted-string string\">'''tmp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = tmp\n            '''</span>\n        <span class=\"token keyword\">return</span> pre\n    <span class=\"token comment\">#上面直接拷，该cv时就cv</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        fast <span class=\"token operator\">=</span> head\n        slow <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> fast<span class=\"token punctuation\">:</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">if</span> fast<span class=\"token punctuation\">:</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token comment\">#如果快指针已经空了就没必要了，循环会结束</span>\n        mid <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>reverseList<span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> mid<span class=\"token punctuation\">:</span><span class=\"token comment\">#从mid开始就行，mid是中点，mid空head也到mid了</span>\n            <span class=\"token keyword\">if</span> mid<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            mid <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：$O(n)$</p>\n<p>几个$O(n)$加在一起还是$O(n)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>都是在原表进行修改的</p>\n<p><strong>拓展</strong>：其实真正刷题时，为了争分夺秒，一般会直接导入到数组里，python就更简单一点，列表有切片操作。</p>\n<p>推荐先学习前一种方法，加深对链表的理解，但是大家打争分夺秒的比赛，或者应对期末考试，等级考试直接暴力解就行了。</p>\n<p><strong>列表切片实现</strong>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n            l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> l <span class=\"token operator\">==</span> l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>栈实现：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        tmp <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> tmp<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> head<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>空间复杂度会变成$O(n)$</p>\n<p>因为咱用了其他数据结构来存储嘛。</p>\n<h3 id=\"第五题\"><a href=\"#第五题\" class=\"headerlink\" title=\"第五题\"></a>第五题</h3><p><a href=\"https://leetcode.cn/problems/sort-list/\">148. 排序链表 - 力扣（LeetCode）</a></p>\n<p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</p>\n<p><strong>思考</strong>（这次不是思路了）：排序和枚举作为最基本的算法，看起来好像很简单，但是这道链表题写的难度是中等，实际上，在我看来，链表排序应该是困难题。</p>\n<p>本题的<strong>进阶：</strong>你可以在 <code>O(n log n)</code> 时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p>\n<p>看到这个复杂度，很明显是归并排序…但是比较简单实现归并排序的方法是自顶向下，使用递归，然鹅，递归的空间复杂度往往不是常数级的，也就是说，这一题需要自底向上的迭代法进行归并排序。</p>\n<p>以下是迭代法的常数级别空间复杂度</p>\n<ol>\n<li><strong>sortList函数：</strong><ul>\n<li>如果链表为空或只有一个节点，则直接返回链表。</li>\n<li>首先获取链表的长度。</li>\n<li>创建一个虚拟节点(dummy)作为辅助节点，将其指向头节点。</li>\n<li>设置初始子链表长度为1，然后进入主循环。</li>\n<li>在循环中，不断将链表拆分成长度为size的子链表，然后两两合并这些子链表，直到完成整个链表的排序。</li>\n</ul>\n</li>\n<li><strong>split函数：</strong><ul>\n<li>该函数用于拆分链表，接收一个头节点和一个指定长度，返回拆分后的链表的头节点。</li>\n<li>在循环中，移动指针找到应该截断的位置，然后进行拆分操作。</li>\n</ul>\n</li>\n<li><strong>merge函数：</strong><ul>\n<li>该函数用于合并两个有序链表，接收两个有序链表的头节点和一个合并后链表的头节点，返回合并后的链表的尾节点。</li>\n<li>在循环中，比较两个链表的节点值，将较小的节点连接到合并链表的尾部，直到其中一个链表为空，然后将另一个非空链表连接到合并链表的尾部。</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        <span class=\"token comment\"># 获取链表长度</span>\n        length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        node <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head\n        size <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> size <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">:</span>\n            tail <span class=\"token operator\">=</span> dummy\n            cur <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span>\n                left <span class=\"token operator\">=</span> cur\n                right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n                cur <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n                tail <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span>\n            size <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n        <span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cur <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> l1 <span class=\"token keyword\">and</span> l2<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> l1 <span class=\"token keyword\">if</span> l1 <span class=\"token keyword\">else</span> l2\n        <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> cur\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>递归法，空间复杂度为$O(logn)$</p>\n<ol>\n<li><strong>mergesort函数：</strong><ul>\n<li>mergesort函数用于合并两个已排序的链表a和b。</li>\n<li>首先，对a和b分别调用sortList函数进行排序。</li>\n<li>创建一个新的头节点head，并使用tail指针指向它，用于构建合并后的链表。</li>\n<li>在while循环中，比较a和b当前节点的值，将较小的节点连接到tail后，并更新相应的指针。</li>\n<li>循环直到a或b其中一个为空，然后将另一个非空的链表直接连接到tail后。</li>\n<li>返回合并后的链表头节点。</li>\n</ul>\n</li>\n<li><strong>sortList函数：</strong><ul>\n<li>sortList函数用于对链表进行归并排序。</li>\n<li>首先检查链表是否为空或只有一个节点，如果是，则直接返回链表。</li>\n<li>使用双指针fast和slow找到链表的中间节点，将链表分为两部分。</li>\n<li>通过递归调用mergesort函数对左右两部分分别进行排序。</li>\n<li>最后，将排序后的两部分合并。</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sortList<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n        b <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sortList<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        tail <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> a <span class=\"token keyword\">or</span> b<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> b\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">elif</span> b <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">elif</span> a<span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> b\n                b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a\n                a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            tail <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            \n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        fast <span class=\"token operator\">=</span> head\n        slow <span class=\"token operator\">=</span> head\n        prev <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">while</span> fast<span class=\"token punctuation\">:</span>\n            prev <span class=\"token operator\">=</span> slow\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">if</span> fast<span class=\"token punctuation\">:</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        prev<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>mergesort<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span>slow<span class=\"token punctuation\">)</span>         \n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>最后，让我们不受进阶规则的束缚，来一段酣畅淋漓的暴力解：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        \n        <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n            l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        l<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        pre <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> head\n        \n            <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>空间复杂度会变成$O(n)$</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>算法刷题任重而道远，不过既然朋友你都已经学会链表了，快去把力扣里的链表题全部ac了吧！！！！！！！！</p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"链表篇\"><a href=\"#链表篇\" class=\"headerlink\" title=\"链表篇\"></a>链表篇</h3><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在我初学数据结构的时候，如果问我<strong>前期</strong>对初学者压力最大的数据结构是什么，我认为应该是链表。</p>\n<p>前期三大件，顺序表、链表、栈当中，顺序表和栈一般都是结合问题来运用其数据结构的知识来写算法。</p>\n<p>而链表不同，链表的问题一般就在对一个链表做各种操作，从我个人看来，与前二者不同，链表是一个数据结构知识比重占比大于算法知识的数据结构。</p>\n<p>况且，常规的应届生面试题里经常包括一些基本的链表题目。</p>\n<p>因此，本文着重从实践的角度，结合对应的链表题目来发散思考，用以解决绝大多数链表的普通题目。</p>\n<p><strong>编程语言主要还是python</strong></p>\n<h4 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h4><p>对于大多数简单的链表题目，有一个一定得烂熟于心的代码块：<strong>遍历链表</strong>，<strong>删除节点</strong>，<strong>插入节点</strong></p>\n<p>遍历就是让头节点一直往后走，走到尾部，由于改变了head的内容，要注意有时候题目返回值需要提前把head存起来。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26.gif\" alt=\"chrome-capture-2024-4-26\"></p>\n<p>删除节点，如图所示，就是让待删除节点3的前驱节点2指向其后继结点4，在实际的运用当中，一般会直接在待删除节点的前驱节点进行操作。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26%20(1)-17167448925031.gif\" alt=\"chrome-capture-2024-4-26 (1)\"></p>\n<p>插入操作，如图所示，在节点2后插入一个值为5的节点，即让2的后继指向5，5的后继指向原2的后继3</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgchrome-capture-2024-4-26%20(2).gif\" alt=\"chrome-capture-2024-4-26 (2)\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#假设定义一个这样的链表，表头指针head</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token comment\">#新建节点</span>\nhead <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nhead<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#链表遍历，在其中增减代码实现局部的额外操作。</span>\n<span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n    head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token comment\">#节点删除:令后继结点等于后继的后继</span>\nhead<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token comment\">#插入节点curr为当前节点，tmp为缓存节点,a为需要插入的节点</span>\ntmp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\ncurr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a\na<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> tmp\n<span class=\"token comment\">#python平行赋值可以不需要tmp</span>\ncurr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">,</span>curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于Python做链表相关的题目，有一点需要理解，就是例如<strong>head</strong>之类的指针只需要理解为链表某一<strong>节点</strong>（此处为头节点）的索引即可。</p>\n<p><strong>好的，现在我们已经掌握了链表的增删改查，现在让我们来解决实际题目吧！</strong></p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/description/\">83. 删除排序链表中的重复元素 - 力扣（LeetCode）</a></p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><strong>思路</strong>：本题给我们的是一个排序链表，也就是说，如果有重复元素，相同元素的节点<strong>一定是相邻的</strong></p>\n<p>例如链表1-1-2-3-4-4-5，我们可以清晰的看到，一旦其有序，重复元素之间必定连续。</p>\n<p>那么就很简单了，直接在遍历链表的时候，检查当前节点和其后继结点的值是否相等，如果相等就将后继结点删除即可。</p>\n<p>理论成立，编程如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span><span class=\"token comment\">#排除空链表</span>\n            <span class=\"token keyword\">return</span> head\n        curr <span class=\"token operator\">=</span> head<span class=\"token comment\">#不直接修改head，head之后要作为返回值</span>\n        <span class=\"token keyword\">while</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#因为我们要和后继节点进行比较，如果不存在后继结点，就没必要管了，这样也能避免空指针问题</span>\n            <span class=\"token keyword\">if</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token comment\">#删除后继</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> \n                curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> head            <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>时间复杂度：$O(n)$</p>\n<p>遍历链表</p>\n<p>空间复杂度：$O(1)$</p>\n<p>直接在原表进行修改</p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/\">82. 删除排序链表中的重复元素 II - 力扣（LeetCode）</a></p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除原始链表中所有重复数字的节点，只留下不同的数字</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><strong>思路</strong>：本题与前一题很像，但是要求我们将全部的重复数字删除干净。</p>\n<p><strong>首先</strong>，想一想还能不能使用原来的判断方式，即比较当前值和后继节点的值。</p>\n<p>很明显是没问题的。</p>\n<p>但我们还可以采取之前的删除方式吗?</p>\n<p>很明显会出现问题：当我们继续从删除完的当前节点进行判断时，由于后继的重复节点已被删除，我们无法判断该节点是否该删除。</p>\n<p>因此，本题我的解决方案是：<strong>使用前驱节点直接删除一大段重复的节点</strong></p>\n<p>理论成立，代码如下。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        curr <span class=\"token operator\">=</span> head\n        dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head\n        pre <span class=\"token operator\">=</span> dummy<span class=\"token comment\">#这个空节点是大部分题解中前置的前驱节点pre的默认写法</span>\n        <span class=\"token keyword\">while</span> curr <span class=\"token keyword\">and</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">while</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">and</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                    curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token comment\">#我们在这里直接让当前节点指针走到相似串的尾部</span>\n                pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token comment\">#直接全部删除</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n            \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>时间复杂度：$O(n)$</p>\n<p>遍历链表，虽然看似是两层循环，但是外层循环的的次数会随内层循环次数改变而改变</p>\n<p>空间复杂度：$O(1)$</p>\n<p>只用了一个空节点，其余直接在原表进行修改</p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p><a href=\"https://leetcode.cn/problems/UHnkqh/description/\">LCR 024. 反转链表 - 力扣（LeetCode）</a></p>\n<p>给定单链表的头节点 <code>head</code> ，请反转链表，并返回反转后的链表的头节点。</p>\n<p><strong>注</strong>：本题思想将可用于下一题</p>\n<p><strong>思路</strong>：用举例的方法比较形象。</p>\n<p>请出我们的链表1&gt;2&gt;3&gt;4,使用什么样的方式，我们才可以把它变成4&gt;3&gt;2&gt;1呢？</p>\n<p>在链表的遍历中，一般我们每次处理的是单个节点和它的后继，有时候需要处理其前驱。</p>\n<p>那么我们可以像栈一样，一层一层的往上迭代，例如2&gt;1,然后再将节点3接到2的前面即3&gt;2&gt;1，以此类推。</p>\n<p>理论成立，开始编程</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        cur<span class=\"token punctuation\">,</span>pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span>\n            cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">,</span>cur <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token triple-quoted-string string\">'''tmp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = tmp\n            '''</span>\n        <span class=\"token keyword\">return</span> pre<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>先建立一个空的前驱节点pre，再将其不断和cur一起往后进行遍历，并且将原本的前驱节点变成当前节点的后继，迭代解决问题。</p>\n<p>时间复杂度：$O(n)$</p>\n<p>遍历链表</p>\n<p>空间复杂度：$O(1)$</p>\n<p>直接修改原链表</p>\n<h3 id=\"第四题\"><a href=\"#第四题\" class=\"headerlink\" title=\"第四题\"></a>第四题</h3><p><a href=\"https://leetcode.cn/problems/aMhZSa/description/\">LCR 027. 回文链表 - 力扣（LeetCode）</a></p>\n<p>给定一个链表的 <strong>头节点</strong> <code>head</code> <strong>，</strong>请判断其是否为回文链表。</p>\n<p>如果一个链表是回文，那么链表节点序列从前往后看和从后往前看是相同的。</p>\n<p><strong>思路</strong>：如果单纯从链表的角度进行思考，这题我会考虑快慢指针。</p>\n<p>快指针一次走两步，慢指针一次一步，到最后慢指针就处于链表的中点处停止了，我们只需要将慢指针开始的链表翻转，然后依次和头节点进行比较即可。</p>\n<p>代码来咯：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        cur<span class=\"token punctuation\">,</span>pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span>\n            cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">,</span>cur <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token triple-quoted-string string\">'''tmp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = tmp\n            '''</span>\n        <span class=\"token keyword\">return</span> pre\n    <span class=\"token comment\">#上面直接拷，该cv时就cv</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        fast <span class=\"token operator\">=</span> head\n        slow <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> fast<span class=\"token punctuation\">:</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">if</span> fast<span class=\"token punctuation\">:</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token comment\">#如果快指针已经空了就没必要了，循环会结束</span>\n        mid <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>reverseList<span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> mid<span class=\"token punctuation\">:</span><span class=\"token comment\">#从mid开始就行，mid是中点，mid空head也到mid了</span>\n            <span class=\"token keyword\">if</span> mid<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            mid <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：$O(n)$</p>\n<p>几个$O(n)$加在一起还是$O(n)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>都是在原表进行修改的</p>\n<p><strong>拓展</strong>：其实真正刷题时，为了争分夺秒，一般会直接导入到数组里，python就更简单一点，列表有切片操作。</p>\n<p>推荐先学习前一种方法，加深对链表的理解，但是大家打争分夺秒的比赛，或者应对期末考试，等级考试直接暴力解就行了。</p>\n<p><strong>列表切片实现</strong>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n            l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> l <span class=\"token operator\">==</span> l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>栈实现：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        tmp <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> tmp<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> head<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>空间复杂度会变成$O(n)$</p>\n<p>因为咱用了其他数据结构来存储嘛。</p>\n<h3 id=\"第五题\"><a href=\"#第五题\" class=\"headerlink\" title=\"第五题\"></a>第五题</h3><p><a href=\"https://leetcode.cn/problems/sort-list/\">148. 排序链表 - 力扣（LeetCode）</a></p>\n<p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</p>\n<p><strong>思考</strong>（这次不是思路了）：排序和枚举作为最基本的算法，看起来好像很简单，但是这道链表题写的难度是中等，实际上，在我看来，链表排序应该是困难题。</p>\n<p>本题的<strong>进阶：</strong>你可以在 <code>O(n log n)</code> 时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p>\n<p>看到这个复杂度，很明显是归并排序…但是比较简单实现归并排序的方法是自顶向下，使用递归，然鹅，递归的空间复杂度往往不是常数级的，也就是说，这一题需要自底向上的迭代法进行归并排序。</p>\n<p>以下是迭代法的常数级别空间复杂度</p>\n<ol>\n<li><strong>sortList函数：</strong><ul>\n<li>如果链表为空或只有一个节点，则直接返回链表。</li>\n<li>首先获取链表的长度。</li>\n<li>创建一个虚拟节点(dummy)作为辅助节点，将其指向头节点。</li>\n<li>设置初始子链表长度为1，然后进入主循环。</li>\n<li>在循环中，不断将链表拆分成长度为size的子链表，然后两两合并这些子链表，直到完成整个链表的排序。</li>\n</ul>\n</li>\n<li><strong>split函数：</strong><ul>\n<li>该函数用于拆分链表，接收一个头节点和一个指定长度，返回拆分后的链表的头节点。</li>\n<li>在循环中，移动指针找到应该截断的位置，然后进行拆分操作。</li>\n</ul>\n</li>\n<li><strong>merge函数：</strong><ul>\n<li>该函数用于合并两个有序链表，接收两个有序链表的头节点和一个合并后链表的头节点，返回合并后的链表的尾节点。</li>\n<li>在循环中，比较两个链表的节点值，将较小的节点连接到合并链表的尾部，直到其中一个链表为空，然后将另一个非空链表连接到合并链表的尾部。</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        <span class=\"token comment\"># 获取链表长度</span>\n        length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        node <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head\n        size <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> size <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">:</span>\n            tail <span class=\"token operator\">=</span> dummy\n            cur <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span>\n                left <span class=\"token operator\">=</span> cur\n                right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n                cur <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n                tail <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span>\n            size <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n        <span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cur <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> l1 <span class=\"token keyword\">and</span> l2<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> l1 <span class=\"token keyword\">if</span> l1 <span class=\"token keyword\">else</span> l2\n        <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> cur\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>递归法，空间复杂度为$O(logn)$</p>\n<ol>\n<li><strong>mergesort函数：</strong><ul>\n<li>mergesort函数用于合并两个已排序的链表a和b。</li>\n<li>首先，对a和b分别调用sortList函数进行排序。</li>\n<li>创建一个新的头节点head，并使用tail指针指向它，用于构建合并后的链表。</li>\n<li>在while循环中，比较a和b当前节点的值，将较小的节点连接到tail后，并更新相应的指针。</li>\n<li>循环直到a或b其中一个为空，然后将另一个非空的链表直接连接到tail后。</li>\n<li>返回合并后的链表头节点。</li>\n</ul>\n</li>\n<li><strong>sortList函数：</strong><ul>\n<li>sortList函数用于对链表进行归并排序。</li>\n<li>首先检查链表是否为空或只有一个节点，如果是，则直接返回链表。</li>\n<li>使用双指针fast和slow找到链表的中间节点，将链表分为两部分。</li>\n<li>通过递归调用mergesort函数对左右两部分分别进行排序。</li>\n<li>最后，将排序后的两部分合并。</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sortList<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n        b <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sortList<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        tail <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> a <span class=\"token keyword\">or</span> b<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> b\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">elif</span> b <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">elif</span> a<span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> b\n                b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a\n                a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            tail <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            \n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        fast <span class=\"token operator\">=</span> head\n        slow <span class=\"token operator\">=</span> head\n        prev <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">while</span> fast<span class=\"token punctuation\">:</span>\n            prev <span class=\"token operator\">=</span> slow\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">if</span> fast<span class=\"token punctuation\">:</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        prev<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>mergesort<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span>slow<span class=\"token punctuation\">)</span>         \n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>最后，让我们不受进阶规则的束缚，来一段酣畅淋漓的暴力解：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        \n        <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n            l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        l<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        pre <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> head\n        \n            <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>空间复杂度会变成$O(n)$</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>算法刷题任重而道远，不过既然朋友你都已经学会链表了，快去把力扣里的链表题全部ac了吧！！！！！！！！</p>\n"},{"title":"毕业设计开发文档记录","date":"2024-04-25T09:14:23.000Z","top_img":"https://s21.ax1x.com/2024/05/20/pkKyIEV.png","cover":"https://s21.ax1x.com/2024/05/20/pkKyIEV.png","_content":"\n#### 部分文件处理代码学习自 羽毛布团大佬 \n\n#### 本文仅记录本人从零开始搭建毕设前后端过程。\n\n\n\n# 整体打样(使用python gradio库)\n\n```python\nindex = gr.Blocks()\nwith index:\n    gr.Markdown(value='''### 本系统基于sovits框架4.1版本\n                毕业设计：基于sovits项目的AI音乐生成与创作系统\n                ''')\n    with gr.Tabs():\n```\n\n\n\n# 训练模块\n\n此处使用的库有\n\n```python\nimport os\nimport gradio as gr\nimport re\n```\n\n\n\n#### 数据装载\n\n```python\n\twith gr.TabItem(\"训练\") as train_tab:   \n             gr.Markdown(value=\"\"\"\n                        ### 模型训练模块\n                         \n                        \"\"\")\n             gr.Markdown(value=\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\")\n             raw_dirs_list=gr.Textbox(label=\"加载原始数据集:\")\n             get_raw_dirs=gr.Button(\"识别数据集\", variant=\"primary\")\n             gr.Markdown(value=\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                         **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\")\n```\n\n其中，\n\n```python\nget_raw_dirs.click(load_raw_dirs,[],[raw_dirs_list])##[1]\n```\n\n绑定点击事件，输入为load_raw_dirs，输出给到raw_dirs_list\n\n\n\n#### load_raw_dirs方法\n\n预定义全局变量\n\n```python\nprecheck_ok = False\nraw_path = \"dataset_raw\"\n```\n\n```python\n#数据集加载[1]\ndef load_raw_dirs():\n    global precheck_ok\n    precheck_ok = False\n    allowed_pattern = re.compile(r'^[a-zA-Z0-9_@#$%^&()_+\\-=\\s\\.]*$')\n    illegal_files = illegal_dataset = []\n    for root, dirs, files in os.walk(raw_path):\n        for dir in dirs:\n            if not allowed_pattern.match(dir):\n                illegal_dataset.append(dir)\n        if illegal_dataset:\n            return f\"数据集文件夹名只能包含数字、字母、下划线，以下文件夹名称非法：\\n{illegal_dataset}\"\n        if root != raw_path:  # 只处理子文件夹内的文件\n            for file in files:\n                if not allowed_pattern.match(file) and file not in illegal_files:\n                    illegal_files.append(file)\n                if not file.lower().endswith('.wav') and file not in illegal_files:\n                    illegal_files.append(file)\n    if illegal_files:\n        return f\"数据集文件名只能包含数字、字母、下划线，且必须是.wav格式，以下文件后缀非法：\\n{illegal_files}\"\n    spk_dirs = [entry.name for entry in os.scandir(raw_path) if entry.is_dir()]\n    if spk_dirs:\n        precheck_ok = True\n        return spk_dirs\n    else:\n        return \"未找到数据集，请检查dataset_raw文件夹\"\n```\n\n使用以下代码显示页面（当完成预处理代码时需要添加队列方法）\n\n```\nindex.launch(server_name=\"127.0.0.1\",inbrowser=True,quiet=True)\n```\n\n\n\n#### 特征编码器与f0预测器选择\n\n预定义全局变量：编码器与f0\n\n```python\nf0_options = [\"crepe\",\"pm\",\"dio\",\"harvest\",\"rmvpe\",\"fcpe\"]\nENCODER_PRETRAIN = {\n    \"vec256l9\": \"pretrain/checkpoint_best_legacy_500.pt\",\n    \"vec768l12\": \"pretrain/checkpoint_best_legacy_500.pt\",\n    \"hubertsoft\": \"pretrain/hubert-soft-0d54a1f4.pt\",\n    \"whisper-ppg\": \"pretrain/medium.pt\",\n    \"cnhubertlarge\": \"pretrain/chinese-hubert-large-fairseq-ckpt.pt\",\n    \"dphubert\": \"pretrain/DPHuBERT-sp0.75.pth\",\n    \"wavlmbase+\": \"pretrain/WavLM-Base+.pt\",\n    \"whisper-ppg-large\": \"pretrain/large-v2.pt\"\n}\n```\n\n\n\n```python\nwith gr.Row():\n                gr.Markdown(value=\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\")\n                gr.Markdown(value=\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\")\nwith gr.Row():\n                branch_selection = gr.Dropdown(label=\"选择训练使用的编码器\", choices=encoder_list, value=\"vec768l12\", interactive=True)\n                f0_predictor_selection = gr.Dropdown(label=\"选择训练使用的f0预测器\", choices=f0_options, value=\"rmvpe\", interactive=True)    \n```\n\n由于编码器是以字典形式存储，故encoder_list获取函数\n\n```python\n##编码器获取[2]\ndef get_available_encoder():\n    # 获取当前目录下的预训练模型文件列表\n    current_pretrain = os.listdir(\"pretrain\")\n    # 为每个预训练模型文件添加路径信息\n    current_pretrain = [(\"pretrain/\" + model) for model in current_pretrain]\n    \n    # 初始化编码器列表\n    encoder_list = []\n    \n    # 遍历所有编码器-预训练模型路径字典中的项\n    for encoder, path in ENCODER_PRETRAIN.items():\n        # 如果某个编码器对应的预训练模型文件在当前目录下可用\n        if path in current_pretrain:\n            # 将该编码器添加到可用编码器列表中\n            encoder_list.append(encoder)\n    \n    return encoder_list\n```\n\n到这里，训练页面应该如图所示\n\n其中，点击识别数据集，能够在文本框看到raw目录下的数据集文件夹名，下方两个下拉框均可进行选取\n\n![1710574509749](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimg1710574509749.png)\n\n![1710574631703](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710574631703.png)\n\n\n\n\n\n\n\n加了个这玩意\n\n![1710578725862](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710578725862.png)\n\n```python\n             gr.Markdown(value=\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\")\n             open_raw=gr.Button(\"打开dataset_raw文件夹\",variant=\"secondary\")\n             raw_dirs_list=gr.Textbox(label=\"加载原始数据集:\")\n             get_raw_dirs=gr.Button(\"识别数据集\", variant=\"primary\")\n```\n\n代码改动如下\n\n```python\n##打开文件夹[4]\ndef open_dataset_raw():\n    folder_path = os.path.join(os.getcwd(), 'dataset_raw')\n    os.system(f'explorer {folder_path}') \n\n\n##绑定事件 在加载数据集一起\n        open_raw.click(open_dataset_raw,[],[])\n```\n\n\n\n#### 数据集预处理\n\n至此，使用的库更新为\n\n```python\nimport os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\n```\n\n\n\n```python\ndef dataset_preprocess(encoder, f0_predictor, use_diff, vol_aug, skip_loudnorm, num_processes,tiny_enable):\n    if precheck_ok:\n        diff_arg = \"--use_diff\" if use_diff else \"\"\n        vol_aug_arg = \"--vol_aug\" if vol_aug else \"\"\n        skip_loudnorm_arg = \"--skip_loudnorm\" if skip_loudnorm else \"\"\n        tiny_arg = \"--tiny\" if tiny_enable else \"\"\n        preprocess_commands = [\n            r\".\\env\\python.exe resample.py %s\" % (skip_loudnorm_arg),\n            r\".\\env\\python.exe preprocess_flist_config.py --speech_encoder %s %s %s\" % (encoder, vol_aug_arg, tiny_arg),\n            r\".\\env\\python.exe preprocess_hubert_f0.py --num_processes %s --f0_predictor %s %s\" % (num_processes ,f0_predictor, diff_arg)\n        ]\n        accumulated_output = \"\"##初始化输出参数\n        ##清空数据集\n        dataset = os.listdir(dataset_dir)##获取文件列表\n        if len(dataset) != 0:\n            for dir in dataset:\n                dataset_spk_dir = os.path.join(dataset_dir,str(dir))\n                if os.path.isdir(dataset_spk_dir):\n                    shutil.rmtree(dataset_spk_dir)\n                    accumulated_output += f\"已删除旧数据集文件: {dir}\\n\"\n        for command in preprocess_commands:\n            try:\n                result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, text=True)\n                accumulated_output += f\"Command(当前命令): {command}, Using Encoder(特征编码器): {encoder}, Using f0 Predictor(f0预测器): {f0_predictor}\\n\"\n                yield accumulated_output, None\n                progress_line = None\n                for line in result.stdout:\n                    if r\"it/s\" in line or r\"s/it\" in line: #防止进度条刷屏\n                        progress_line = line\n                    else:\n                        accumulated_output += line\n                    if progress_line is None:\n                        yield accumulated_output, None\n                    else:\n                        yield accumulated_output + progress_line, None\n                result.communicate()\n            except subprocess.CalledProcessError as e:\n                result = e.output\n                accumulated_output += f\"Error: {result}\\n\"\n                yield accumulated_output, None\n            if progress_line is not None:\n                accumulated_output += progress_line\n            accumulated_output += '-' * 50 + '\\n'\n            yield accumulated_output, None\n            config_path = \"configs/config.json\"\n        with open(config_path, 'r') as f:\n            config = json.load(f)\n        spk_name = config.get('spk', None)\n        yield accumulated_output, gr.Textbox.update(value=spk_name)\n    else:\n        yield \"未识别到数据集，请检查错误信息\", None\n\n```\n\n#### 至此前端排版如下\n\n增加了一些彩色字体\n\n```python\n             with gr.Row():\n                branch_selection = gr.Dropdown(label=\"选择训练使用的编码器\", choices=encoder_list, value=\"vec768l12\", interactive=True)\n                f0_predictor_selection = gr.Dropdown(label=\"选择训练使用的f0预测器\", choices=f0_options, value=\"rmvpe\", interactive=True) \n             with gr.Row():\n                use_diff = gr.Checkbox(label=\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\", value=True) \n             with gr.Row():\n                skip_loudnorm = gr.Checkbox(label=\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\",value=False)\n                num_processes = gr.Slider(label=\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\", minimum=1, maximum=16, value=1, step=1)  \n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red;\">右侧选项仅为vec768l12提供支持。</span>  \n                响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n                TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n                      \"\"\")\n                vol_aug = gr.Checkbox(label=\"响度嵌入/音量增强\", value=False)\n                tiny_enable = gr.Checkbox(label=\"TINY模型 \", value=False)\n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件</span>  \"\"\")\n             with gr.Row():\n                raw_preprocess=gr.Button(\"数据预处理\", variant=\"primary\")\n                regenerate_config_btn=gr.Button(\"重新生成配置文件\", variant=\"primary\")\n             with gr.Row():\n                preprocess_output=gr.Textbox(label=\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\", max_lines=999)\n             with gr.Row():\n                    gr.Markdown(\"预处理与特征处理完成，请检查右侧说话人列表，确认无误后点击写入配置文件\")\n                    speakers=gr.Textbox(label=\"说话人列表\")\n```\n\n由于使用了一个cmd命令行执行的函数，点击事件的绑定以及webui显示修改如下，其中，显示代码需要添加队列方法与对应参数\n\n```\nget_raw_dirs.click(load_raw_dirs,[],[raw_dirs_list])##[1]\nraw_preprocess.click(dataset_preprocess,[branch_selection,f0_predictor_selection, use_diff, vol_aug, skip_loudnorm, num_processes,tiny_enable],[preprocess_output,speakers])\nopen_raw.click(open_dataset_raw,[],[])##[4]      index.queue(concurrency_count=1024,max_size=2048).launch(server_name=\"127.0.0.1\",inbrowser=True,quiet=True)\n\n```\n\n此时界面应该如图所示并且能够唤醒cmd界面进行训练\n\n![1710599401003](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710599401003.png)\n\n增加清空输出模块\n\n```python\n##清理CMD输出\ndef clear_output():\n    return gr.Textbox.update(label=\"清理完毕\",value=\"\")\n\n```\n\n\n\n```python\n        clear_preprocess_output.click(clear_output,[],[preprocess_output])##[5]\n```\n\n此时整个项目前端模板为\n\n```python\n        with gr.TabItem(\"训练\") as train_tab:   \n             gr.Markdown(value=\"\"\"\n                        ### 模型训练模块\n                         \n                        \"\"\")\n             gr.Markdown(value=\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\")\n             open_raw=gr.Button(\"打开dataset_raw文件夹\",variant=\"secondary\")\n             raw_dirs_list=gr.Textbox(label=\"加载原始数据集:\")\n             get_raw_dirs=gr.Button(\"识别数据集\", variant=\"primary\")\n             gr.Markdown(value=\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                         **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\")\n             with gr.Row():\n                gr.Markdown(value=\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\")\n                gr.Markdown(value=\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\")\n             with gr.Row():\n                branch_selection = gr.Dropdown(label=\"选择训练使用的编码器\", choices=encoder_list, value=\"vec768l12\", interactive=True)\n                f0_predictor_selection = gr.Dropdown(label=\"选择训练使用的f0预测器\", choices=f0_options, value=\"rmvpe\", interactive=True) \n             with gr.Row():\n                use_diff = gr.Checkbox(label=\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\", value=True) \n             with gr.Row():\n                skip_loudnorm = gr.Checkbox(label=\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\",value=False)\n                num_processes = gr.Slider(label=\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\", minimum=1, maximum=16, value=1, step=1)  \n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red;\">右侧选项仅为vec768l12提供支持。</span>  \n                响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n                TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n                      \"\"\")\n                vol_aug = gr.Checkbox(label=\"响度嵌入/音量增强\", value=False)\n                tiny_enable = gr.Checkbox(label=\"TINY模型 \", value=False)\n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件</span>  \"\"\")\n             with gr.Row():\n                raw_preprocess=gr.Button(\"数据预处理\", variant=\"primary\")\n                regenerate_config_btn=gr.Button(\"重新生成配置文件\", variant=\"primary\")\n             with gr.Row():\n                preprocess_output=gr.Textbox(label=\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\", max_lines=999)\n             with gr.Row():\n                clear_preprocess_output=gr.Button(\"清空CMD通知\")\n             with gr.Row():\n                    gr.Markdown(\"预处理与特征处理完成，请检查右侧说话人列表，确认无误后进行下一步配置文件与训练\")\n                    speakers=gr.Textbox(label=\"说话人列表\")\n```\n\n重新生成配置文件\n\n```\n##重新生成[5]\ndef regenerate_config(encoder, vol_aug, tiny_enable):\n    if precheck_ok is False:\n        return \"数据集识别失败，请检查报错信息\"\n    vol_aug_arg = \"--vol_aug\" if vol_aug else \"\"\n    tiny_arg = \"--tiny\" if tiny_enable else \"\"\n    cmd = r\".\\env\\python.exe preprocess_flist_config.py --speech_encoder %s %s %s\" % (encoder, vol_aug_arg, tiny_arg)\n    output = \"\"\n    try:\n        result = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, text=True)\n        for line in result.stdout:\n            output += line\n        output += \"Regenerate config file successfully.\"\n    except subprocess.CalledProcessError as e:\n        result = e.output\n        output += f\"Error: {result}\\n\"\n    return output\n\n```\n\n\n\n\n\n#### 训练模块\n\n库需求更新\n\n```python\nimport os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\nimport torch\n```\n\n获取本机GPU信息，有其他GPU的可自行修改GPU名称判断\n\n```python\nimport torch\nngpu=torch.cuda.device_count()\ngpu_infos = []##初始化gpu信息\nif(torch.cuda.is_available() is False or ngpu==0):\n    check_gpu = False\nelse:\n    check_gpu = False\n    for i in range(ngpu):\n        gpu_name = torch.cuda.get_device_name(i)\n        if(\"MX\" in gpu_name):\n            continue\n        if(\"RTX\" in gpu_name.upper() or \"GTX\" in gpu_name.upper() or \"A\" in gpu_name.upper() or \"V\" in gpu_name.upper() or \"T\" in gpu_name.upper() or \"P\" in gpu_name.upper() or \"M4\" in gpu_name.upper()):\n            check_gpu = True\n            gpu_infos.append(\"序号：%s\\tGPU型号:%s\"%(i,gpu_name))\ngpu_info=\"\\n\".join(gpu_infos)if check_gpu is True and len(gpu_infos)>0 else \"GPU不可用或不支持，请检查\"##转换为单列文本，便于后期使用\ngpus=\"-\".join([i[3]for i in gpu_infos])##获取GPU序号信息\n##print(gpus,gpu_info)\n```\n\n去除注释后输出：\n\n![1710669011479](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710669011479.png)\n\n```python\n# 读取用于推断的 CUDA 信息\ncuda = {}  # 用于存储 CUDA 相关信息的字典\nmin_vram = 0  # VRAM 的最小值初始化为 0\n\nif torch.cuda.is_available():\n    # 如果有可用的 CUDA 设备\n    for i in range(torch.cuda.device_count()):\n        # 遍历每个 CUDA 设备\n        current_vram = torch.cuda.get_device_properties(i).total_memory  # 获取当前设备的总显存\n        min_vram = current_vram if current_vram > min_vram else min_vram  # 更新最小显存值\n        device_name = torch.cuda.get_device_properties(i).name  # 获取设备名称\n        cuda[f\"CUDA:{i} {device_name}\"] = f\"cuda:{i}\"  # 将设备信息添加到 cuda 字典中\n\n# 计算总显存并推荐批次大小\ntotal_vram = round(min_vram * 9.31322575e-10) if min_vram != 0 else 0  # 计算总显存，并将其转换为 GB\nauto_batch = total_vram -4 if total_vram <= 12 and total_vram > 0 else total_vram  # 推荐的批次大小\nprint(f\"当前显存：{total_vram} GiB，推荐批次大小：{auto_batch}\")\n\n\n```\n\n当前输出\n\n![1710669593061](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710669593061.png)\n\n检查BF16（30系及以上可用，动态浮点计算加速）\n\n```python\n##检查bf16是否可用\namp_options = [\"fp32\", \"fp16\"]\nif check_gpu:\n    if torch.cuda.is_bf16_supported():\n        amp_options = [\"fp32\", \"fp16\", \"bf16\"] \n\n```\n\n\n\n检查编码器信息\n\n```python\n##查找本地编码器\nvocoder_options = []\nfor dir in os.listdir(\"pretrain\"):\n    if os.path.isdir(os.path.join(\"pretrain\", dir)):\n        if os.path.isfile(os.path.join(\"pretrain\", dir, \"model\")) and os.path.isfile(os.path.join(\"pretrain\", dir, \"config.json\")):\n            vocoder_options.append(dir)\n```\n\n\n\n\n\n配置文件保存模块开发\n\n```python\nimport os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\nimport torch\nimport yaml\n\nsovits_params = {}\ndiff_params = {}\nprecheck_ok = False\nraw_path = \"dataset_raw\"\ndataset_dir = \"dataset/44k\"\ndefault_settings_file = \"defset.yaml\"\nclass Cfg:\n    def __init__(self, path, type):\n        \"\"\"\n        初始化配置对象。\n\n        Args:\n            path (str): 配置文件的路径。\n            type (str): 配置文件的类型 (\"json\" 或 \"yaml\")。\n        \"\"\"\n        self.path = path\n        self.type = type\n    \n    def read(self):\n        \"\"\"\n        从文件中读取配置数据。\n\n        Returns:\n            dict: 将配置文件的内容作为字典返回。\n        \"\"\"\n        if self.type == \"json\":\n            with open(self.path, 'r') as f:\n                return json.load(f)\n        if self.type == \"yaml\":\n            with open(self.path, 'r') as f:\n                return yaml.safe_load(f)\n    \n    def save(self, content):\n        \"\"\"\n        将提供的内容保存到配置文件中。\n\n        Args:\n            content (dict): 要保存到文件中的内容。\n        \"\"\"\n        if self.type == \"json\":\n            with open(self.path, 'w') as f:\n                json.dump(content, f, indent=4)\n        if self.type == \"yaml\":\n            with open(self.path, 'w') as f:\n                yaml.safe_dump(content, f, default_flow_style=False, sort_keys=False)\n\ndef save_default_settings(log_interval,eval_interval,keep_ckpts,batch_size,learning_rate,amp_dtype,all_in_mem,num_workers,cache_all_data,cache_device,diff_amp_dtype,diff_batch_size,diff_lr,diff_interval_log,diff_interval_val,diff_force_save,diff_k_step_max):\n    config_file = Cfg(default_settings_file, \"yaml\")\n    default_settings = config_file.read()\n    default_settings['sovits_params']['log_interval'] = int(log_interval)\n    default_settings['sovits_params']['eval_interval'] = int(eval_interval)\n    default_settings['sovits_params']['keep_ckpts'] = int(keep_ckpts)\n    default_settings['sovits_params']['batch_size'] = int(batch_size)\n    default_settings['sovits_params']['learning_rate'] = float(learning_rate)\n    default_settings['sovits_params']['amp_dtype'] = str(amp_dtype)\n    default_settings['sovits_params']['all_in_mem'] = all_in_mem\n    default_settings['diff_params']['num_workers'] = int(num_workers)\n    default_settings['diff_params']['cache_all_data'] = cache_all_data\n    default_settings['diff_params']['cache_device'] = str(cache_device)\n    default_settings['diff_params']['amp_dtype'] = str(diff_amp_dtype)\n    default_settings['diff_params']['diff_batch_size'] = int(diff_batch_size)\n    default_settings['diff_params']['diff_lr'] = float(diff_lr)\n    default_settings['diff_params']['diff_interval_log'] = int(diff_interval_log)\n    default_settings['diff_params']['diff_interval_val'] = int(diff_interval_val)\n    default_settings['diff_params']['diff_force_save'] = int(diff_force_save)\n    default_settings['diff_params']['diff_k_step_max'] = diff_k_step_max\n    config_file.save(default_settings)\n    return \"成功保存默认配置\"\n\ndef get_default_settings():\n    global sovits_params, diff_params\n    config_file = Cfg(default_settings_file, \"yaml\")\n    default_settings = config_file.read()\n    sovits_params = default_settings['sovits_params']\n    diff_params = default_settings['diff_params']\n    return sovits_params, diff_params\nprint(get_default_settings())\n```\n\n在根目录新建应该defset.yaml，粘贴以下内容\n\n```yaml\nsovits_params:\n  log_interval: 200\n  eval_interval: 800\n  keep_ckpts: 3\n  batch_size: 2\n  learning_rate: 0.0001\n  amp_dtype: fp32\n  all_in_mem: true\ndiff_params:\n  num_workers: 2\n  cache_all_data: true\n  cache_device: cuda\n  amp_dtype: fp32\n  diff_batch_size: 24\n  diff_lr: 0.0002\n  diff_interval_log: 10\n  diff_interval_val: 2000\n  diff_force_save: 10000\n  diff_k_step_max: false\n\n```\n\n输出为![1710747254487](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710747254487.png)\n\n\n\n此时，包含参数如下\n\n```\nimport os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\nimport torch\nimport yaml\n\n\n##一些参数\ndefault_settings_file = \"defset.yaml\"\nworkdir = \"logs/44k\"\ndiff_workdir = \"logs/44k/diffusion\"\nconfig_dir = \"configs/\"\nsovits_params = {}\ndiff_params = {}\nprecheck_ok = False\nraw_path = \"dataset_raw\"\ndataset_dir = \"dataset/44k\"\nf0_options = [\"crepe\",\"pm\",\"dio\",\"harvest\",\"rmvpe\",\"fcpe\"]\nENCODER_PRETRAIN = {\n    \"vec256l9\": \"pretrain/checkpoint_best_legacy_500.pt\",\n    \"vec768l12\": \"pretrain/checkpoint_best_legacy_500.pt\",\n    \"hubertsoft\": \"pretrain/hubert-soft-0d54a1f4.pt\",\n    \"whisper-ppg\": \"pretrain/medium.pt\",\n    \"cnhubertlarge\": \"pretrain/chinese-hubert-large-fairseq-ckpt.pt\",\n    \"dphubert\": \"pretrain/DPHuBERT-sp0.75.pth\",\n    \"wavlmbase+\": \"pretrain/WavLM-Base+.pt\",\n    \"whisper-ppg-large\": \"pretrain/large-v2.pt\"\n}\n```\n\n配置文件相关代码注释掉print之后放入函数部分\n\n```python\n##函数后添加\nsovits_params, diff_params = get_default_settings()##调用信息\nckpt_read_dir = workdir\nconfig_read_dir = config_dir\ndiff_read_dir = diff_workdir\n```\n\n至此，完成到了模型默认配置的准备\n\n前端代码如下‘\n\n```python\nindex = gr.Blocks()\nwith index:\n    gr.Markdown(value='''### 本系统基于sovits框架4.1版本\n                毕业设计：基于sovits项目的AI音乐生成与创作系统\n                ''')\n    with gr.Tabs():\n        with gr.TabItem('音频切片预处理工具') as preprocessing_tab:\n             gr.Markdown(value=\"\"\"\n                        ### 预处理模块\n                    \n                        \"\"\")\n        with gr.TabItem(\"训练\") as train_tab:   \n             gr.Markdown(value=\"\"\"\n                        ### 模型训练模块\n                         \n                        \"\"\")\n             gr.Markdown(value=\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\")\n             open_raw=gr.Button(\"打开dataset_raw文件夹\",variant=\"secondary\")\n             raw_dirs_list=gr.Textbox(label=\"加载原始数据集:\")\n             get_raw_dirs=gr.Button(\"识别数据集\", variant=\"primary\")\n             gr.Markdown(value=\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                         **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\")\n             with gr.Row():\n                gr.Markdown(value=\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\")\n                gr.Markdown(value=\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\")\n             with gr.Row():\n                branch_selection = gr.Dropdown(label=\"选择训练使用的编码器\", choices=encoder_list, value=\"vec768l12\", interactive=True)\n                f0_predictor_selection = gr.Dropdown(label=\"选择训练使用的f0预测器\", choices=f0_options, value=\"rmvpe\", interactive=True) \n             with gr.Row():\n                use_diff = gr.Checkbox(label=\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\", value=True) \n             with gr.Row():\n                skip_loudnorm = gr.Checkbox(label=\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\",value=False)\n                num_processes = gr.Slider(label=\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\", minimum=1, maximum=16, value=1, step=1)  \n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red;\">右侧选项仅为vec768l12提供支持。</span>  \n                响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n                TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n                      \"\"\")\n                vol_aug = gr.Checkbox(label=\"响度嵌入/音量增强\", value=False)\n                tiny_enable = gr.Checkbox(label=\"TINY模型 \", value=False)\n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件<span style=\"color:red;\">  \"\"\")\n             with gr.Row():\n                raw_preprocess=gr.Button(\"数据预处理\", variant=\"primary\")\n                regenerate_config_btn=gr.Button(\"重新生成配置文件\", variant=\"primary\")\n             with gr.Row():\n                preprocess_output=gr.Textbox(label=\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\", max_lines=999)\n             with gr.Row():\n                clear_preprocess_output=gr.Button(\"清空CMD通知\")\n             with gr.Row():\n                    gr.Markdown(\"预处理与特征处理完成后，请检查右侧说话人列表，确认无误后进行下一步准备配置文件\")\n                    speakers=gr.Textbox(label=\"说话人列表\")\n             with gr.Accordion(label=\"主模型超参数列表 点击打开 否则按照默认参数训练\",open=False):\n                with gr.Row():\n                    gr.Textbox(label=\"显卡信息\", value=gpu_info)\n                with gr.Row():\n                    chose_gpu = gr.Textbox(label=\"显卡选择，默认0号，多卡用户西文逗号分隔，如0,1,2...\",value=gpus,interactive=True)\n                with gr.Row():\n                    log_interval = gr.Textbox(label=\"日志间隔 即多久输出一次损失日志\",value=sovits_params['log_interval'],interactive=True)\n                    eval_interval = gr.Textbox(label=\"评估间隔 即多久保存一次模型\",value=sovits_params['eval_interval'],interactive=True)\n                    keep_ckpts = gr.Textbox(label=\"保存模型数量 即仅保留最新的N个模型 旧模型会删除，若需要保存过程中的每个模型则设置为0 \",value=3,interactive=True)\n                with gr.Row():\n                    batch_size=gr.Textbox(label=\"batch_size，6G建议1-2，每多2G可尝试+1\", value=auto_batch)\n                    lr = gr.Textbox(label=\"学习率 默认0.0001 若数据集过大或过小可微调，微调范围+-0.0001内\",value=sovits_params['learning_rate'],interactive=True)\n                    amp_dtype = gr.Radio(label=\"浮点类型，默认f32即可，显卡型号较新也可尝试f16\", choices=amp_options, value=sovits_params['amp_dtype'])\n                    all_in_mem=gr.Checkbox(label=\"内存加速，建议打开，数据集将全部加载到内存，避免硬盘io低下影响训练\", value=sovits_params['all_in_mem'])\n             with gr.Accordion(label = \"扩散模型配置文件 点击打开 否则同样默认参数\", open=False):\n                with gr.Row():\n                    diff_num_workers = gr.Number(label=\"num_workers, 设置为0将作为主进程与cpu交互，但是容易出现死锁，仅建议高性能用户改动\", value=diff_params['num_workers'])\n                    diff_k_step_max = gr.Checkbox(label=\"100步深度的浅扩散。加快训练速度并提高模型质量，但无法执行超过100步的浅扩散推理\", value=diff_params['diff_k_step_max'])\n                    diff_cache_all_data = gr.Checkbox(label=\"数据缓存，启用后加快训练速度，关闭后节省显存或内存，减慢训练速度\", value=diff_params['cache_all_data'])\n                    diff_cache_device = gr.Radio(label=\"缓存硬件：需开启数据缓存，建议使用cuda/gpu显存加速\", choices=[\"cuda\",\"cpu\"], value=diff_params['cache_device'])\n                    diff_amp_dtype = gr.Radio(label=\"浮点类型，默认f32，较新的显卡可选f16提速\", choices=[\"fp32\",\"fp16\"], value=diff_params['amp_dtype'])\n                with gr.Row():\n                    diff_batch_size = gr.Number(label=\"batch_size，数值尽量不超过数据集1/4，6G建议24左右，显存越大可适当增大\", value=diff_params['diff_batch_size'])\n                    diff_lr = gr.Number(label=\"学习率 建议仅+-0.0001范围内微调\", value=diff_params['diff_lr'])\n                    diff_interval_log = gr.Number(label=\"日志间隔\", value = diff_params['diff_interval_log'])\n                    diff_interval_val = gr.Number(label=\"验证间隔  不建议过低 建议1000+\", value=diff_params['diff_interval_val'])\n                    diff_force_save = gr.Number(label=\"强制保留模型，该步数倍数保存的模型会被保留，其余会被删除。设置为与验证步数相同的值则每个模型都会被保留\", value=diff_params['diff_force_save'])\n             with gr.Row():\n                save_params=gr.Button(\"保存为默认设置\", variant=\"primary\")\n                write_config=gr.Button(\"写入配置文件\", variant=\"primary\")\n             write_config_output=gr.Textbox(label=\"输出信息\")\n\n        with gr.TabItem('推理') as inference_tab:\n              gr.Markdown(value=\"\"\"\n                        ### 音频推理模块\n                         \n                        \"\"\")\n        get_raw_dirs.click(load_raw_dirs,[],[raw_dirs_list])##[1]\n        raw_preprocess.click(dataset_preprocess,[branch_selection,f0_predictor_selection, use_diff, vol_aug, skip_loudnorm, num_processes,tiny_enable],[preprocess_output,speakers])\n        open_raw.click(open_dataset_raw,[],[])##[4]\n        clear_preprocess_output.click(clear_output,[],[preprocess_output])##[4.1]\n        regenerate_config_btn.click(regenerate_config,[branch_selection, vol_aug, tiny_enable],[preprocess_output])\n        save_params.click(save_default_settings, [log_interval,eval_interval,keep_ckpts,batch_size,lr,amp_dtype,all_in_mem,diff_num_workers,diff_cache_all_data,diff_cache_device,diff_amp_dtype,diff_batch_size,diff_lr,diff_interval_log,diff_interval_val,diff_force_save,diff_k_step_max], [write_config_output])\n        \n```\n\n\n\n![1710750595175](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710750595175.png)\n\n\n\n接下来添加配置写入函数\n\n```python\ndef config_fn(log_interval, eval_interval, keep_ckpts, batch_size, lr, amp_dtype, all_in_mem, diff_num_workers, diff_cache_all_data, diff_batch_size, diff_lr, diff_interval_log, diff_interval_val, diff_cache_device, diff_amp_dtype, diff_force_save, diff_k_step_max):\n    if amp_dtype == \"fp16\" or amp_dtype == \"bf16\":\n        fp16_run = True\n    else:\n        fp16_run = False\n        amp_dtype = \"fp16\"\n    config_origin = Cfg(\"configs/config.json\", \"json\")\n    diff_config = Cfg(\"configs/diffusion.yaml\", \"yaml\")\n    config_data = config_origin.read()\n    config_data['train']['log_interval'] = int(log_interval)\n    config_data['train']['eval_interval'] = int(eval_interval)\n    config_data['train']['keep_ckpts'] = int(keep_ckpts)\n    config_data['train']['batch_size'] = int(batch_size)\n    config_data['train']['learning_rate'] = float(lr)\n    config_data['train']['fp16_run'] = fp16_run\n    config_data['train']['half_type'] = str(amp_dtype)\n    config_data['train']['all_in_mem'] = all_in_mem\n    config_origin.save(config_data)\n    diff_config_data = diff_config.read()\n    diff_config_data['train']['num_workers'] = int(diff_num_workers)\n    diff_config_data['train']['cache_all_data'] = diff_cache_all_data\n    diff_config_data['train']['batch_size'] = int(diff_batch_size)\n    diff_config_data['train']['lr'] = float(diff_lr)\n    diff_config_data['train']['interval_log'] = int(diff_interval_log)\n    diff_config_data['train']['interval_val'] = int(diff_interval_val)\n    diff_config_data['train']['cache_device'] = str(diff_cache_device)\n    diff_config_data['train']['amp_dtype'] = str(diff_amp_dtype)\n    diff_config_data['train']['interval_force_save'] = int(diff_force_save)\n    diff_config_data['model']['k_step_max'] = 100 if diff_k_step_max else 0\n    diff_config.save(diff_config_data)\n    return \"配置文件写入完成\"\n```\n\n在按键绑定中添加\n\n```python\nwrite_config.click(config_fn,[log_interval, eval_interval, keep_ckpts, batch_size, lr, amp_dtype, all_in_mem, diff_num_workers, diff_cache_all_data, diff_batch_size, diff_lr, diff_interval_log, diff_interval_val, diff_cache_device, diff_amp_dtype, diff_force_save, diff_k_step_max],[write_config_output])\n        \n```\n\n\n\n\n\n#### 启动训练相关\n\n首先是检查数据集是否可用：\n\n由于已知数据集处理后包含npy和pt的编码与f0权重，设置一个函数来检查数据集。\n\n```python\ndef check_dataset(dataset_path):\n    if not os.listdir(dataset_path):\n        return \"该路径下未检测到数据集\"##检测数据集目录是否存在\n    unavailable_dataset = True\n    for root, dirs, files in os.walk(dataset_path):\n        for file in files:\n            if file.endswith('.pt') or file.endswith('.npy'):\n                ##return \"已检查到到数据集\"\n                unavailable_dataset = False\n                break\n    if unavailable_dataset:\n        return \"该目录下未存在一个有效的数据集权重，请检查文件目录是否有pt或者npy的模型文件\"\n    return None\n\n```\n\n接下来是启动训练的函数：分为从0开始和继续训练，由于模型的特殊性，从0 开始需要准备对应的预训练模型（称之为底模），方便模型进行特征学习，不然自己训练底模只能达到五分之一左右的效果。\n\n底模从社区获取，模型路径如下图\n\n![1710989114237](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710989114237.png)\n\n添加备份文件夹 新建\n\n![1710993075567](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710993075567.png)\n\n```python\nbackup_path = 'backup_model'\n```\n\n路径如上\n训练函数：\n\n```python\ndef training(gpu_selection,encoder,tiny_enable):\n    if tiny_enable:\n        encoder = \"\"\n    config_data_cfg = Cfg(\"configs/config.json\", \"json\")\n    config_data = config_data_cfg.read()##调用配置文件信息\n    vol_emb = config_data[\"model\"][\"vol_embedding\"]\n    warn = check_dataset(dataset_dir)\n    if warn is not None:\n        return warn\n    pretain_path = {\n                \"vec256l9\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model\"),\n        \"vec768l12\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/768l12/vol_emb\" if vol_emb else \"pretrained_model/768l12\"),\n        \"vec768l12_tiny\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/tiny/vec768l12_vol_emb\"),\n        \"hubertsoft\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/hubertsoft\"),\n        \"whisper-ppg\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/whisper-ppg\"),\n        \"cnhubertlarge\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/cnhubertlarge\"),\n        \"dphubert\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/dphubert\"),\n        \"wavlmbase+\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/wavlmbase+\"),\n        \"whisper-ppg-large\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/whisper-ppg-large\")\n    }\n    if not encoder in pretain_path:\n        return \"未找到对应编码器底模，请检查编码器是否存在\"\n    D_file,G_file,encoder_path = pretain_path[encoder]\n    D_path = os.path.join(encoder_path,D_file)\n    G_path = os.path.join(encoder_path,G_file)\n    time_stamp = datetime.datetime.now().strftime('%Y_%m_%d_%H_%M')\n    backup_folder = os.path.join(backup_path,time_stamp)\n    output_msg = \"备份已完成，旧模型被保存在%s\" %(backup_folder)\n    if os.listdir(workdir) != ['diffusion']:\n        os.makedirs(new_backup_folder, exist_ok=True)\n        for file in os.listdir(workdir):\n            if file != \"diffusion\":\n                shutil.move(os.path.join(workdir, file), os.path.join(new_backup_folder, file))\n    if os.path.isfile(G_path) and os.path.isfile(D_path):\n        shutil.copy(D_path, os.path.join(workdir, \"D_0.pth\"))\n        shutil.copy(G_path, os.path.join(workdir, \"G_0.pth\"))\n        output_msg += f\"成功装载预训练模型，编码器：{encoder}\\n\"\n    else:\n        output_msg += f\"{encoder}的预训练模型不存在，未装载预训练模型\\n\"\n\n    cmd = r\"set CUDA_VISIBLE_DEVICES=%s && .\\env\\python.exe train.py -c configs/config.json -m 44k\" % (gpu_selection)\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", cmd])\n    output_msg += \"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C\"\n    return output_msg\n```\n\n继续训练函数（多段输出使用output_msg进行自增，单端输出直接return）\n\n```python\ndef continue_training(gpu_selection,encoder):\n    warn = check_dataset(dataset_dir)\n    if warn is not None:\n        return warn\n    file = os.listdir(workdir)\n    # 从工作目录下的所有文件中筛选文件名以'G_'开头且以'.pth'结尾的文件\n    files = [f for f in file if f.startswith('G_') and f.endswith('.pth')]\n    if len(files) == 0:\n        return \"未找到已训练模型，无法继续训练，请检查文件目录或者使用重新开始训练。\"\n    cmd = r\"set CUDA_VISIBLE_DEVICES=%s && .\\env\\python.exe train.py -c configs/config.json -m 44k\" % (gpu_selection)\n    subprocess.Popen([\"cmd\",\"/c\",\"start\",\"cmd\",\"/k\",cmd])\n    return \"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C\"\n\n    \n```\n\n要导入：\n\n```python\nimport datetime\n\n```\n\n此时前端代码添加：\n\n```PYTHON\n             with gr.Row():\n                save_params=gr.Button(\"保存为默认设置\", variant=\"primary\")\n                write_config=gr.Button(\"写入配置文件\", variant=\"primary\")\n             write_config_output=gr.Textbox(label=\"输出信息\")\n             with gr.Row():\n                with gr.Column():\n                    start_train = gr.Button(\"开始训练\",variant='primary')\n                    train_out = gr.Textbox(label=\"训练信息\")\n                with gr.Column():\n                    continue_train = gr.Button(\"继续训练\",variant=\"primary\")\n                    continue_train_out = gr.Textbox(label=\"训练信息\")\n```\n\n按键绑定\n\n```python\n        start_train.click(training,[chose_gpu, branch_selection, tiny_enable],[train_out])\n        continue_train.click(continue_training,[chose_gpu, branch_selection],[continue_train_out])\n```\n\n缝缝补补，改完之后应该可以实现如下效果：\n\n点击开始训练，弹出cmd并且提示loaded checkpoints G0（说明正确加载了预训练模型）\n\n![1711362464630](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711362464630.png)\n\n使用ctrl+c键盘中断，接下来检查继续训练\n\n首先来到logs/44k路径下。删除除了diffusion目录的所有文件（也可以直接覆盖，复制备份文件夹内文件直接粘贴）\n\n![1711363139340](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711363139340.png)\n\n之后将之前备份的模型文件复制过来（只需要G,D各一个再加上配置文件即可，日志文件复制可选，因为可以承接之前的训练输出）\n之后直接点击继续训练即可\n\n![1711365203345](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711365203345.png)\n\n\n\n完成其他几个模型的函数：\n\n```python\ndef kmeans_training(kmeans_gpu):\n    if not os.listdir(dataset_dir):\n        return \"数据集不存在，请检查dataset文件夹\"\n    cmd = r\".\\env\\python.exe cluster/train_cluster.py --gpu\" if kmeans_gpu else r\".\\env\\python.exe cluster/train_cluster.py\"\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", cmd])\n    return \"训练已开始，cpu需要5-10min，无终端输出\"\n\ndef index_training():\n    if not os.listdir(dataset_dir):\n        return \"数据集不存在，请检查dataset文件夹\"\n    cmd = r\".\\env\\python.exe train_index.py -c configs/config.json\"\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", cmd])\n    return \"训练已开始\"\n\ndef diff_training(encoder, k_step_max):\n    if not os.listdir(dataset_dir):\n        return \"数据集不存在，请检查dataset文件夹\"\n    timestamp = datetime.datetime.now().strftime('%Y_%m_%d_%H_%M')\n    new_backup_folder = os.path.join(backup_path, \"diffusion\", str(timestamp))\n    if len(os.listdir(diff_workdir)) != 0:\n        os.makedirs(new_backup_folder, exist_ok=True)\n        for file in os.listdir(diff_workdir):\n            shutil.move(os.path.join(diff_workdir, file), os.path.join(new_backup_folder, file))\n    DIFF_PRETRAIN = {\n        \"768-kstepmax100\": \"pretrained_model/diffusion/768l12/max100/model_0.pt\",\n        \"vec768l12\": \"pretrained_model/diffusion/768l12/model_0.pt\",\n        \"hubertsoft\": \"pretrained_model/diffusion/hubertsoft/model_0.pt\",\n        \"whisper-ppg\": \"pretrained_model/diffusion/whisper-ppg/model_0.pt\"\n    }\n    if encoder not in DIFF_PRETRAIN:\n        return \"该编码器不支持训练扩散模型\"\n    if k_step_max:\n        encoder = \"768-kstepmax100\"\n    diff_pretrained_model = DIFF_PRETRAIN[encoder]\n    shutil.copy(diff_pretrained_model, os.path.join(diff_workdir, \"model_0.pt\"))\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", r\".\\env\\python.exe train_diff.py -c configs/diffusion.yaml\"])\n    output_message = \"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C。\"\n    if encoder == \"768-kstepmax100\":\n        output_message += \"\\n正在进行100步深度的浅扩散训练，已加载底模\"\n    else:\n        output_message += f\"\\n正在进行完整深度的扩散训练，编码器{encoder}\"\n    return output_message\n\ndef diff_continue_training(encoder):\n    if not os.listdir(dataset_dir):\n        return \"数据集不存在，请检查dataset文件夹\"\n    if encoder == \"\":\n        return \"未选择预处理对应的编码器\"\n    all_files = os.listdir(diff_workdir)\n    model_files = [f for f in all_files if f.endswith('.pt')]\n    if len(model_files) == 0:\n        return \"未找到已训练模型，无法继续训练，请检查文件目录或者使用重新开始训练。\"\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", r\".\\env\\python.exe train_diff.py -c configs/diffusion.yaml\"])\n    return \"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C。\"\n```\n\n```python\n             with gr.Accordion(label=\"扩散模型\",open=False):\n                with gr.Row():\n                    with gr.Column():\n                        start_train_diff = gr.Button(\"开始训练\",variant='primary')\n                        train_diff_out = gr.Textbox(label=\"训练信息\")\n                    with gr.Column():\n                        continue_train_diff = gr.Button(\"继续训练\",variant=\"primary\")\n                        continue_train_diff_out = gr.Textbox(label=\"训练信息\")\n                        \n                        \n\n\t\tstart_train_diff.click(diff_training,[branch_selection, diff_k_step_max],[train_diff_out])\n        continue_train_diff.click(diff_continue_training,[branch_selection],[continue_train_diff_out])\n\n```\n\n前端代码与按键绑定如上\n\n此时，浅扩散训练按钮效果如下![1711420592406](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711420592406.png)\n\n\n\n\n\n![1711420657241](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711420657241.png)\n\n\n\n特征模型和聚类模型绑定如下\n\n```python\n        train_index.click(index_training,[],[train_index_out])\n        train_kmeans.click(kmeans_training,[chose_gpu],[train_kmeans_out])\n        \n        \n        #前端如下：\n                        with gr.Row():\n                    with gr.Column():\n                        train_index = gr.Button(\"开始训练特征检索模型\",variant='primary')\n                        train_index_out = gr.Textbox(label=\"训练信息\")\n                    with gr.Column():                                                       \n                        train_kmeans = gr.Button(\"开始训练kmeans聚类模型\",variant=\"primary\")\n                        train_kmeans_out = gr.Textbox(label=\"训练信息\")\n```\n\ntensorboard如下\n\n```python\n             with gr.Row():\n                tensorboard_bth = gr.Button(\"打开tensorboard\",variant=\"primary\")\n                tensorboard_out = gr.Textbox()\n#按钮绑定\n        tensorboard_bth.click(tensorboard_open,[],[tensorboard_out])\n#函数设计\ndef tensorboard_open():\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", r\".\\env\\python.exe -m tensorboard.main --logdir=logs\\44k\"])\n    return \"已打开tensorboard，请复制ip地址浏览器使用\"\n```\n\n至此，训练模块制作完成，开始制作推理模块\n\n\n\n### 推理模块\n\n添加定义\n\n```python\nmodel = None\ndebug = False\n\nMODEL_TYPE = {\n    \"vec768l12\": 768,\n    \"vec256l9\": 256,\n    \"hubertsoft\": 256,\n    \"whisper-ppg\": 1024,\n    \"cnhubertlarge\": 1024,\n    \"dphubert\": 768,\n    \"wavlmbase+\": 768,\n    \"whisper-ppg-large\": 1280\n}\n```\n\n添加导入包\n\n```python\nfrom edgetts.tts_voices import SUPPORTED_LANGUAGES\nfrom inference.infer_tool import Svc\nimport soundfile as sf\nimport numpy as np\nimport librosa\nfrom pathlib import Path\n\n```\n\n相关函数\n\n```python\ndef get_file_options(directory, extension):\n    return [file for file in os.listdir(directory) if file.endswith(extension)]\n\ndef option_loader():\n    ckpt_list = [file for file in get_file_options(ckpt_read_dir, \".pth\") if not file.startswith(\"D_\") or file == \"G_0.pth\"]\n    config_list = get_file_options(config_read_dir, \".json\")\n    cluster_list = [\"请选择特征/聚类模型\"] + get_file_options(ckpt_read_dir, \".pt\") + get_file_options(ckpt_read_dir, \".pkl\") # 聚类和特征检索模型\n    diff_list = [\"请选择扩散模型\"] + get_file_options(diff_read_dir, \".pt\")\n    diff_config_list = [\"请选择扩散模型配置\"] + get_file_options(config_read_dir, \".yaml\")\n    return ckpt_list, config_list, cluster_list, diff_list, diff_config_list\n\n# read ckpt list读取模型清单\nckpt_list, config_list, cluster_list, diff_list, diff_config_list = option_loader()\ndef load_model_func(ckpt_name, cluster_name, config_name, enhance, diff_model_name, diff_config_name, only_diffusion, use_spk_mix, using_device, method, speedup, cl_num, vocoder_name):\n    global model\n    \n    # 构建配置文件和模型路径\n    config_path = os.path.join(config_read_dir, config_name) if not only_diffusion else \"configs/config.json\"\n    diff_config_path = os.path.join(config_read_dir, diff_config_name) if diff_config_name != \"未选择扩散模型配置文件\" else \"configs/diffusion.yaml\"\n    ckpt_path = os.path.join(ckpt_read_dir, ckpt_name)\n    cluster_path = os.path.join(ckpt_read_dir, cluster_name)\n    diff_model_path = os.path.join(diff_read_dir, diff_model_name)\n    \n    k_step_max = 1000\n    \n    # 根据是否只加载扩散模型，读取相应的配置文件\n    if not only_diffusion:\n        config = Cfg(config_path, \"json\").read()\n    \n    # 如果存在扩散模型，检查维度是否匹配\n    if diff_model_name != \"未选择扩散模型\":\n        _diff = Cfg(diff_config_path, \"yaml\")\n        _content = _diff.read()\n        diff_spk = _content.get('spk', {})\n        \n        # 检查扩散模型维度是否匹配主模型\n        if not only_diffusion:\n            if _content['data'].get('encoder_out_channels') != config[\"model\"].get('ssl_dim'):\n                return \"扩散模型维度与主模型不匹配，请确保两个模型使用的是同一个编码器\", gr.Dropdown.update(choices=[], value=\"\"), 0, None\n        \n        # 更新扩散模型配置信息\n        _content[\"infer\"][\"speedup\"] = int(speedup)\n        _content[\"infer\"][\"method\"] = str(method)\n        _content[\"vocoder\"][\"ckpt\"] = f\"pretrain/{vocoder_name}/model\"\n        k_step_max = _content[\"model\"].get('k_step_max', 0) if _content[\"model\"].get('k_step_max', 0) != 0 else 1000\n        _diff.save(_content)\n    \n    # 加载模型\n    if not only_diffusion:\n        net = torch.load(ckpt_path, map_location=torch.device('cpu'))\n        \n        # 检查模型维度是否匹配配置\n        emb_dim, model_dim = net[\"model\"].get(\"emb_g.weight\", torch.empty(0, 0)).size()\n        if emb_dim > config[\"model\"][\"n_speakers\"]:\n            return \"模型说话人数量与emb维度不匹配\", gr.Dropdown.update(choices=[], value=\"\"), 0, None\n        if model_dim != config[\"model\"][\"ssl_dim\"]:\n            return \"配置文件与模型不匹配\", gr.Dropdown.update(choices=[], value=\"\"), 0, None\n        \n        encoder = config[\"model\"][\"speech_encoder\"]\n        spk_dict = config.get('spk', {})\n    \n    else:\n        spk_dict = diff_spk\n\n    # 根据设备类型初始化设备\n    device = cuda[using_device] if \"CUDA\" in using_device else using_device\n\n    # 根据输入参数初始化模型\n    model = Svc(ckpt_path, config_path, device=device if device != \"Auto\" else None, cluster_model_path=cluster_path, nsf_hifigan_enhance=enhance, diffusion_model_path=diff_model_path, diffusion_config_path=diff_config_path, shallow_diffusion=diff_model_name != \"no_diff\", only_diffusion=only_diffusion, spk_mix_enable=use_spk_mix, feature_retrieval=cluster_name.endswith(\".pkl\"))\n\n    # 一些额外处理\n    spk_list = list(spk_dict.keys())\n    if enhance:\n        from modules.enhancer import Enhancer\n        model.enhancer = Enhancer('nsf-hifigan', f'pretrain/{vocoder_name}/model', device=model.dev)\n\n    # 根据条件设置 clip 的值\n    clip = 25 if encoder == \"whisper-ppg\" or encoder == \"whisper-ppg-large\" else cl_num\n    device_name = torch.cuda.get_device_properties(model.dev).name if \"cuda\" in str(model.dev) else str(model.dev)\n    sovits_msg = f\"模型被成功加载到了{device_name}上\\n\" if not only_diffusion else \"启用全扩散推理，未加载So-VITS模型\\n\"\n\n    index_or_kmeans = \"特征索引\" if cluster_name.endswith(\".pkl\") else \"聚类模型\"\n    clu_load = \"未加载\" if cluster_name == \"no_clu\" else cluster_name\n    diff_load = \"未加载\" if diff_model_name == \"no_diff\" else f\"{diff_model_name} | 采样器: {method} | 加速倍数：{int(speedup)} | 最大浅扩散步数：{k_step_max} | 声码器： {vocoder_name}\"\n    output_msg = f\"{sovits_msg}{index_or_kmeans}：{clu_load}\\n扩散模型：{diff_load}\"\n\n    return (\n        output_msg,\n        gr.Dropdown.update(choices=spk_list, value=next(iter(spk_dict), \"未检测到音色\")),\n        clip,\n        gr.Slider.update(value=100 if k_step_max > 100 else k_step_max, minimum=speedup, maximum=k_step_max)\n    )\n\ndef refresh_options():\n    # 使用global关键字使这些变量在函数内部被视为全局变量\n    global ckpt_read_dir, config_read_dir, diff_read_dir, current_mode\n    \n    # 根据条件选择要读取的目录\n    ckpt_read_dir = workdir\n    config_read_dir = config_dir\n    diff_read_dir = diff_workdir\n    \n    # 加载选项列表\n    ckpt_list, config_list, cluster_list, diff_list, diff_config_list = option_loader()\n    \n\n    \n    # 更新各个选择框和文本显示\n    return (\n        choice_ckpt.update(choices=ckpt_list),  # 更新ckpt选择框\n        config_choice.update(choices=config_list),  # 更新config选择框\n        cluster_choice.update(choices=cluster_list),  # 更新cluster选择框\n        diff_choice.update(choices=diff_list),  # 更新diff选择框\n        diff_config_choice.update(choices=diff_config_list),  # 更新diff config选择框\n    )\n\n\ndef load_json_encoder(config_choice, choice_ckpt):\n    # 如果没有选择配置文件，则返回相应提示\n    if config_choice == \"未选择配置文件\":\n        return \"自动加载未启用，请手动选择配置文件。\"\n    \n    # 如果没有选择模型，则返回相应提示\n    if choice_ckpt == \"未选择模型\":\n        return \"请先选择模型。\"\n    \n    # 读取配置文件\n    config_file = Cfg(os.path.join(config_read_dir, config_choice), \"json\")\n    config = config_file.read()\n    \n    try:\n        # 检查配置文件中的模型编码器和维度是否匹配\n        config_encoder = config[\"model\"].get(\"speech_encoder\", \"no_encoder\")\n        config_dim = config[\"model\"][\"ssl_dim\"]\n        \n        # 处理旧版本配置文件的自动匹配\n        if config_encoder == \"no_encoder\":\n            config_encoder = config[\"model\"][\"speech_encoder\"] = \"vec256l9\" if config_dim == 256 else \"vec768l12\"\n            config_file.save(config)\n        \n        # 获取正确的模型维度\n        correct_dim = MODEL_TYPE.get(config_encoder, \"unknown\")\n        \n        # 如果模型维度不匹配，则返回相应提示\n        if config_dim != correct_dim:\n            return \"配置文件中指定的编码器与模型维度不匹配。\"\n        \n        # 返回配置文件中的编码器\n        return config_encoder\n    \n    except Exception as e:\n        # 如果出现异常，则返回错误信息\n        return f\"出现错误：{e}\"\n\ndef get_model_info(choice_ckpt):\n    pthfile = os.path.join(ckpt_read_dir, choice_ckpt)\n    \n    # 加载模型，映射到CPU以避免使用GPU内存\n    net = torch.load(pthfile, map_location=torch.device('cpu'))\n    \n    # 获取模型中的说话者嵌入向量\n    spk_emb = net[\"model\"].get(\"emb_g.weight\")\n    \n    # 检查模型是否缺少说话者嵌入向量\n    if spk_emb is None:\n        return \"所选模型缺少emb_g.weight，可能选择了一个底层模型\"\n    \n    # 获取说话者嵌入向量的维度\n    _layer = spk_emb.size(1)\n    \n    # 通过维度查找对应的编码器\n    encoder = [k for k, v in MODEL_TYPE.items() if v == _layer]\n    encoder.sort()\n    \n    # 对特定编码器进行合并处理\n    if encoder == [\"hubertsoft\", \"vec256l9\"]:\n        encoder = [\"vec256l9 / hubertsoft\"]\n    if encoder == [\"cnhubertlarge\", \"whisper-ppg\"]:\n        encoder = [\"whisper-ppg / cnhubertlarge\"]\n    if encoder == [\"dphubert\", \"vec768l12\", \"wavlmbase+\"]:\n        encoder = [\"vec768l12 / dphubert / wavlmbase+\"]\n    \n    return encoder[0]\n\ndef auto_load(choice_ckpt):\n    \n    # 获取模型信息\n    model_output_msg = get_model_info(choice_ckpt)\n    \n    # 初始化变量\n    json_output_msg = \"\"\n    config_choice = \"\"\n    \n    # 获取选择的ckpt文件名，去掉扩展名\n    choice_ckpt_name, _ = os.path.splitext(choice_ckpt)\n    return model_output_msg, \"未选择配置文件\", \"\"\n\ndef auto_load_diff(diff_model):\n\n    return \"未启用扩散配置文件加载\"\n    \n    # 获取目录中所有以.yaml结尾的文件\n    all_diff_config = [yaml for yaml in os.listdir(second_dir) if yaml.endswith(\".yaml\")]\n    \n    # 遍历所有扩散配置文件\n    for config in all_diff_config:\n        config_fname, _ = os.path.splitext(config)\n        diff_fname, _ = os.path.splitext(diff_model)\n        \n        # 比较文件名是否匹配\n        if config_fname == diff_fname:\n            return config\n    \n    # 如果没有找到匹配的配置文件，则返回相应提示\n    return \"未找到匹配的扩散配置文件\"\n\ndef model_empty_cache():\n    global model\n    if model is None:\n        return sid.update(choices = [],value=\"\"),\"没有模型需要卸载!\"\n    else:\n        model.unload_model()\n        model = None\n        torch.cuda.empty_cache()\n        return sid.update(choices = [],value=\"\"),\"模型卸载完毕!\"\n\ndef debug_change():\n    global debug\n    debug = debug_button.value\n\ndef vc_infer(output_format, sid, input_audio, sr, input_audio_path, vc_transform, auto_f0, cluster_ratio, slice_db, \n              noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold,\n              k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment):\n    # 将输入音频转换为浮点数类型，并确保只有一个声道\n    if np.issubdtype(input_audio.dtype, np.integer):\n        input_audio = (input_audio / np.iinfo(input_audio.dtype).max).astype(np.float32)\n    if len(input_audio.shape) > 1:\n        input_audio = librosa.to_mono(input_audio.transpose(1, 0))\n    \n    # 如果音频采样率不是44100Hz，则重新采样为44100Hz\n    if sr != 44100:\n        input_audio = librosa.resample(input_audio, orig_sr=sr, target_sr=44100)\n    \n    # 将预处理后的音频保存为临时文件\n    sf.write(\"temp.wav\", input_audio, 44100, format=\"wav\")\n    \n    # 对临时文件执行声码转换推断\n    _audio = model.slice_inference(\"temp.wav\", sid, vc_transform, slice_db, cluster_ratio, auto_f0, noise_scale,\n                                   pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold,\n                                   k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment)\n    \n    # 清空模型状态\n    model.clear_empty()\n    \n    # 确定输出文件名\n    key = \"auto\" if auto_f0 else f\"{int(vc_transform)}key\"\n    cluster = \"_\" if cluster_ratio == 0 else f\"_{cluster_ratio}_\"\n    isdiffusion = \"sovits_\" if not model.shallow_diffusion else \"sovdiff_\" if model.shallow_diffusion else \"diff_\"\n    \n    # 处理 Gradio 上传的文件路径\n    truncated_basename = Path(input_audio_path).stem[:-6] if Path(input_audio_path).stem[-6:] == \"-0-100\" else Path(input_audio_path).stem\n    output_file_name = f'{truncated_basename}_{sid}_{key}{cluster}{isdiffusion}{f0_predictor}.{output_format}'\n    output_file_path = os.path.join(\"results\", output_file_name)\n    \n    # 如果输出文件已经存在，则在文件名中添加序号以避免覆盖现有文件\n    if os.path.exists(output_file_path):\n        count = 1\n        while os.path.exists(output_file_path):\n            output_file_name = f'{truncated_basename}_{sid}_{key}{cluster}{isdiffusion}{f0_predictor}_{str(count)}.{output_format}'\n            output_file_path = os.path.join(\"results\", output_file_name)\n            count += 1\n    \n    # 将输出音频保存为指定的格式\n    sf.write(output_file_path, _audio, model.target_sample, format=output_format)\n    \n    # 返回输出文件路径\n    return output_file_path\n\n\n\ndef vc_fn(output_format, sid, input_audio, vc_transform, auto_f0, cluster_ratio, slice_db, noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold, k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment, progress=gr.Progress(track_tqdm=True)):\n    global model\n    try:\n        if input_audio is None:\n            return \"你还没有上传音频\", None\n        if model is None:\n            return \"你还没有加载模型\", None\n        if getattr(model, 'cluster_model', None) is None and model.feature_retrieval is False:\n            if cluster_ratio != 0:\n                return \"你还未加载聚类或特征检索模型，无法启用聚类/特征检索混合比例\", None\n        audio, sr = sf.read(input_audio)\n        output_file_path = vc_infer(output_format, sid, audio, sr, input_audio, vc_transform, auto_f0, cluster_ratio, slice_db, noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold, k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment)\n        os.remove(\"temp.wav\")\n        return \"Success\", output_file_path\n    except torch.cuda.OutOfMemoryError as e:\n        raise gr.Error(f\"{e}\\n显存不足，减小batch_size或者更换配置也许可以解决\")\n    except Exception as e:\n        if debug:\n            traceback.print_exc()\n        raise gr.Error(e)\n\ndef tts_fn(_text, _gender, _lang, _rate, _volume, output_format, sid, vc_transform, auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold, k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment,progress=gr.Progress(track_tqdm=True)):\n    global model\n    try:\n        if model is None:\n            return \"你还没有加载模型\", None\n        if getattr(model, 'cluster_model', None) is None and model.feature_retrieval is False:\n            if cluster_ratio != 0:\n                return \"你还未加载聚类或特征检索模型，无法启用聚类/特征检索混合比例\", None\n        _rate = f\"+{int(_rate*100)}%\" if _rate >= 0 else f\"{int(_rate*100)}%\"\n        _volume = f\"+{int(_volume*100)}%\" if _volume >= 0 else f\"{int(_volume*100)}%\"\n        if _lang == \"Auto\":\n            _gender = \"Male\" if _gender == \"男\" else \"Female\"\n            subprocess.run([r\".\\env\\python.exe\", \"./edgetts/tts.py\", _text, _lang, _rate, _volume, _gender])\n        else:\n            subprocess.run([r\".\\env\\python.exe\", \"./edgetts/tts.py\", _text, _lang, _rate, _volume])\n        target_sr = 44100\n        y, sr = librosa.load(\"tts.wav\")\n        resampled_y = librosa.resample(y, orig_sr=sr, target_sr=target_sr)\n        sf.write(\"tts.wav\", resampled_y, target_sr, subtype = \"PCM_16\")\n        input_audio = \"tts.wav\"\n        audio, sr = sf.read(input_audio)\n        output_file_path = vc_infer(output_format, sid, audio, sr, input_audio, vc_transform, auto_f0, cluster_ratio, slice_db, noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold, k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment)\n        #os.remove(\"tts.wav\")\n        return \"Success\", output_file_path\n    except Exception as e:\n        if debug:\n            traceback.print_exc()\n\n```\n\n界面设计\n\n```python\n        with gr.TabItem('推理') as inference_tab:\n            gr.Markdown(value=\"\"\"\n                        ### 音频推理模块\n                         \n                        \"\"\")\n            with gr.Group():\n                with gr.Row():\n                    choice_ckpt = gr.Dropdown(label=\"模型选择\", choices=ckpt_list, value=\"未选择模型\")\n                    model_branch = gr.Textbox(label=\"模型编码器\", placeholder=\"请先选择模型\", interactive=False)\n                \n                with gr.Row():\n                    config_choice = gr.Dropdown(label=\"配置文件\", choices=config_list, value=\"未选择配置文件\")\n                    config_info = gr.Textbox(label=\"配置文件编码器\", placeholder=\"请选择配置文件\")\n                \n                gr.Markdown(value=\"**请检查模型和配置文件的编码器是否匹配**\")\n                \n                with gr.Row():\n                    diff_choice = gr.Dropdown(label=\"（可选）选择扩散模型\", choices=diff_list, value=\"未选择扩散模型\", interactive=True)\n                    diff_config_choice = gr.Dropdown(label=\"扩散模型配置文件\", choices=diff_config_list, value=\"未选择扩散模型配置文件\", interactive=True)\n                \n                with gr.Row():\n                    cluster_choice = gr.Dropdown(label=\"（可选）选择聚类模型/特征检索模型\", choices=cluster_list, value=\"未选择聚类模型/特征检索模型\")\n                    vocoder_choice = gr.Dropdown(label=\"选择声码器\", choices=vocoder_options, value=\"nsf_hifigan\")\n                \n\n                with gr.Row():\n                    enhance = gr.Checkbox(label=\"是否使用NSF_HIFIGAN增强\", value=False)\n                    only_diffusion = gr.Checkbox(label=\"是否使用全扩散推理\", value=False)\n                \n                with gr.Row():\n                    diffusion_method = gr.Dropdown(label=\"扩散模型采样器\", choices=[\"dpm-solver++\",\"dpm-solver\",\"pndm\",\"ddim\",\"unipc\"], value=\"dpm-solver++\")\n                    diffusion_speedup = gr.Number(label=\"扩散加速倍数，默认为10倍\", value=10)\n                \n                using_device = gr.Dropdown(label=\"推理设备，默认为自动选择\", choices=[\"Auto\",*cuda.keys(),\"cpu\"], value=\"Auto\")\n                \n                with gr.Row():\n                    loadckpt = gr.Button(\"加载模型\", variant=\"primary\")\n                    unload = gr.Button(\"卸载模型\", variant=\"primary\")\n                \n                with gr.Row():\n                    model_message = gr.Textbox(label=\"Output Message\")\n                    sid = gr.Dropdown(label=\"So-VITS说话人\", value=\"speaker0\")\n\n                gr.Markdown(\n        value=\"请等待模型加载，大概十多秒钟(取决于硬盘速度)后续不需要重新加载模型\"\n    )\n\n            with gr.Tabs():\n                with gr.TabItem(\"音频上传\"):\n                    with gr.Column():\n                        vc_input = gr.Audio(\n                            label=\"单音频上传\", type=\"filepath\", source=\"upload\"\n                        )\n\n\n                with gr.TabItem(\"文字转语音\"):\n                    gr.Markdown(\n                        \"\"\"\n                        说明：使用edge_tts库生成音频，并转换为模型音色。\n                        \"\"\"\n                    )\n                    text_input = gr.Textbox(\n                        label=\"在此输入需要转译的文字（建议打开自动f0预测）\"\n                    )\n                    with gr.Row():\n                        tts_gender = gr.Radio(\n                            label=\"说话人性别\", choices=[\"男\", \"女\"], value=\"男\"\n                        )\n                        tts_lang = gr.Dropdown(\n                            label=\"选择语言，Auto为根据输入文字自动识别\",\n                            choices=SUPPORTED_LANGUAGES, value=\"Auto\"\n                        )\n                    with gr.Row():\n                        tts_rate = gr.Slider(\n                            label=\"TTS语音变速（倍速相对值）\",\n                            minimum=-1, maximum=3, value=0, step=0.1\n                        )\n                        tts_volume = gr.Slider(\n                            label=\"TTS语音音量（相对值）\",\n                            minimum=-1, maximum=1.5, value=0, step=0.1\n                        )\n\n            with gr.Row():\n                auto_f0 = gr.Checkbox(\n                    label=\"自动f0预测，配合聚类模型f0预测效果更好，会导致变调功能失效\",\n                    value=False\n                )\n                f0_predictor = gr.Radio(\n                    label=\"f0预测器选择（如遇哑音可以更换f0预测器解决，crepe为原F0使用均值滤波器）\",\n                    choices=[\"rmvpe\", \"crepe\"],\n                    value=\"rmvpe\"\n                )\n                cr_threshold = gr.Number(\n                    label=\"F0过滤阈值，只有使用crepe时有效。数值范围从0-1。降低该值可减少跑调概率，但会增加哑音\",\n                    value=0.05\n                )\n\n            with gr.Row():\n                vc_transform = gr.Number(\n                    label=\"变调（整数，可以是正负数，半音数量。升高八度就是12）\",\n                    value=0\n                )\n                cluster_ratio = gr.Number(\n                    label=\"聚类模型/特征检索混合比例，0-1之间，默认为0不启用聚类或特征检索，能提升音色相似度，但会导致咬字下降\",\n                    value=0\n                )\n                k_step = gr.Slider(\n                    label=\"浅扩散步数，必须使用扩散模型才有效，步数越大越接近扩散模型的结果\",\n                    value=100, minimum=1, maximum=1000\n                )\n\n            with gr.Row():\n                output_format = gr.Radio(\n                    label=\"音频输出格式\",\n                    choices=[\"wav\", \"flac\", \"mp3\"],\n                    value=\"wav\"\n                )\n                enhancer_adaptive_key = gr.Number(\n                    label=\"使NSF-HIFIGAN增强器适应更高的音域(单位为半音数)，默认为0\",\n                    value=0\n                )\n                slice_db = gr.Number(label=\"切片阈值\", value=-50)\n                cl_num = gr.Number(\n                    label=\"音频自动切片，0为按默认方式切片，单位为秒/s，显存不足可以设置此处强制切片\",\n                    value=0\n                )\n\n            with gr.Accordion(\"高级设置\", open=False):\n                noise_scale = gr.Number(\n                    label=\"noise_scale 影响音质，默认即可\",\n                    value=0.4\n                )\n                pad_seconds = gr.Number(\n                    label=\"推理音频pad秒数，由于未知原因开头结尾会有异响，pad一小段静音段后就不会出现\",\n                    value=0.5\n                )\n                lg_num = gr.Number(\n                    label=\"两端音频切片的交叉淡入长度，如果自动切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值0，注意，该设置会影响推理速度，单位为秒/s\",\n                    value=1\n                )\n                lgr_num = gr.Number(\n                    label=\"自动音频切片后，需要舍弃每段切片的头尾。该参数设置交叉长度保留的比例，范围0-1，左开右闭\",\n                    value=0.75\n                )\n                second_encoding = gr.Checkbox(\n                    label=\"二次编码，浅扩散前会对原始音频进行二次编码,效果两极分化，默认关闭\",\n                    value=False\n                )\n                loudness_envelope_adjustment = gr.Number(\n                    label=\"输入源响度包络替换输出响度包络融合比例，越靠近1越使用输出响度包络\",\n                    value=0\n                )\n                use_spk_mix = gr.Checkbox(\n                    label=\"动态声线融合，仅提供开关，不建议开启\",\n                    value=False, interactive=False\n                )\n\n            with gr.Row():\n                vc_submit = gr.Button(\"音频转换\", variant=\"primary\")\n                vc_tts_submit = gr.Button(\"文本转语音\", variant=\"primary\")\n            vc_output1 = gr.Textbox(label=\"输出信息\")\n            vc_output2 = gr.Audio(label=\"输出音频\")\n    with gr.Tabs():\n        with gr.Row(variant=\"panel\"):\n            with gr.Column():\n                gr.Markdown(value=\"\"\"\n                * * *\n\n                **调试设置**\n                \"\"\")\n                with gr.Row():\n                    debug_button = gr.Checkbox(label=\"启动Debug，仅在终端运行时有效，会在vscode或者pycharm终端显示详细报错\", value=debug)                \n        debug_button.change(debug_change,[],[])\n       \n\n```\n\n\n\n\n\n按键绑定\n\n```python\n        inference_tab.select(refresh_options,[],[choice_ckpt,config_choice,cluster_choice,diff_choice,diff_config_choice])\n        choice_ckpt.change(auto_load, [choice_ckpt], [model_branch, config_choice, config_info])  \n        config_choice.change(load_json_encoder, [config_choice, choice_ckpt], [config_info])\n        diff_choice.change(auto_load_diff, [diff_choice], [diff_config_choice])\n        #自动装载配置文件\n\n        loadckpt.click(load_model_func,[choice_ckpt,cluster_choice,config_choice,enhance,diff_choice,diff_config_choice,only_diffusion,use_spk_mix,using_device,diffusion_method,diffusion_speedup,cl_num,vocoder_choice],[model_message, sid, cl_num, k_step])\n        unload.click(model_empty_cache, [], [sid, model_message])\n        vc_submit.click(vc_fn, [output_format, sid, vc_input, vc_transform,auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold,k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment], [vc_output1, vc_output2])\n        vc_tts_submit.click(tts_fn, [text_input, tts_gender, tts_lang, tts_rate, tts_volume, output_format, sid, vc_transform,auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold,k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment], [vc_output1, vc_output2])\n        #推理相关按键绑定\n```\n\n在项目工具infer_tool.py内作如下修改\n\n```python\n#添加tqdm\nfrom tqdm import tqdm\n\n#并且在446行 \nfor (slice_tag, data) in audio_data:#改为\nfor (slice_tag, data) in tqdm(audio_data):#用于显示进度条\n```\n\n### 预存安装信息\n\n![1712389123101](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712389141182.png)\n\n![1712484163277](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712484163277.png)-\n\n\n\n![1712482664500](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712482664500.png)\n\n如果您将函数`list_files`的类型注解从`-> list[Path]`修改为没有指定具体类型，即去掉具体类型的注解，那么就不会再触发类型错误。这是因为Python的类型提示是可选的，您可以选择添加或删除它们，对于静态类型检查器而言，如果没有提供类型注解，它将无法对类型进行验证，因此不会再引发类型错误。\n\n因此，如果您考虑删除特定的类型提示是为了避免类型错误，这是一个可行的方法。 但要注意，类型提示的存在可以帮助他人更容易地理解代码，并且在编写大型项目时，类型提示也有助于提高代码的可维护性和可读性。\n\n\n\n```python\nfrom pathlib import Path\nfrom typing import Optional\n\nfrom loguru import logger\nfrom tqdm import tqdm\n\nfrom fap.utils.file import AUDIO_EXTENSIONS, list_files\n\n\ndef length(\n    input_dir: str,\n    recursive: bool = False,\n    visualize: bool = False,\n    long_threshold: Optional[float] = None,\n    short_threshold: Optional[float] = None,\n):\n    \"\"\"\n    Get the length of all audio files in a directory\n    \"\"\"\n\n    import soundfile as sf\n    from matplotlib import pyplot as plt\n\n    input_dir = Path(input_dir)\n    files = list_files(input_dir, AUDIO_EXTENSIONS, recursive=recursive)\n    logger.info(f\"Found {len(files)} files, calculating length\")\n\n    infos = []\n    for file in tqdm(files, desc=\"Collecting infos\"):\n        sound = sf.SoundFile(str(file))\n        infos.append(\n            (\n                len(sound),\n                sound.samplerate,\n                len(sound) / sound.samplerate,\n                file.relative_to(input_dir),\n            )\n        )\n\n    # Duration\n    total_duration = sum(i[2] for i in infos)\n    avg_duration = total_duration / len(infos)\n    min_duration = min(i[2] for i in infos)\n    max_duration = max(i[2] for i in infos)\n    logger.info(f\"Total duration: {total_duration / 3600:.2f} hours\")\n    logger.info(f\"Average duration: {avg_duration:.2f} seconds\")\n    logger.info(f\"Max duration: {max(i[2] for i in infos):.2f} seconds\")\n    logger.info(f\"Min duration: {min(i[2] for i in infos):.2f} seconds\")\n\n    # Too Long\n    if long_threshold is not None:\n        long_files = [i for i in infos if i[2] > float(long_threshold)]\n\n        # sort by duration\n        if long_files:\n            long_files = sorted(long_files, key=lambda x: x[2], reverse=True)\n            logger.warning(\n                f\"Found {len(long_files)} files longer than {long_threshold} seconds\"\n            )\n            for i in [f\"{i[3]}: {i[2]:.2f}\" for i in long_files]:\n                logger.warning(f\"    {i}\")\n\n    # Too Short\n    if short_threshold is not None:\n        short_files = [i for i in infos if i[2] < float(short_threshold)]\n\n        if short_files:\n            short_files = sorted(short_files, key=lambda x: x[2], reverse=False)\n            logger.warning(\n                f\"Found {len(short_files)} files shorter than {short_threshold} seconds\"\n            )\n            for i in [f\"{i[3]}: {i[2]:.2f}\" for i in short_files]:\n                logger.warning(f\"    {i}\")\n\n    # Sample Rate\n    total_samplerate = sum(i[1] for i in infos)\n    avg_samplerate = total_samplerate / len(infos)\n    logger.info(f\"Average samplerate: {avg_samplerate:.2f}\")\n\n    if not visualize:\n        if short_threshold is not None:\n            return len(files), total_duration, avg_duration, min_duration, max_duration, short_files\n        else:\n            return len(files), total_duration, avg_duration, min_duration, max_duration, None\n        \n    # Visualize\n    plt.hist([i[2] for i in infos], bins=100)\n    plt.title(\n        f\"Distribution of audio lengths (Total: {len(infos)} files, {total_duration / 3600:.2f} hours)\"\n    )\n    plt.xlabel(\"Length (seconds)\")\n    plt.ylabel(\"Count\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    length()\n\n```\n\n在第二个版本的代码中，对函数`length`进行了一些修改。参数列表中的`recursive`、`visualize`、`long_threshold`和`short_threshold`现在是可选的，并且都有了默认值。此外，在返回结果的部分也进行了修改。如果`visualize`为`False`，函数会根据`short_threshold`是否为`None`返回不同的结果。在处理过长或过短音频文件时，输出信息的显示也稍微不同，指明了具体发现的长音频文件数或短音频文件数。\n\n需要删除并且修改一下文本内的内容\n\n```python\n# This file is edited from https://github.com/openvpi/audio-slicer/blob/main/slicer2.py\n\nfrom pathlib import Path\nfrom typing import Iterable, Union\n\nimport librosa\nimport numpy as np\nimport soundfile as sf\n\nfrom fish_audio_preprocess.utils.slice_audio import slice_by_max_duration\n\n\ndef merge_short_chunks(chunks, max_duration, rate):\n    merged_chunks = []\n    buffer, length = [], 0\n\n    for chunk in chunks:\n        if length + len(chunk) > max_duration * rate and len(buffer) > 0:\n            merged_chunks.append(np.concatenate(buffer))\n            buffer, length = [], 0\n        else:\n            buffer.append(chunk)\n            length += len(chunk)\n\n    if len(buffer) > 0:\n        merged_chunks.append(np.concatenate(buffer))\n\n    return merged_chunks\n\n\nclass Slicer:\n    def __init__(\n        self,\n        sr: int,\n        threshold: float = -40.0,\n        min_length: int = 5000,\n        min_interval: int = 300,\n        hop_size: int = 10,\n        max_sil_kept: int = 5000,\n    ):\n        if not min_length >= min_interval >= hop_size:\n            raise ValueError(\n                \"The following condition must be satisfied: min_length >= min_interval >= hop_size\"\n            )\n\n        if not max_sil_kept >= hop_size:\n            raise ValueError(\n                \"The following condition must be satisfied: max_sil_kept >= hop_size\"\n            )\n\n        min_interval = sr * min_interval / 1000\n        self.threshold = 10 ** (threshold / 20.0)\n        self.hop_size = round(sr * hop_size / 1000)\n        self.win_size = min(round(min_interval), 4 * self.hop_size)\n        self.min_length = round(sr * min_length / 1000 / self.hop_size)\n        self.min_interval = round(min_interval / self.hop_size)\n        self.max_sil_kept = round(sr * max_sil_kept / 1000 / self.hop_size)\n\n    def _apply_slice(self, waveform, begin, end):\n        if len(waveform.shape) > 1:\n            return waveform[\n                :, begin * self.hop_size : min(waveform.shape[1], end * self.hop_size)\n            ]\n        else:\n            return waveform[\n                begin * self.hop_size : min(waveform.shape[0], end * self.hop_size)\n            ]\n\n    def slice(self, waveform):\n        if len(waveform.shape) > 1:\n            samples = waveform.mean(axis=0)\n        else:\n            samples = waveform\n\n        if samples.shape[0] <= self.min_length:\n            return [waveform]\n\n        rms_list = librosa.feature.rms(\n            y=samples, frame_length=self.win_size, hop_length=self.hop_size\n        ).squeeze(0)\n        sil_tags = []\n        silence_start = None\n        clip_start = 0\n\n        for i, rms in enumerate(rms_list):\n            # Keep looping while frame is silent.\n            if rms < self.threshold:\n                # Record start of silent frames.\n                if silence_start is None:\n                    silence_start = i\n                continue\n\n            # Keep looping while frame is not silent and silence start has not been recorded.\n            if silence_start is None:\n                continue\n\n            # Clear recorded silence start if interval is not enough or clip is too short\n            is_leading_silence = silence_start == 0 and i > self.max_sil_kept\n            need_slice_middle = (\n                i - silence_start >= self.min_interval\n                and i - clip_start >= self.min_length\n            )\n\n            if not is_leading_silence and not need_slice_middle:\n                silence_start = None\n                continue\n\n            # Need slicing. Record the range of silent frames to be removed.\n            if i - silence_start <= self.max_sil_kept:\n                pos = rms_list[silence_start : i + 1].argmin() + silence_start\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos))\n                else:\n                    sil_tags.append((pos, pos))\n\n                clip_start = pos\n            elif i - silence_start <= self.max_sil_kept * 2:\n                pos = rms_list[\n                    i - self.max_sil_kept : silence_start + self.max_sil_kept + 1\n                ].argmin()\n                pos += i - self.max_sil_kept\n                pos_l = (\n                    rms_list[\n                        silence_start : silence_start + self.max_sil_kept + 1\n                    ].argmin()\n                    + silence_start\n                )\n                pos_r = (\n                    rms_list[i - self.max_sil_kept : i + 1].argmin()\n                    + i\n                    - self.max_sil_kept\n                )\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos_r))\n                    clip_start = pos_r\n                else:\n                    sil_tags.append((min(pos_l, pos), max(pos_r, pos)))\n                    clip_start = max(pos_r, pos)\n            else:\n                pos_l = (\n                    rms_list[\n                        silence_start : silence_start + self.max_sil_kept + 1\n                    ].argmin()\n                    + silence_start\n                )\n                pos_r = (\n                    rms_list[i - self.max_sil_kept : i + 1].argmin()\n                    + i\n                    - self.max_sil_kept\n                )\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos_r))\n                else:\n                    sil_tags.append((pos_l, pos_r))\n\n                clip_start = pos_r\n            silence_start = None\n\n        # Deal with trailing silence.\n        total_frames = rms_list.shape[0]\n        if (\n            silence_start is not None\n            and total_frames - silence_start >= self.min_interval\n        ):\n            silence_end = min(total_frames, silence_start + self.max_sil_kept)\n            pos = rms_list[silence_start : silence_end + 1].argmin() + silence_start\n            sil_tags.append((pos, total_frames + 1))\n\n        # Apply and return slices.\n        if len(sil_tags) == 0:\n            return [waveform]\n        else:\n            chunks = []\n\n            if sil_tags[0][0] > 0:\n                chunks.append(self._apply_slice(waveform, 0, sil_tags[0][0]))\n\n            for i in range(len(sil_tags) - 1):\n                chunks.append(\n                    self._apply_slice(waveform, sil_tags[i][1], sil_tags[i + 1][0])\n                )\n\n            if sil_tags[-1][1] < total_frames:\n                chunks.append(\n                    self._apply_slice(waveform, sil_tags[-1][1], total_frames)\n                )\n\n            return chunks\n\n\ndef slice_audio_v2(\n    audio: np.ndarray,\n    rate: int,\n    min_duration: float = 5.0,\n    max_duration: float = 30.0,\n    min_silence_duration: float = 0.3,\n    top_db: int = -40,\n    hop_length: int = 10,\n    max_silence_kept: float = 0.5,\n    merge_short: bool = False,\n) -> Iterable[np.ndarray]:\n    \"\"\"Slice audio by silence\n\n    Args:\n        audio: audio data, in shape (samples, channels)\n        rate: sample rate\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n        merge_short: merge short slices automatically\n\n    Returns:\n        Iterable of sliced audio\n    \"\"\"\n\n    if len(audio) / rate < min_duration:\n        sliced_by_max_duration_chunk = slice_by_max_duration(audio, max_duration, rate)\n        yield from merge_short_chunks(\n            sliced_by_max_duration_chunk, max_duration, rate\n        ) if merge_short else sliced_by_max_duration_chunk\n        return\n\n    slicer = Slicer(\n        sr=rate,\n        threshold=top_db,\n        min_length=min_duration * 1000,\n        min_interval=min_silence_duration * 1000,\n        hop_size=hop_length,\n        max_sil_kept=max_silence_kept * 1000,\n    )\n\n    sliced_audio = slicer.slice(audio)\n    if merge_short:\n        sliced_audio = merge_short_chunks(sliced_audio, max_duration, rate)\n\n    for chunk in sliced_audio:\n        sliced_by_max_duration_chunk = slice_by_max_duration(chunk, max_duration, rate)\n        yield from sliced_by_max_duration_chunk\n\n\ndef slice_audio_file_v2(\n    input_file: Union[str, Path],\n    output_dir: Union[str, Path],\n    min_duration: float = 5.0,\n    max_duration: float = 30.0,\n    min_silence_duration: float = 0.3,\n    top_db: int = -40,\n    hop_length: int = 10,\n    max_silence_kept: float = 0.5,\n    flat_layout: bool = False,\n    merge_short: bool = False,\n) -> None:\n    \"\"\"\n    Slice audio by silence and save to output folder\n\n    Args:\n        input_file: input audio file\n        output_dir: output folder\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n        flat_layout: use flat directory structure\n        merge_short: merge short slices automatically\n    \"\"\"\n\n    output_dir = Path(output_dir)\n\n    audio, rate = librosa.load(str(input_file), sr=None, mono=True)\n    for idx, sliced in enumerate(\n        slice_audio_v2(\n            audio,\n            rate,\n            min_duration=min_duration,\n            max_duration=max_duration,\n            min_silence_duration=min_silence_duration,\n            top_db=top_db,\n            hop_length=hop_length,\n            max_silence_kept=max_silence_kept,\n            merge_short=merge_short,\n        )\n    ):\n        if flat_layout:\n            sf.write(str(output_dir) + f\"_{idx:04d}.wav\", sliced, rate)\n        else:\n            sf.write(str(output_dir / f\"{idx:04d}.wav\"), sliced, rate)\n\n```\n\n修改后代码如下\n\n```python\n# This file is edited from https://github.com/openvpi/audio-slicer/blob/main/slicer2.py\n\nfrom pathlib import Path\nfrom typing import Iterable, Union\n\nimport librosa\nimport numpy as np\nimport soundfile as sf\n\nfrom fish_audio_preprocess.utils.slice_audio import slice_by_max_duration\n\n\nclass Slicer:\n    def __init__(\n        self,\n        sr: int,\n        threshold: float = -40.0,\n        min_length: int = 5000,\n        min_interval: int = 300,\n        hop_size: int = 10,\n        max_sil_kept: int = 5000,\n    ):\n        if not min_length >= min_interval >= hop_size:\n            raise ValueError(\n                \"The following condition must be satisfied: min_length >= min_interval >= hop_size\"\n            )\n\n        if not max_sil_kept >= hop_size:\n            raise ValueError(\n                \"The following condition must be satisfied: max_sil_kept >= hop_size\"\n            )\n\n        min_interval = sr * min_interval / 1000\n        self.threshold = 10 ** (threshold / 20.0)\n        self.hop_size = round(sr * hop_size / 1000)\n        self.win_size = min(round(min_interval), 4 * self.hop_size)\n        self.min_length = round(sr * min_length / 1000 / self.hop_size)\n        self.min_interval = round(min_interval / self.hop_size)\n        self.max_sil_kept = round(sr * max_sil_kept / 1000 / self.hop_size)\n\n    def _apply_slice(self, waveform, begin, end):\n        if len(waveform.shape) > 1:\n            return waveform[\n                :, begin * self.hop_size : min(waveform.shape[1], end * self.hop_size)\n            ]\n        else:\n            return waveform[\n                begin * self.hop_size : min(waveform.shape[0], end * self.hop_size)\n            ]\n\n    def slice(self, waveform):\n        if len(waveform.shape) > 1:\n            samples = waveform.mean(axis=0)\n        else:\n            samples = waveform\n\n        if samples.shape[0] <= self.min_length:\n            return [waveform]\n\n        rms_list = librosa.feature.rms(\n            y=samples, frame_length=self.win_size, hop_length=self.hop_size\n        ).squeeze(0)\n        sil_tags = []\n        silence_start = None\n        clip_start = 0\n\n        for i, rms in enumerate(rms_list):\n            # Keep looping while frame is silent.\n            if rms < self.threshold:\n                # Record start of silent frames.\n                if silence_start is None:\n                    silence_start = i\n                continue\n\n            # Keep looping while frame is not silent and silence start has not been recorded.\n            if silence_start is None:\n                continue\n\n            # Clear recorded silence start if interval is not enough or clip is too short\n            is_leading_silence = silence_start == 0 and i > self.max_sil_kept\n            need_slice_middle = (\n                i - silence_start >= self.min_interval\n                and i - clip_start >= self.min_length\n            )\n\n            if not is_leading_silence and not need_slice_middle:\n                silence_start = None\n                continue\n\n            # Need slicing. Record the range of silent frames to be removed.\n            if i - silence_start <= self.max_sil_kept:\n                pos = rms_list[silence_start : i + 1].argmin() + silence_start\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos))\n                else:\n                    sil_tags.append((pos, pos))\n\n                clip_start = pos\n            elif i - silence_start <= self.max_sil_kept * 2:\n                pos = rms_list[\n                    i - self.max_sil_kept : silence_start + self.max_sil_kept + 1\n                ].argmin()\n                pos += i - self.max_sil_kept\n                pos_l = (\n                    rms_list[\n                        silence_start : silence_start + self.max_sil_kept + 1\n                    ].argmin()\n                    + silence_start\n                )\n                pos_r = (\n                    rms_list[i - self.max_sil_kept : i + 1].argmin()\n                    + i\n                    - self.max_sil_kept\n                )\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos_r))\n                    clip_start = pos_r\n                else:\n                    sil_tags.append((min(pos_l, pos), max(pos_r, pos)))\n                    clip_start = max(pos_r, pos)\n            else:\n                pos_l = (\n                    rms_list[\n                        silence_start : silence_start + self.max_sil_kept + 1\n                    ].argmin()\n                    + silence_start\n                )\n                pos_r = (\n                    rms_list[i - self.max_sil_kept : i + 1].argmin()\n                    + i\n                    - self.max_sil_kept\n                )\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos_r))\n                else:\n                    sil_tags.append((pos_l, pos_r))\n\n                clip_start = pos_r\n            silence_start = None\n\n        # Deal with trailing silence.\n        total_frames = rms_list.shape[0]\n        if (\n            silence_start is not None\n            and total_frames - silence_start >= self.min_interval\n        ):\n            silence_end = min(total_frames, silence_start + self.max_sil_kept)\n            pos = rms_list[silence_start : silence_end + 1].argmin() + silence_start\n            sil_tags.append((pos, total_frames + 1))\n\n        # Apply and return slices.\n        if len(sil_tags) == 0:\n            return [waveform]\n        else:\n            chunks = []\n\n            if sil_tags[0][0] > 0:\n                chunks.append(self._apply_slice(waveform, 0, sil_tags[0][0]))\n\n            for i in range(len(sil_tags) - 1):\n                chunks.append(\n                    self._apply_slice(waveform, sil_tags[i][1], sil_tags[i + 1][0])\n                )\n\n            if sil_tags[-1][1] < total_frames:\n                chunks.append(\n                    self._apply_slice(waveform, sil_tags[-1][1], total_frames)\n                )\n\n            return chunks\n\n\ndef slice_audio_v2(\n    audio: np.ndarray,\n    rate: int,\n    min_duration: float = 5.0,\n    max_duration: float = 30.0,\n    min_silence_duration: float = 0.3,\n    top_db: int = -40,\n    hop_length: int = 10,\n    max_silence_kept: float = 0.5,\n) -> Iterable[np.ndarray]:\n    \"\"\"Slice audio by silence\n\n    Args:\n        audio: audio data, in shape (samples, channels)\n        rate: sample rate\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n\n    Returns:\n        Iterable of sliced audio\n    \"\"\"\n\n    if len(audio) / rate < min_duration:\n        yield from slice_by_max_duration(audio, max_duration, rate)\n        return\n\n    slicer = Slicer(\n        sr=rate,\n        threshold=top_db,\n        min_length=min_duration * 1000,\n        min_interval=min_silence_duration * 1000,\n        hop_size=hop_length,\n        max_sil_kept=max_silence_kept * 1000,\n    )\n\n    for chunk in slicer.slice(audio):\n        yield from slice_by_max_duration(chunk, max_duration, rate)\n\n\ndef slice_audio_file_v2(\n    input_file: Union[str, Path],\n    output_dir: Union[str, Path],\n    min_duration: float = 5.0,\n    max_duration: float = 30.0,\n    min_silence_duration: float = 0.3,\n    top_db: int = -40,\n    hop_length: int = 10,\n    max_silence_kept: float = 0.5,\n) -> None:\n    \"\"\"\n    Slice audio by silence and save to output folder\n\n    Args:\n        input_file: input audio file\n        output_dir: output folder\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n    \"\"\"\n\n    output_dir = Path(output_dir)\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    input_file_name = Path(input_file).stem\n    audio, rate = librosa.load(str(input_file), sr=None, mono=True)\n    for idx, sliced in enumerate(\n        slice_audio_v2(\n            audio,\n            rate,\n            min_duration=min_duration,\n            max_duration=max_duration,\n            min_silence_duration=min_silence_duration,\n            top_db=top_db,\n            hop_length=hop_length,\n            max_silence_kept=max_silence_kept,\n        )\n    ):\n        sf.write(str(output_dir / f\"{input_file_name}_{idx:04d}.wav\"), sliced, rate)\n\n```\n\n\n\n1. \n\n2. *移除了merge_short参数**：原始代码中的`merge_short`参数用于控制是否自动合并短音频片段，我在修改后的代码中将其移除，以简化逻辑。\n\n3. **修改了判定条件**：我将原始代码中对于音频长度小于`min_duration`时的处理逻辑进行了修改。原先在这种情况下会执行合并短片段的操作，而我修改后则直接通过`slice_audio_v2`函数来裁剪音频，而不再合并或限制数量。\n\n4. **删除了返回值**：由于现在裁剪条目的数量不再有限制，所以在函数的最后不再需要返回`None`，因为函数会一直运行直到音频全部被处理完毕。\n\n   二次修改\n\n   ```python\n   file_name_changes = 0\n   current_input_file_name = None\n   #用于进行中文消除\n   def slice_audio_file_v2(\n       input_file: Union[str, Path],\n       output_dir: Union[str, Path],\n       min_duration: float = 5.0,\n       max_duration: float = 30.0,\n       min_silence_duration: float = 0.3,\n       top_db: int = -40,\n       hop_length: int = 10,\n       max_silence_kept: float = 0.5,\n   ) -> None:\n       global file_name_changes\n       global current_input_file_name\n   \n       output_dir = Path(output_dir)\n       output_dir.mkdir(parents=True, exist_ok=True)\n   \n       input_file_name = Path(input_file).stem\n   \n       if input_file_name != current_input_file_name:\n           file_name_changes += 1\n           current_input_file_name = input_file_name\n   \n       audio, rate = librosa.load(str(input_file), sr=None, mono=True)\n       for idx, sliced in enumerate(\n           slice_audio_v2(\n               audio,\n               rate,\n               min_duration=min_duration,\n               max_duration=max_duration,\n               min_silence_duration=min_silence_duration,\n               top_db=top_db,\n               hop_length=hop_length,\n               max_silence_kept=max_silence_kept,\n           )\n       ):\n           sf.write(str(output_dir / f\"{file_name_changes:04d}_{idx:04d}.wav\"), sliced, rate)#输出为对应人声干音的序号_切片在该干音的序号。\n   \n   ```\n\n   定义了一个全局变量，作用是对切片里的中文名进行处理，因为模型不允许中文输入。\n\n   ```python\n   import os\n   import PyInstaller.__main__\n   import tkinter as tk\n   from tkinter import filedialog\n   import subprocess\n   \n   def select_bat_file():\n       root = tk.Tk()\n       root.withdraw()\n       file_path = filedialog.askopenfilename(filetypes=[(\"BAT文件\", \"*.bat\")])\n       return file_path\n   \n   def create_python_script(bat_file):\n       with open('temp_script.py', 'w', encoding='utf-8') as f:\n           f.write('import subprocess\\n')\n           f.write('import tkinter as tk\\n\\n')\n           \n           f.write('# 创建一个关闭cmd进程的函数\\n')\n           f.write('def close_process():\\n')\n           f.write('    subprocess.call(\"taskkill /f /im cmd.exe\", shell=True)\\n')\n           f.write('    exit()\\n\\n')\n           \n           f.write('# 创建GUI窗口\\n')\n           f.write('root = tk.Tk()\\n')\n           f.write('root.title(\"关闭CMD进程\")\\n\\n')\n           \n           f.write('# 创建关闭按钮\\n')\n           f.write('button = tk.Button(root, text=\"关闭CMD进程\", command=close_process)\\n')\n           f.write('button.pack()\\n\\n')\n           \n           f.write('# 使用subprocess调用BAT文件\\n')\n           f.write(f'subprocess.call([\"cmd\", \"/c\", \"{bat_file}\"], shell=True)\\n')\n   \n           f.write('root.mainloop()\\n')\n   \n   def convert_bat_to_exe(bat_file, output_exe_name):\n       create_python_script(bat_file)\n       output_dir = os.path.dirname(bat_file)\n       PyInstaller.__main__.run([\n           '--onefile',\n           # '--noconsole',  # 移除 --noconsole 参数\n           '--distpath=' + output_dir,\n           f'--name={output_exe_name}',\n           'temp_script.py'\n       ])\n       os.remove('temp_script.py')\n       print(\"BAT文件成功转换为EXE文件！\")\n   \n   if __name__ == \"__main__\":\n       bat_file_path = select_bat_file()\n       \n       if bat_file_path.endswith(\".bat\"):\n           output_exe_name = input(\"请输入输出EXE文件的名称：\")\n           convert_bat_to_exe(bat_file_path, output_exe_name)\n       else:\n           print(\"请勾选有效的BAT文件。\")\n   \n   ```\n\n   bat转exe方法\n\n   待转bat如下\n\n   ```powershell\n   @echo off\n   chcp 65001\n   echo ================================ 稍等片刻，系统正在加载 ================================\n   echo =======================================================================================\n   echo ================================ ***请勿关闭本窗口*** ================================\n   echo =======================================================================================\n   echo ================================ ***正在启动，即将自动跳转*** ================================\n   .\\env\\python.exe index.py\n   \n   pause\n   ```\n\n修改实现图形化窗口控制\n\n```python\nimport os\nimport PyInstaller.__main__\nimport tkinter as tk\nfrom tkinter import filedialog\nimport subprocess\nimport threading  # 导入 threading 模块\n\ndef select_bat_file():\n    root = tk.Tk()\n    root.withdraw()\n    file_path = filedialog.askopenfilename(filetypes=[(\"BAT文件\", \"*.bat\")])\n    return file_path\n\ndef create_python_script(bat_file):\n    with open('temp_script.py', 'w', encoding='utf-8') as f:\n        f.write('import subprocess\\n')\n        f.write('import tkinter as tk\\n')\n        f.write('import threading\\n\\n')  # 导入 threading 模块\n        \n        f.write('def close_process():\\n')\n        f.write('    subprocess.call([\"taskkill\", \"/F\", \"/T\", \"/IM\", \"cmd.exe\"], shell=True)\\n')\n        f.write('    exit()\\n\\n')\n\n        f.write('def run_bat(bat_file):\\n')\n        f.write('    script = \"\"\"start /B cmd /c {}\\nexit\"\"\"\\n'.format(bat_file))  # 创建一个批处理脚本\n        f.write('    subprocess.Popen(script, shell=True)\\n\\n')\n        \n        f.write('def create_window():\\n')\n        f.write('    root = tk.Tk()\\n')\n        f.write('    root.title(\"关闭CMD进程\")\\n\\n')\n        \n        f.write('    button = tk.Button(root, text=\"关闭CMD进程\", command=close_process)\\n')\n        f.write('    button.pack()\\n\\n')\n        \n        f.write('    root.mainloop()\\n')\n\n        f.write('bat_file = r\"{}\"\\n'.format(bat_file.replace('\\\\', '\\\\\\\\')))\n        f.write('threading.Thread(target=run_bat, args=(bat_file,)).start()\\n')\n        f.write('create_window()')\n\ndef convert_bat_to_exe(bat_file, output_exe_name):\n    create_python_script(bat_file)\n    output_dir = os.path.dirname(bat_file)\n    PyInstaller.__main__.run([\n        '--onefile',\n        '--noconsole',  # 移除 --noconsole 参数\n        '--distpath=' + output_dir,\n        f'--name={output_exe_name}',\n        'temp_script.py'\n    ])\n    os.remove('temp_script.py')\n    print(\"BAT文件成功转换为EXE文件！\")\n\nif __name__ == \"__main__\":\n    bat_file_path = select_bat_file()\n    \n    if bat_file_path.endswith(\".bat\"):\n        output_exe_name = input(\"请输入输出EXE文件的名称：\")\n        convert_bat_to_exe(bat_file_path, output_exe_name)\n    else:\n        print(\"请勾选有效的BAT文件。\")\n\n```\n\n修改实现输出与重启\n\n```python\nimport os\nimport PyInstaller.__main__\nimport tkinter as tk\nfrom tkinter import filedialog\nimport subprocess\nimport threading\n\ndef select_bat_file():\n    # 创建选择BAT文件的窗口\n    root = tk.Tk()\n    root.withdraw()\n    # 弹出文件对话框并返回选择的BAT文件路径\n    file_path = filedialog.askopenfilename(filetypes=[(\"BAT文件\", \"*.bat\")])\n    return file_path\n\ndef create_python_script(bat_file):\n    with open('temp_script.py', 'w', encoding='utf-8') as f:\n        # 写入Python脚本内容\n        f.write('import subprocess\\n')\n        f.write('import tkinter as tk\\n')\n        f.write('import threading\\n\\n')\n        \n        # 关闭进程的函数\n        f.write('def close_process():\\n')\n        f.write('    # 调用系统命令杀死cmd进程\\n')\n        f.write('    subprocess.call([\"taskkill\", \"/F\", \"/T\", \"/IM\", \"cmd.exe\"], shell=True)\\n')\n        f.write('    # 修改状态标签显示文本\\n')\n        f.write('    status_label.config(text=\"成功关闭 CMD 进程\")\\n')\n        f.write('    # 10秒后清空状态标签\\n')\n        f.write('    root.after(10000, clear_status)\\n\\n')\n\n        # 重启cmd进程的函数\n        f.write('def restart_cmd(bat_file):\\n')\n        f.write('    # 修改状态标签显示文本\\n')\n        f.write('    status_label.config(text=\"正在重启 CMD 进程...\")\\n')\n        f.write('    # 执行BAT文件\\n')\n        f.write('    run_bat(bat_file)\\n')\n\n        # 执行BAT文件的函数\n        f.write('def run_bat(bat_file):\\n')\n        f.write('    # 构建启动BAT文件的命令\\n')\n        f.write('    script = \"\"\"start /B cmd /c {}\\nexit\"\"\"\\n'.format(bat_file))\n        f.write('    # 使用subprocess启动新进程\\n')\n        f.write('    subprocess.Popen(script, shell=True)\\n\\n')\n        \n        # 创建窗口的函数\n        f.write('def create_window():\\n')\n        f.write('    global root\\n')\n        f.write('    global status_label\\n')\n        \n        f.write('    # 创建主窗口\\n')\n        f.write('    root = tk.Tk()\\n')\n        f.write('    root.title(\"关闭和重启 CMD 进程\")\\n\\n')\n        \n        # 创建状态标签并放置在窗口中\n        f.write('    status_label = tk.Label(root, text=\"\", pady=10)\\n')\n        f.write('    status_label.pack()\\n\\n')\n\n        # 创建关闭按钮\n        f.write('    button_close = tk.Button(root, text=\"关闭 CMD 进程\", command=close_process)\\n')\n        f.write('    button_close.pack()\\n\\n')\n\n        # 创建重启标签并放置在窗口中\n        f.write('    restart_label = tk.Label(root, text=\"重新启动 CMD 进程\")\\n')\n        f.write('    restart_label.pack()\\n\\n')\n        \n        # 创建重启按钮\n        f.write('    button_restart = tk.Button(root, text=\"重启 CMD\", command=lambda: restart_cmd(bat_file))\\n')\n        f.write('    button_restart.pack()\\n\\n')\n\n        # 运行窗口程序\n        f.write('    root.mainloop()\\n')\n\n        # 设置BAT文件路径并启动线程执行BAT文件\n        f.write('bat_file = r\"{}\"\\n'.format(bat_file.replace('\\\\', '\\\\\\\\')))\n        f.write('threading.Thread(target=run_bat, args=(bat_file,)).start()\\n')\n        f.write('create_window()')\n\ndef clear_status():\n    # 清空状态标签的文本\n    status_label.config(text=\"\")\n\ndef convert_bat_to_exe(bat_file, output_exe_name):\n    # 创建Python脚本\n    create_python_script(bat_file)\n    # 获取输出目录\n    output_dir = os.path.dirname(bat_file)\n    # 使用PyInstaller转换为EXE文件\n    PyInstaller.__main__.run([\n        '--onefile',\n        '--noconsole',\n        '--distpath=' + output_dir,\n        f'--name={output_exe_name}',\n        'temp_script.py'\n    ])\n    # 删除临时Python脚本文件\n    os.remove('temp_script.py')\n    print(\"BAT文件成功转换为EXE文件！\")\n\nif __name__ == \"__main__\":\n    # 选择BAT文件\n    bat_file_path = select_bat_file()\n    \n    if bat_file_path.endswith(\".bat\"):\n        # 输入输出EXE文件的名称\n        output_exe_name = input(\"请输入输出EXE文件的名称：\")\n        # 转换BAT文件为EXE文件\n        convert_bat_to_exe(bat_file_path, output_exe_name)\n    else:\n        print(\"请勾选有效的BAT文件。\")\n\n```\n\n","source":"_posts/毕业设计开发文档记录.md","raw":"---\ntitle: 毕业设计开发文档记录\ndate: 2024-04-25 17:14:23\ntags: Python\ncategories: 开发教程\ntop_img: https://s21.ax1x.com/2024/05/20/pkKyIEV.png\ncover: https://s21.ax1x.com/2024/05/20/pkKyIEV.png\n---\n\n#### 部分文件处理代码学习自 羽毛布团大佬 \n\n#### 本文仅记录本人从零开始搭建毕设前后端过程。\n\n\n\n# 整体打样(使用python gradio库)\n\n```python\nindex = gr.Blocks()\nwith index:\n    gr.Markdown(value='''### 本系统基于sovits框架4.1版本\n                毕业设计：基于sovits项目的AI音乐生成与创作系统\n                ''')\n    with gr.Tabs():\n```\n\n\n\n# 训练模块\n\n此处使用的库有\n\n```python\nimport os\nimport gradio as gr\nimport re\n```\n\n\n\n#### 数据装载\n\n```python\n\twith gr.TabItem(\"训练\") as train_tab:   \n             gr.Markdown(value=\"\"\"\n                        ### 模型训练模块\n                         \n                        \"\"\")\n             gr.Markdown(value=\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\")\n             raw_dirs_list=gr.Textbox(label=\"加载原始数据集:\")\n             get_raw_dirs=gr.Button(\"识别数据集\", variant=\"primary\")\n             gr.Markdown(value=\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                         **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\")\n```\n\n其中，\n\n```python\nget_raw_dirs.click(load_raw_dirs,[],[raw_dirs_list])##[1]\n```\n\n绑定点击事件，输入为load_raw_dirs，输出给到raw_dirs_list\n\n\n\n#### load_raw_dirs方法\n\n预定义全局变量\n\n```python\nprecheck_ok = False\nraw_path = \"dataset_raw\"\n```\n\n```python\n#数据集加载[1]\ndef load_raw_dirs():\n    global precheck_ok\n    precheck_ok = False\n    allowed_pattern = re.compile(r'^[a-zA-Z0-9_@#$%^&()_+\\-=\\s\\.]*$')\n    illegal_files = illegal_dataset = []\n    for root, dirs, files in os.walk(raw_path):\n        for dir in dirs:\n            if not allowed_pattern.match(dir):\n                illegal_dataset.append(dir)\n        if illegal_dataset:\n            return f\"数据集文件夹名只能包含数字、字母、下划线，以下文件夹名称非法：\\n{illegal_dataset}\"\n        if root != raw_path:  # 只处理子文件夹内的文件\n            for file in files:\n                if not allowed_pattern.match(file) and file not in illegal_files:\n                    illegal_files.append(file)\n                if not file.lower().endswith('.wav') and file not in illegal_files:\n                    illegal_files.append(file)\n    if illegal_files:\n        return f\"数据集文件名只能包含数字、字母、下划线，且必须是.wav格式，以下文件后缀非法：\\n{illegal_files}\"\n    spk_dirs = [entry.name for entry in os.scandir(raw_path) if entry.is_dir()]\n    if spk_dirs:\n        precheck_ok = True\n        return spk_dirs\n    else:\n        return \"未找到数据集，请检查dataset_raw文件夹\"\n```\n\n使用以下代码显示页面（当完成预处理代码时需要添加队列方法）\n\n```\nindex.launch(server_name=\"127.0.0.1\",inbrowser=True,quiet=True)\n```\n\n\n\n#### 特征编码器与f0预测器选择\n\n预定义全局变量：编码器与f0\n\n```python\nf0_options = [\"crepe\",\"pm\",\"dio\",\"harvest\",\"rmvpe\",\"fcpe\"]\nENCODER_PRETRAIN = {\n    \"vec256l9\": \"pretrain/checkpoint_best_legacy_500.pt\",\n    \"vec768l12\": \"pretrain/checkpoint_best_legacy_500.pt\",\n    \"hubertsoft\": \"pretrain/hubert-soft-0d54a1f4.pt\",\n    \"whisper-ppg\": \"pretrain/medium.pt\",\n    \"cnhubertlarge\": \"pretrain/chinese-hubert-large-fairseq-ckpt.pt\",\n    \"dphubert\": \"pretrain/DPHuBERT-sp0.75.pth\",\n    \"wavlmbase+\": \"pretrain/WavLM-Base+.pt\",\n    \"whisper-ppg-large\": \"pretrain/large-v2.pt\"\n}\n```\n\n\n\n```python\nwith gr.Row():\n                gr.Markdown(value=\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\")\n                gr.Markdown(value=\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\")\nwith gr.Row():\n                branch_selection = gr.Dropdown(label=\"选择训练使用的编码器\", choices=encoder_list, value=\"vec768l12\", interactive=True)\n                f0_predictor_selection = gr.Dropdown(label=\"选择训练使用的f0预测器\", choices=f0_options, value=\"rmvpe\", interactive=True)    \n```\n\n由于编码器是以字典形式存储，故encoder_list获取函数\n\n```python\n##编码器获取[2]\ndef get_available_encoder():\n    # 获取当前目录下的预训练模型文件列表\n    current_pretrain = os.listdir(\"pretrain\")\n    # 为每个预训练模型文件添加路径信息\n    current_pretrain = [(\"pretrain/\" + model) for model in current_pretrain]\n    \n    # 初始化编码器列表\n    encoder_list = []\n    \n    # 遍历所有编码器-预训练模型路径字典中的项\n    for encoder, path in ENCODER_PRETRAIN.items():\n        # 如果某个编码器对应的预训练模型文件在当前目录下可用\n        if path in current_pretrain:\n            # 将该编码器添加到可用编码器列表中\n            encoder_list.append(encoder)\n    \n    return encoder_list\n```\n\n到这里，训练页面应该如图所示\n\n其中，点击识别数据集，能够在文本框看到raw目录下的数据集文件夹名，下方两个下拉框均可进行选取\n\n![1710574509749](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimg1710574509749.png)\n\n![1710574631703](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710574631703.png)\n\n\n\n\n\n\n\n加了个这玩意\n\n![1710578725862](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710578725862.png)\n\n```python\n             gr.Markdown(value=\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\")\n             open_raw=gr.Button(\"打开dataset_raw文件夹\",variant=\"secondary\")\n             raw_dirs_list=gr.Textbox(label=\"加载原始数据集:\")\n             get_raw_dirs=gr.Button(\"识别数据集\", variant=\"primary\")\n```\n\n代码改动如下\n\n```python\n##打开文件夹[4]\ndef open_dataset_raw():\n    folder_path = os.path.join(os.getcwd(), 'dataset_raw')\n    os.system(f'explorer {folder_path}') \n\n\n##绑定事件 在加载数据集一起\n        open_raw.click(open_dataset_raw,[],[])\n```\n\n\n\n#### 数据集预处理\n\n至此，使用的库更新为\n\n```python\nimport os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\n```\n\n\n\n```python\ndef dataset_preprocess(encoder, f0_predictor, use_diff, vol_aug, skip_loudnorm, num_processes,tiny_enable):\n    if precheck_ok:\n        diff_arg = \"--use_diff\" if use_diff else \"\"\n        vol_aug_arg = \"--vol_aug\" if vol_aug else \"\"\n        skip_loudnorm_arg = \"--skip_loudnorm\" if skip_loudnorm else \"\"\n        tiny_arg = \"--tiny\" if tiny_enable else \"\"\n        preprocess_commands = [\n            r\".\\env\\python.exe resample.py %s\" % (skip_loudnorm_arg),\n            r\".\\env\\python.exe preprocess_flist_config.py --speech_encoder %s %s %s\" % (encoder, vol_aug_arg, tiny_arg),\n            r\".\\env\\python.exe preprocess_hubert_f0.py --num_processes %s --f0_predictor %s %s\" % (num_processes ,f0_predictor, diff_arg)\n        ]\n        accumulated_output = \"\"##初始化输出参数\n        ##清空数据集\n        dataset = os.listdir(dataset_dir)##获取文件列表\n        if len(dataset) != 0:\n            for dir in dataset:\n                dataset_spk_dir = os.path.join(dataset_dir,str(dir))\n                if os.path.isdir(dataset_spk_dir):\n                    shutil.rmtree(dataset_spk_dir)\n                    accumulated_output += f\"已删除旧数据集文件: {dir}\\n\"\n        for command in preprocess_commands:\n            try:\n                result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, text=True)\n                accumulated_output += f\"Command(当前命令): {command}, Using Encoder(特征编码器): {encoder}, Using f0 Predictor(f0预测器): {f0_predictor}\\n\"\n                yield accumulated_output, None\n                progress_line = None\n                for line in result.stdout:\n                    if r\"it/s\" in line or r\"s/it\" in line: #防止进度条刷屏\n                        progress_line = line\n                    else:\n                        accumulated_output += line\n                    if progress_line is None:\n                        yield accumulated_output, None\n                    else:\n                        yield accumulated_output + progress_line, None\n                result.communicate()\n            except subprocess.CalledProcessError as e:\n                result = e.output\n                accumulated_output += f\"Error: {result}\\n\"\n                yield accumulated_output, None\n            if progress_line is not None:\n                accumulated_output += progress_line\n            accumulated_output += '-' * 50 + '\\n'\n            yield accumulated_output, None\n            config_path = \"configs/config.json\"\n        with open(config_path, 'r') as f:\n            config = json.load(f)\n        spk_name = config.get('spk', None)\n        yield accumulated_output, gr.Textbox.update(value=spk_name)\n    else:\n        yield \"未识别到数据集，请检查错误信息\", None\n\n```\n\n#### 至此前端排版如下\n\n增加了一些彩色字体\n\n```python\n             with gr.Row():\n                branch_selection = gr.Dropdown(label=\"选择训练使用的编码器\", choices=encoder_list, value=\"vec768l12\", interactive=True)\n                f0_predictor_selection = gr.Dropdown(label=\"选择训练使用的f0预测器\", choices=f0_options, value=\"rmvpe\", interactive=True) \n             with gr.Row():\n                use_diff = gr.Checkbox(label=\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\", value=True) \n             with gr.Row():\n                skip_loudnorm = gr.Checkbox(label=\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\",value=False)\n                num_processes = gr.Slider(label=\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\", minimum=1, maximum=16, value=1, step=1)  \n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red;\">右侧选项仅为vec768l12提供支持。</span>  \n                响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n                TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n                      \"\"\")\n                vol_aug = gr.Checkbox(label=\"响度嵌入/音量增强\", value=False)\n                tiny_enable = gr.Checkbox(label=\"TINY模型 \", value=False)\n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件</span>  \"\"\")\n             with gr.Row():\n                raw_preprocess=gr.Button(\"数据预处理\", variant=\"primary\")\n                regenerate_config_btn=gr.Button(\"重新生成配置文件\", variant=\"primary\")\n             with gr.Row():\n                preprocess_output=gr.Textbox(label=\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\", max_lines=999)\n             with gr.Row():\n                    gr.Markdown(\"预处理与特征处理完成，请检查右侧说话人列表，确认无误后点击写入配置文件\")\n                    speakers=gr.Textbox(label=\"说话人列表\")\n```\n\n由于使用了一个cmd命令行执行的函数，点击事件的绑定以及webui显示修改如下，其中，显示代码需要添加队列方法与对应参数\n\n```\nget_raw_dirs.click(load_raw_dirs,[],[raw_dirs_list])##[1]\nraw_preprocess.click(dataset_preprocess,[branch_selection,f0_predictor_selection, use_diff, vol_aug, skip_loudnorm, num_processes,tiny_enable],[preprocess_output,speakers])\nopen_raw.click(open_dataset_raw,[],[])##[4]      index.queue(concurrency_count=1024,max_size=2048).launch(server_name=\"127.0.0.1\",inbrowser=True,quiet=True)\n\n```\n\n此时界面应该如图所示并且能够唤醒cmd界面进行训练\n\n![1710599401003](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710599401003.png)\n\n增加清空输出模块\n\n```python\n##清理CMD输出\ndef clear_output():\n    return gr.Textbox.update(label=\"清理完毕\",value=\"\")\n\n```\n\n\n\n```python\n        clear_preprocess_output.click(clear_output,[],[preprocess_output])##[5]\n```\n\n此时整个项目前端模板为\n\n```python\n        with gr.TabItem(\"训练\") as train_tab:   \n             gr.Markdown(value=\"\"\"\n                        ### 模型训练模块\n                         \n                        \"\"\")\n             gr.Markdown(value=\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\")\n             open_raw=gr.Button(\"打开dataset_raw文件夹\",variant=\"secondary\")\n             raw_dirs_list=gr.Textbox(label=\"加载原始数据集:\")\n             get_raw_dirs=gr.Button(\"识别数据集\", variant=\"primary\")\n             gr.Markdown(value=\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                         **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\")\n             with gr.Row():\n                gr.Markdown(value=\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\")\n                gr.Markdown(value=\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\")\n             with gr.Row():\n                branch_selection = gr.Dropdown(label=\"选择训练使用的编码器\", choices=encoder_list, value=\"vec768l12\", interactive=True)\n                f0_predictor_selection = gr.Dropdown(label=\"选择训练使用的f0预测器\", choices=f0_options, value=\"rmvpe\", interactive=True) \n             with gr.Row():\n                use_diff = gr.Checkbox(label=\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\", value=True) \n             with gr.Row():\n                skip_loudnorm = gr.Checkbox(label=\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\",value=False)\n                num_processes = gr.Slider(label=\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\", minimum=1, maximum=16, value=1, step=1)  \n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red;\">右侧选项仅为vec768l12提供支持。</span>  \n                响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n                TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n                      \"\"\")\n                vol_aug = gr.Checkbox(label=\"响度嵌入/音量增强\", value=False)\n                tiny_enable = gr.Checkbox(label=\"TINY模型 \", value=False)\n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件</span>  \"\"\")\n             with gr.Row():\n                raw_preprocess=gr.Button(\"数据预处理\", variant=\"primary\")\n                regenerate_config_btn=gr.Button(\"重新生成配置文件\", variant=\"primary\")\n             with gr.Row():\n                preprocess_output=gr.Textbox(label=\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\", max_lines=999)\n             with gr.Row():\n                clear_preprocess_output=gr.Button(\"清空CMD通知\")\n             with gr.Row():\n                    gr.Markdown(\"预处理与特征处理完成，请检查右侧说话人列表，确认无误后进行下一步配置文件与训练\")\n                    speakers=gr.Textbox(label=\"说话人列表\")\n```\n\n重新生成配置文件\n\n```\n##重新生成[5]\ndef regenerate_config(encoder, vol_aug, tiny_enable):\n    if precheck_ok is False:\n        return \"数据集识别失败，请检查报错信息\"\n    vol_aug_arg = \"--vol_aug\" if vol_aug else \"\"\n    tiny_arg = \"--tiny\" if tiny_enable else \"\"\n    cmd = r\".\\env\\python.exe preprocess_flist_config.py --speech_encoder %s %s %s\" % (encoder, vol_aug_arg, tiny_arg)\n    output = \"\"\n    try:\n        result = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, text=True)\n        for line in result.stdout:\n            output += line\n        output += \"Regenerate config file successfully.\"\n    except subprocess.CalledProcessError as e:\n        result = e.output\n        output += f\"Error: {result}\\n\"\n    return output\n\n```\n\n\n\n\n\n#### 训练模块\n\n库需求更新\n\n```python\nimport os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\nimport torch\n```\n\n获取本机GPU信息，有其他GPU的可自行修改GPU名称判断\n\n```python\nimport torch\nngpu=torch.cuda.device_count()\ngpu_infos = []##初始化gpu信息\nif(torch.cuda.is_available() is False or ngpu==0):\n    check_gpu = False\nelse:\n    check_gpu = False\n    for i in range(ngpu):\n        gpu_name = torch.cuda.get_device_name(i)\n        if(\"MX\" in gpu_name):\n            continue\n        if(\"RTX\" in gpu_name.upper() or \"GTX\" in gpu_name.upper() or \"A\" in gpu_name.upper() or \"V\" in gpu_name.upper() or \"T\" in gpu_name.upper() or \"P\" in gpu_name.upper() or \"M4\" in gpu_name.upper()):\n            check_gpu = True\n            gpu_infos.append(\"序号：%s\\tGPU型号:%s\"%(i,gpu_name))\ngpu_info=\"\\n\".join(gpu_infos)if check_gpu is True and len(gpu_infos)>0 else \"GPU不可用或不支持，请检查\"##转换为单列文本，便于后期使用\ngpus=\"-\".join([i[3]for i in gpu_infos])##获取GPU序号信息\n##print(gpus,gpu_info)\n```\n\n去除注释后输出：\n\n![1710669011479](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710669011479.png)\n\n```python\n# 读取用于推断的 CUDA 信息\ncuda = {}  # 用于存储 CUDA 相关信息的字典\nmin_vram = 0  # VRAM 的最小值初始化为 0\n\nif torch.cuda.is_available():\n    # 如果有可用的 CUDA 设备\n    for i in range(torch.cuda.device_count()):\n        # 遍历每个 CUDA 设备\n        current_vram = torch.cuda.get_device_properties(i).total_memory  # 获取当前设备的总显存\n        min_vram = current_vram if current_vram > min_vram else min_vram  # 更新最小显存值\n        device_name = torch.cuda.get_device_properties(i).name  # 获取设备名称\n        cuda[f\"CUDA:{i} {device_name}\"] = f\"cuda:{i}\"  # 将设备信息添加到 cuda 字典中\n\n# 计算总显存并推荐批次大小\ntotal_vram = round(min_vram * 9.31322575e-10) if min_vram != 0 else 0  # 计算总显存，并将其转换为 GB\nauto_batch = total_vram -4 if total_vram <= 12 and total_vram > 0 else total_vram  # 推荐的批次大小\nprint(f\"当前显存：{total_vram} GiB，推荐批次大小：{auto_batch}\")\n\n\n```\n\n当前输出\n\n![1710669593061](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710669593061.png)\n\n检查BF16（30系及以上可用，动态浮点计算加速）\n\n```python\n##检查bf16是否可用\namp_options = [\"fp32\", \"fp16\"]\nif check_gpu:\n    if torch.cuda.is_bf16_supported():\n        amp_options = [\"fp32\", \"fp16\", \"bf16\"] \n\n```\n\n\n\n检查编码器信息\n\n```python\n##查找本地编码器\nvocoder_options = []\nfor dir in os.listdir(\"pretrain\"):\n    if os.path.isdir(os.path.join(\"pretrain\", dir)):\n        if os.path.isfile(os.path.join(\"pretrain\", dir, \"model\")) and os.path.isfile(os.path.join(\"pretrain\", dir, \"config.json\")):\n            vocoder_options.append(dir)\n```\n\n\n\n\n\n配置文件保存模块开发\n\n```python\nimport os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\nimport torch\nimport yaml\n\nsovits_params = {}\ndiff_params = {}\nprecheck_ok = False\nraw_path = \"dataset_raw\"\ndataset_dir = \"dataset/44k\"\ndefault_settings_file = \"defset.yaml\"\nclass Cfg:\n    def __init__(self, path, type):\n        \"\"\"\n        初始化配置对象。\n\n        Args:\n            path (str): 配置文件的路径。\n            type (str): 配置文件的类型 (\"json\" 或 \"yaml\")。\n        \"\"\"\n        self.path = path\n        self.type = type\n    \n    def read(self):\n        \"\"\"\n        从文件中读取配置数据。\n\n        Returns:\n            dict: 将配置文件的内容作为字典返回。\n        \"\"\"\n        if self.type == \"json\":\n            with open(self.path, 'r') as f:\n                return json.load(f)\n        if self.type == \"yaml\":\n            with open(self.path, 'r') as f:\n                return yaml.safe_load(f)\n    \n    def save(self, content):\n        \"\"\"\n        将提供的内容保存到配置文件中。\n\n        Args:\n            content (dict): 要保存到文件中的内容。\n        \"\"\"\n        if self.type == \"json\":\n            with open(self.path, 'w') as f:\n                json.dump(content, f, indent=4)\n        if self.type == \"yaml\":\n            with open(self.path, 'w') as f:\n                yaml.safe_dump(content, f, default_flow_style=False, sort_keys=False)\n\ndef save_default_settings(log_interval,eval_interval,keep_ckpts,batch_size,learning_rate,amp_dtype,all_in_mem,num_workers,cache_all_data,cache_device,diff_amp_dtype,diff_batch_size,diff_lr,diff_interval_log,diff_interval_val,diff_force_save,diff_k_step_max):\n    config_file = Cfg(default_settings_file, \"yaml\")\n    default_settings = config_file.read()\n    default_settings['sovits_params']['log_interval'] = int(log_interval)\n    default_settings['sovits_params']['eval_interval'] = int(eval_interval)\n    default_settings['sovits_params']['keep_ckpts'] = int(keep_ckpts)\n    default_settings['sovits_params']['batch_size'] = int(batch_size)\n    default_settings['sovits_params']['learning_rate'] = float(learning_rate)\n    default_settings['sovits_params']['amp_dtype'] = str(amp_dtype)\n    default_settings['sovits_params']['all_in_mem'] = all_in_mem\n    default_settings['diff_params']['num_workers'] = int(num_workers)\n    default_settings['diff_params']['cache_all_data'] = cache_all_data\n    default_settings['diff_params']['cache_device'] = str(cache_device)\n    default_settings['diff_params']['amp_dtype'] = str(diff_amp_dtype)\n    default_settings['diff_params']['diff_batch_size'] = int(diff_batch_size)\n    default_settings['diff_params']['diff_lr'] = float(diff_lr)\n    default_settings['diff_params']['diff_interval_log'] = int(diff_interval_log)\n    default_settings['diff_params']['diff_interval_val'] = int(diff_interval_val)\n    default_settings['diff_params']['diff_force_save'] = int(diff_force_save)\n    default_settings['diff_params']['diff_k_step_max'] = diff_k_step_max\n    config_file.save(default_settings)\n    return \"成功保存默认配置\"\n\ndef get_default_settings():\n    global sovits_params, diff_params\n    config_file = Cfg(default_settings_file, \"yaml\")\n    default_settings = config_file.read()\n    sovits_params = default_settings['sovits_params']\n    diff_params = default_settings['diff_params']\n    return sovits_params, diff_params\nprint(get_default_settings())\n```\n\n在根目录新建应该defset.yaml，粘贴以下内容\n\n```yaml\nsovits_params:\n  log_interval: 200\n  eval_interval: 800\n  keep_ckpts: 3\n  batch_size: 2\n  learning_rate: 0.0001\n  amp_dtype: fp32\n  all_in_mem: true\ndiff_params:\n  num_workers: 2\n  cache_all_data: true\n  cache_device: cuda\n  amp_dtype: fp32\n  diff_batch_size: 24\n  diff_lr: 0.0002\n  diff_interval_log: 10\n  diff_interval_val: 2000\n  diff_force_save: 10000\n  diff_k_step_max: false\n\n```\n\n输出为![1710747254487](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710747254487.png)\n\n\n\n此时，包含参数如下\n\n```\nimport os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\nimport torch\nimport yaml\n\n\n##一些参数\ndefault_settings_file = \"defset.yaml\"\nworkdir = \"logs/44k\"\ndiff_workdir = \"logs/44k/diffusion\"\nconfig_dir = \"configs/\"\nsovits_params = {}\ndiff_params = {}\nprecheck_ok = False\nraw_path = \"dataset_raw\"\ndataset_dir = \"dataset/44k\"\nf0_options = [\"crepe\",\"pm\",\"dio\",\"harvest\",\"rmvpe\",\"fcpe\"]\nENCODER_PRETRAIN = {\n    \"vec256l9\": \"pretrain/checkpoint_best_legacy_500.pt\",\n    \"vec768l12\": \"pretrain/checkpoint_best_legacy_500.pt\",\n    \"hubertsoft\": \"pretrain/hubert-soft-0d54a1f4.pt\",\n    \"whisper-ppg\": \"pretrain/medium.pt\",\n    \"cnhubertlarge\": \"pretrain/chinese-hubert-large-fairseq-ckpt.pt\",\n    \"dphubert\": \"pretrain/DPHuBERT-sp0.75.pth\",\n    \"wavlmbase+\": \"pretrain/WavLM-Base+.pt\",\n    \"whisper-ppg-large\": \"pretrain/large-v2.pt\"\n}\n```\n\n配置文件相关代码注释掉print之后放入函数部分\n\n```python\n##函数后添加\nsovits_params, diff_params = get_default_settings()##调用信息\nckpt_read_dir = workdir\nconfig_read_dir = config_dir\ndiff_read_dir = diff_workdir\n```\n\n至此，完成到了模型默认配置的准备\n\n前端代码如下‘\n\n```python\nindex = gr.Blocks()\nwith index:\n    gr.Markdown(value='''### 本系统基于sovits框架4.1版本\n                毕业设计：基于sovits项目的AI音乐生成与创作系统\n                ''')\n    with gr.Tabs():\n        with gr.TabItem('音频切片预处理工具') as preprocessing_tab:\n             gr.Markdown(value=\"\"\"\n                        ### 预处理模块\n                    \n                        \"\"\")\n        with gr.TabItem(\"训练\") as train_tab:   \n             gr.Markdown(value=\"\"\"\n                        ### 模型训练模块\n                         \n                        \"\"\")\n             gr.Markdown(value=\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\")\n             open_raw=gr.Button(\"打开dataset_raw文件夹\",variant=\"secondary\")\n             raw_dirs_list=gr.Textbox(label=\"加载原始数据集:\")\n             get_raw_dirs=gr.Button(\"识别数据集\", variant=\"primary\")\n             gr.Markdown(value=\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                         **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\")\n             with gr.Row():\n                gr.Markdown(value=\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\")\n                gr.Markdown(value=\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\")\n             with gr.Row():\n                branch_selection = gr.Dropdown(label=\"选择训练使用的编码器\", choices=encoder_list, value=\"vec768l12\", interactive=True)\n                f0_predictor_selection = gr.Dropdown(label=\"选择训练使用的f0预测器\", choices=f0_options, value=\"rmvpe\", interactive=True) \n             with gr.Row():\n                use_diff = gr.Checkbox(label=\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\", value=True) \n             with gr.Row():\n                skip_loudnorm = gr.Checkbox(label=\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\",value=False)\n                num_processes = gr.Slider(label=\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\", minimum=1, maximum=16, value=1, step=1)  \n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red;\">右侧选项仅为vec768l12提供支持。</span>  \n                响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n                TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n                      \"\"\")\n                vol_aug = gr.Checkbox(label=\"响度嵌入/音量增强\", value=False)\n                tiny_enable = gr.Checkbox(label=\"TINY模型 \", value=False)\n             with gr.Row():\n                gr.Markdown(value=\"\"\"<span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件<span style=\"color:red;\">  \"\"\")\n             with gr.Row():\n                raw_preprocess=gr.Button(\"数据预处理\", variant=\"primary\")\n                regenerate_config_btn=gr.Button(\"重新生成配置文件\", variant=\"primary\")\n             with gr.Row():\n                preprocess_output=gr.Textbox(label=\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\", max_lines=999)\n             with gr.Row():\n                clear_preprocess_output=gr.Button(\"清空CMD通知\")\n             with gr.Row():\n                    gr.Markdown(\"预处理与特征处理完成后，请检查右侧说话人列表，确认无误后进行下一步准备配置文件\")\n                    speakers=gr.Textbox(label=\"说话人列表\")\n             with gr.Accordion(label=\"主模型超参数列表 点击打开 否则按照默认参数训练\",open=False):\n                with gr.Row():\n                    gr.Textbox(label=\"显卡信息\", value=gpu_info)\n                with gr.Row():\n                    chose_gpu = gr.Textbox(label=\"显卡选择，默认0号，多卡用户西文逗号分隔，如0,1,2...\",value=gpus,interactive=True)\n                with gr.Row():\n                    log_interval = gr.Textbox(label=\"日志间隔 即多久输出一次损失日志\",value=sovits_params['log_interval'],interactive=True)\n                    eval_interval = gr.Textbox(label=\"评估间隔 即多久保存一次模型\",value=sovits_params['eval_interval'],interactive=True)\n                    keep_ckpts = gr.Textbox(label=\"保存模型数量 即仅保留最新的N个模型 旧模型会删除，若需要保存过程中的每个模型则设置为0 \",value=3,interactive=True)\n                with gr.Row():\n                    batch_size=gr.Textbox(label=\"batch_size，6G建议1-2，每多2G可尝试+1\", value=auto_batch)\n                    lr = gr.Textbox(label=\"学习率 默认0.0001 若数据集过大或过小可微调，微调范围+-0.0001内\",value=sovits_params['learning_rate'],interactive=True)\n                    amp_dtype = gr.Radio(label=\"浮点类型，默认f32即可，显卡型号较新也可尝试f16\", choices=amp_options, value=sovits_params['amp_dtype'])\n                    all_in_mem=gr.Checkbox(label=\"内存加速，建议打开，数据集将全部加载到内存，避免硬盘io低下影响训练\", value=sovits_params['all_in_mem'])\n             with gr.Accordion(label = \"扩散模型配置文件 点击打开 否则同样默认参数\", open=False):\n                with gr.Row():\n                    diff_num_workers = gr.Number(label=\"num_workers, 设置为0将作为主进程与cpu交互，但是容易出现死锁，仅建议高性能用户改动\", value=diff_params['num_workers'])\n                    diff_k_step_max = gr.Checkbox(label=\"100步深度的浅扩散。加快训练速度并提高模型质量，但无法执行超过100步的浅扩散推理\", value=diff_params['diff_k_step_max'])\n                    diff_cache_all_data = gr.Checkbox(label=\"数据缓存，启用后加快训练速度，关闭后节省显存或内存，减慢训练速度\", value=diff_params['cache_all_data'])\n                    diff_cache_device = gr.Radio(label=\"缓存硬件：需开启数据缓存，建议使用cuda/gpu显存加速\", choices=[\"cuda\",\"cpu\"], value=diff_params['cache_device'])\n                    diff_amp_dtype = gr.Radio(label=\"浮点类型，默认f32，较新的显卡可选f16提速\", choices=[\"fp32\",\"fp16\"], value=diff_params['amp_dtype'])\n                with gr.Row():\n                    diff_batch_size = gr.Number(label=\"batch_size，数值尽量不超过数据集1/4，6G建议24左右，显存越大可适当增大\", value=diff_params['diff_batch_size'])\n                    diff_lr = gr.Number(label=\"学习率 建议仅+-0.0001范围内微调\", value=diff_params['diff_lr'])\n                    diff_interval_log = gr.Number(label=\"日志间隔\", value = diff_params['diff_interval_log'])\n                    diff_interval_val = gr.Number(label=\"验证间隔  不建议过低 建议1000+\", value=diff_params['diff_interval_val'])\n                    diff_force_save = gr.Number(label=\"强制保留模型，该步数倍数保存的模型会被保留，其余会被删除。设置为与验证步数相同的值则每个模型都会被保留\", value=diff_params['diff_force_save'])\n             with gr.Row():\n                save_params=gr.Button(\"保存为默认设置\", variant=\"primary\")\n                write_config=gr.Button(\"写入配置文件\", variant=\"primary\")\n             write_config_output=gr.Textbox(label=\"输出信息\")\n\n        with gr.TabItem('推理') as inference_tab:\n              gr.Markdown(value=\"\"\"\n                        ### 音频推理模块\n                         \n                        \"\"\")\n        get_raw_dirs.click(load_raw_dirs,[],[raw_dirs_list])##[1]\n        raw_preprocess.click(dataset_preprocess,[branch_selection,f0_predictor_selection, use_diff, vol_aug, skip_loudnorm, num_processes,tiny_enable],[preprocess_output,speakers])\n        open_raw.click(open_dataset_raw,[],[])##[4]\n        clear_preprocess_output.click(clear_output,[],[preprocess_output])##[4.1]\n        regenerate_config_btn.click(regenerate_config,[branch_selection, vol_aug, tiny_enable],[preprocess_output])\n        save_params.click(save_default_settings, [log_interval,eval_interval,keep_ckpts,batch_size,lr,amp_dtype,all_in_mem,diff_num_workers,diff_cache_all_data,diff_cache_device,diff_amp_dtype,diff_batch_size,diff_lr,diff_interval_log,diff_interval_val,diff_force_save,diff_k_step_max], [write_config_output])\n        \n```\n\n\n\n![1710750595175](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710750595175.png)\n\n\n\n接下来添加配置写入函数\n\n```python\ndef config_fn(log_interval, eval_interval, keep_ckpts, batch_size, lr, amp_dtype, all_in_mem, diff_num_workers, diff_cache_all_data, diff_batch_size, diff_lr, diff_interval_log, diff_interval_val, diff_cache_device, diff_amp_dtype, diff_force_save, diff_k_step_max):\n    if amp_dtype == \"fp16\" or amp_dtype == \"bf16\":\n        fp16_run = True\n    else:\n        fp16_run = False\n        amp_dtype = \"fp16\"\n    config_origin = Cfg(\"configs/config.json\", \"json\")\n    diff_config = Cfg(\"configs/diffusion.yaml\", \"yaml\")\n    config_data = config_origin.read()\n    config_data['train']['log_interval'] = int(log_interval)\n    config_data['train']['eval_interval'] = int(eval_interval)\n    config_data['train']['keep_ckpts'] = int(keep_ckpts)\n    config_data['train']['batch_size'] = int(batch_size)\n    config_data['train']['learning_rate'] = float(lr)\n    config_data['train']['fp16_run'] = fp16_run\n    config_data['train']['half_type'] = str(amp_dtype)\n    config_data['train']['all_in_mem'] = all_in_mem\n    config_origin.save(config_data)\n    diff_config_data = diff_config.read()\n    diff_config_data['train']['num_workers'] = int(diff_num_workers)\n    diff_config_data['train']['cache_all_data'] = diff_cache_all_data\n    diff_config_data['train']['batch_size'] = int(diff_batch_size)\n    diff_config_data['train']['lr'] = float(diff_lr)\n    diff_config_data['train']['interval_log'] = int(diff_interval_log)\n    diff_config_data['train']['interval_val'] = int(diff_interval_val)\n    diff_config_data['train']['cache_device'] = str(diff_cache_device)\n    diff_config_data['train']['amp_dtype'] = str(diff_amp_dtype)\n    diff_config_data['train']['interval_force_save'] = int(diff_force_save)\n    diff_config_data['model']['k_step_max'] = 100 if diff_k_step_max else 0\n    diff_config.save(diff_config_data)\n    return \"配置文件写入完成\"\n```\n\n在按键绑定中添加\n\n```python\nwrite_config.click(config_fn,[log_interval, eval_interval, keep_ckpts, batch_size, lr, amp_dtype, all_in_mem, diff_num_workers, diff_cache_all_data, diff_batch_size, diff_lr, diff_interval_log, diff_interval_val, diff_cache_device, diff_amp_dtype, diff_force_save, diff_k_step_max],[write_config_output])\n        \n```\n\n\n\n\n\n#### 启动训练相关\n\n首先是检查数据集是否可用：\n\n由于已知数据集处理后包含npy和pt的编码与f0权重，设置一个函数来检查数据集。\n\n```python\ndef check_dataset(dataset_path):\n    if not os.listdir(dataset_path):\n        return \"该路径下未检测到数据集\"##检测数据集目录是否存在\n    unavailable_dataset = True\n    for root, dirs, files in os.walk(dataset_path):\n        for file in files:\n            if file.endswith('.pt') or file.endswith('.npy'):\n                ##return \"已检查到到数据集\"\n                unavailable_dataset = False\n                break\n    if unavailable_dataset:\n        return \"该目录下未存在一个有效的数据集权重，请检查文件目录是否有pt或者npy的模型文件\"\n    return None\n\n```\n\n接下来是启动训练的函数：分为从0开始和继续训练，由于模型的特殊性，从0 开始需要准备对应的预训练模型（称之为底模），方便模型进行特征学习，不然自己训练底模只能达到五分之一左右的效果。\n\n底模从社区获取，模型路径如下图\n\n![1710989114237](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710989114237.png)\n\n添加备份文件夹 新建\n\n![1710993075567](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710993075567.png)\n\n```python\nbackup_path = 'backup_model'\n```\n\n路径如上\n训练函数：\n\n```python\ndef training(gpu_selection,encoder,tiny_enable):\n    if tiny_enable:\n        encoder = \"\"\n    config_data_cfg = Cfg(\"configs/config.json\", \"json\")\n    config_data = config_data_cfg.read()##调用配置文件信息\n    vol_emb = config_data[\"model\"][\"vol_embedding\"]\n    warn = check_dataset(dataset_dir)\n    if warn is not None:\n        return warn\n    pretain_path = {\n                \"vec256l9\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model\"),\n        \"vec768l12\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/768l12/vol_emb\" if vol_emb else \"pretrained_model/768l12\"),\n        \"vec768l12_tiny\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/tiny/vec768l12_vol_emb\"),\n        \"hubertsoft\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/hubertsoft\"),\n        \"whisper-ppg\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/whisper-ppg\"),\n        \"cnhubertlarge\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/cnhubertlarge\"),\n        \"dphubert\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/dphubert\"),\n        \"wavlmbase+\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/wavlmbase+\"),\n        \"whisper-ppg-large\": (\"D_0.pth\", \"G_0.pth\", \"pretrained_model/whisper-ppg-large\")\n    }\n    if not encoder in pretain_path:\n        return \"未找到对应编码器底模，请检查编码器是否存在\"\n    D_file,G_file,encoder_path = pretain_path[encoder]\n    D_path = os.path.join(encoder_path,D_file)\n    G_path = os.path.join(encoder_path,G_file)\n    time_stamp = datetime.datetime.now().strftime('%Y_%m_%d_%H_%M')\n    backup_folder = os.path.join(backup_path,time_stamp)\n    output_msg = \"备份已完成，旧模型被保存在%s\" %(backup_folder)\n    if os.listdir(workdir) != ['diffusion']:\n        os.makedirs(new_backup_folder, exist_ok=True)\n        for file in os.listdir(workdir):\n            if file != \"diffusion\":\n                shutil.move(os.path.join(workdir, file), os.path.join(new_backup_folder, file))\n    if os.path.isfile(G_path) and os.path.isfile(D_path):\n        shutil.copy(D_path, os.path.join(workdir, \"D_0.pth\"))\n        shutil.copy(G_path, os.path.join(workdir, \"G_0.pth\"))\n        output_msg += f\"成功装载预训练模型，编码器：{encoder}\\n\"\n    else:\n        output_msg += f\"{encoder}的预训练模型不存在，未装载预训练模型\\n\"\n\n    cmd = r\"set CUDA_VISIBLE_DEVICES=%s && .\\env\\python.exe train.py -c configs/config.json -m 44k\" % (gpu_selection)\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", cmd])\n    output_msg += \"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C\"\n    return output_msg\n```\n\n继续训练函数（多段输出使用output_msg进行自增，单端输出直接return）\n\n```python\ndef continue_training(gpu_selection,encoder):\n    warn = check_dataset(dataset_dir)\n    if warn is not None:\n        return warn\n    file = os.listdir(workdir)\n    # 从工作目录下的所有文件中筛选文件名以'G_'开头且以'.pth'结尾的文件\n    files = [f for f in file if f.startswith('G_') and f.endswith('.pth')]\n    if len(files) == 0:\n        return \"未找到已训练模型，无法继续训练，请检查文件目录或者使用重新开始训练。\"\n    cmd = r\"set CUDA_VISIBLE_DEVICES=%s && .\\env\\python.exe train.py -c configs/config.json -m 44k\" % (gpu_selection)\n    subprocess.Popen([\"cmd\",\"/c\",\"start\",\"cmd\",\"/k\",cmd])\n    return \"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C\"\n\n    \n```\n\n要导入：\n\n```python\nimport datetime\n\n```\n\n此时前端代码添加：\n\n```PYTHON\n             with gr.Row():\n                save_params=gr.Button(\"保存为默认设置\", variant=\"primary\")\n                write_config=gr.Button(\"写入配置文件\", variant=\"primary\")\n             write_config_output=gr.Textbox(label=\"输出信息\")\n             with gr.Row():\n                with gr.Column():\n                    start_train = gr.Button(\"开始训练\",variant='primary')\n                    train_out = gr.Textbox(label=\"训练信息\")\n                with gr.Column():\n                    continue_train = gr.Button(\"继续训练\",variant=\"primary\")\n                    continue_train_out = gr.Textbox(label=\"训练信息\")\n```\n\n按键绑定\n\n```python\n        start_train.click(training,[chose_gpu, branch_selection, tiny_enable],[train_out])\n        continue_train.click(continue_training,[chose_gpu, branch_selection],[continue_train_out])\n```\n\n缝缝补补，改完之后应该可以实现如下效果：\n\n点击开始训练，弹出cmd并且提示loaded checkpoints G0（说明正确加载了预训练模型）\n\n![1711362464630](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711362464630.png)\n\n使用ctrl+c键盘中断，接下来检查继续训练\n\n首先来到logs/44k路径下。删除除了diffusion目录的所有文件（也可以直接覆盖，复制备份文件夹内文件直接粘贴）\n\n![1711363139340](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711363139340.png)\n\n之后将之前备份的模型文件复制过来（只需要G,D各一个再加上配置文件即可，日志文件复制可选，因为可以承接之前的训练输出）\n之后直接点击继续训练即可\n\n![1711365203345](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711365203345.png)\n\n\n\n完成其他几个模型的函数：\n\n```python\ndef kmeans_training(kmeans_gpu):\n    if not os.listdir(dataset_dir):\n        return \"数据集不存在，请检查dataset文件夹\"\n    cmd = r\".\\env\\python.exe cluster/train_cluster.py --gpu\" if kmeans_gpu else r\".\\env\\python.exe cluster/train_cluster.py\"\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", cmd])\n    return \"训练已开始，cpu需要5-10min，无终端输出\"\n\ndef index_training():\n    if not os.listdir(dataset_dir):\n        return \"数据集不存在，请检查dataset文件夹\"\n    cmd = r\".\\env\\python.exe train_index.py -c configs/config.json\"\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", cmd])\n    return \"训练已开始\"\n\ndef diff_training(encoder, k_step_max):\n    if not os.listdir(dataset_dir):\n        return \"数据集不存在，请检查dataset文件夹\"\n    timestamp = datetime.datetime.now().strftime('%Y_%m_%d_%H_%M')\n    new_backup_folder = os.path.join(backup_path, \"diffusion\", str(timestamp))\n    if len(os.listdir(diff_workdir)) != 0:\n        os.makedirs(new_backup_folder, exist_ok=True)\n        for file in os.listdir(diff_workdir):\n            shutil.move(os.path.join(diff_workdir, file), os.path.join(new_backup_folder, file))\n    DIFF_PRETRAIN = {\n        \"768-kstepmax100\": \"pretrained_model/diffusion/768l12/max100/model_0.pt\",\n        \"vec768l12\": \"pretrained_model/diffusion/768l12/model_0.pt\",\n        \"hubertsoft\": \"pretrained_model/diffusion/hubertsoft/model_0.pt\",\n        \"whisper-ppg\": \"pretrained_model/diffusion/whisper-ppg/model_0.pt\"\n    }\n    if encoder not in DIFF_PRETRAIN:\n        return \"该编码器不支持训练扩散模型\"\n    if k_step_max:\n        encoder = \"768-kstepmax100\"\n    diff_pretrained_model = DIFF_PRETRAIN[encoder]\n    shutil.copy(diff_pretrained_model, os.path.join(diff_workdir, \"model_0.pt\"))\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", r\".\\env\\python.exe train_diff.py -c configs/diffusion.yaml\"])\n    output_message = \"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C。\"\n    if encoder == \"768-kstepmax100\":\n        output_message += \"\\n正在进行100步深度的浅扩散训练，已加载底模\"\n    else:\n        output_message += f\"\\n正在进行完整深度的扩散训练，编码器{encoder}\"\n    return output_message\n\ndef diff_continue_training(encoder):\n    if not os.listdir(dataset_dir):\n        return \"数据集不存在，请检查dataset文件夹\"\n    if encoder == \"\":\n        return \"未选择预处理对应的编码器\"\n    all_files = os.listdir(diff_workdir)\n    model_files = [f for f in all_files if f.endswith('.pt')]\n    if len(model_files) == 0:\n        return \"未找到已训练模型，无法继续训练，请检查文件目录或者使用重新开始训练。\"\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", r\".\\env\\python.exe train_diff.py -c configs/diffusion.yaml\"])\n    return \"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C。\"\n```\n\n```python\n             with gr.Accordion(label=\"扩散模型\",open=False):\n                with gr.Row():\n                    with gr.Column():\n                        start_train_diff = gr.Button(\"开始训练\",variant='primary')\n                        train_diff_out = gr.Textbox(label=\"训练信息\")\n                    with gr.Column():\n                        continue_train_diff = gr.Button(\"继续训练\",variant=\"primary\")\n                        continue_train_diff_out = gr.Textbox(label=\"训练信息\")\n                        \n                        \n\n\t\tstart_train_diff.click(diff_training,[branch_selection, diff_k_step_max],[train_diff_out])\n        continue_train_diff.click(diff_continue_training,[branch_selection],[continue_train_diff_out])\n\n```\n\n前端代码与按键绑定如上\n\n此时，浅扩散训练按钮效果如下![1711420592406](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711420592406.png)\n\n\n\n\n\n![1711420657241](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711420657241.png)\n\n\n\n特征模型和聚类模型绑定如下\n\n```python\n        train_index.click(index_training,[],[train_index_out])\n        train_kmeans.click(kmeans_training,[chose_gpu],[train_kmeans_out])\n        \n        \n        #前端如下：\n                        with gr.Row():\n                    with gr.Column():\n                        train_index = gr.Button(\"开始训练特征检索模型\",variant='primary')\n                        train_index_out = gr.Textbox(label=\"训练信息\")\n                    with gr.Column():                                                       \n                        train_kmeans = gr.Button(\"开始训练kmeans聚类模型\",variant=\"primary\")\n                        train_kmeans_out = gr.Textbox(label=\"训练信息\")\n```\n\ntensorboard如下\n\n```python\n             with gr.Row():\n                tensorboard_bth = gr.Button(\"打开tensorboard\",variant=\"primary\")\n                tensorboard_out = gr.Textbox()\n#按钮绑定\n        tensorboard_bth.click(tensorboard_open,[],[tensorboard_out])\n#函数设计\ndef tensorboard_open():\n    subprocess.Popen([\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", r\".\\env\\python.exe -m tensorboard.main --logdir=logs\\44k\"])\n    return \"已打开tensorboard，请复制ip地址浏览器使用\"\n```\n\n至此，训练模块制作完成，开始制作推理模块\n\n\n\n### 推理模块\n\n添加定义\n\n```python\nmodel = None\ndebug = False\n\nMODEL_TYPE = {\n    \"vec768l12\": 768,\n    \"vec256l9\": 256,\n    \"hubertsoft\": 256,\n    \"whisper-ppg\": 1024,\n    \"cnhubertlarge\": 1024,\n    \"dphubert\": 768,\n    \"wavlmbase+\": 768,\n    \"whisper-ppg-large\": 1280\n}\n```\n\n添加导入包\n\n```python\nfrom edgetts.tts_voices import SUPPORTED_LANGUAGES\nfrom inference.infer_tool import Svc\nimport soundfile as sf\nimport numpy as np\nimport librosa\nfrom pathlib import Path\n\n```\n\n相关函数\n\n```python\ndef get_file_options(directory, extension):\n    return [file for file in os.listdir(directory) if file.endswith(extension)]\n\ndef option_loader():\n    ckpt_list = [file for file in get_file_options(ckpt_read_dir, \".pth\") if not file.startswith(\"D_\") or file == \"G_0.pth\"]\n    config_list = get_file_options(config_read_dir, \".json\")\n    cluster_list = [\"请选择特征/聚类模型\"] + get_file_options(ckpt_read_dir, \".pt\") + get_file_options(ckpt_read_dir, \".pkl\") # 聚类和特征检索模型\n    diff_list = [\"请选择扩散模型\"] + get_file_options(diff_read_dir, \".pt\")\n    diff_config_list = [\"请选择扩散模型配置\"] + get_file_options(config_read_dir, \".yaml\")\n    return ckpt_list, config_list, cluster_list, diff_list, diff_config_list\n\n# read ckpt list读取模型清单\nckpt_list, config_list, cluster_list, diff_list, diff_config_list = option_loader()\ndef load_model_func(ckpt_name, cluster_name, config_name, enhance, diff_model_name, diff_config_name, only_diffusion, use_spk_mix, using_device, method, speedup, cl_num, vocoder_name):\n    global model\n    \n    # 构建配置文件和模型路径\n    config_path = os.path.join(config_read_dir, config_name) if not only_diffusion else \"configs/config.json\"\n    diff_config_path = os.path.join(config_read_dir, diff_config_name) if diff_config_name != \"未选择扩散模型配置文件\" else \"configs/diffusion.yaml\"\n    ckpt_path = os.path.join(ckpt_read_dir, ckpt_name)\n    cluster_path = os.path.join(ckpt_read_dir, cluster_name)\n    diff_model_path = os.path.join(diff_read_dir, diff_model_name)\n    \n    k_step_max = 1000\n    \n    # 根据是否只加载扩散模型，读取相应的配置文件\n    if not only_diffusion:\n        config = Cfg(config_path, \"json\").read()\n    \n    # 如果存在扩散模型，检查维度是否匹配\n    if diff_model_name != \"未选择扩散模型\":\n        _diff = Cfg(diff_config_path, \"yaml\")\n        _content = _diff.read()\n        diff_spk = _content.get('spk', {})\n        \n        # 检查扩散模型维度是否匹配主模型\n        if not only_diffusion:\n            if _content['data'].get('encoder_out_channels') != config[\"model\"].get('ssl_dim'):\n                return \"扩散模型维度与主模型不匹配，请确保两个模型使用的是同一个编码器\", gr.Dropdown.update(choices=[], value=\"\"), 0, None\n        \n        # 更新扩散模型配置信息\n        _content[\"infer\"][\"speedup\"] = int(speedup)\n        _content[\"infer\"][\"method\"] = str(method)\n        _content[\"vocoder\"][\"ckpt\"] = f\"pretrain/{vocoder_name}/model\"\n        k_step_max = _content[\"model\"].get('k_step_max', 0) if _content[\"model\"].get('k_step_max', 0) != 0 else 1000\n        _diff.save(_content)\n    \n    # 加载模型\n    if not only_diffusion:\n        net = torch.load(ckpt_path, map_location=torch.device('cpu'))\n        \n        # 检查模型维度是否匹配配置\n        emb_dim, model_dim = net[\"model\"].get(\"emb_g.weight\", torch.empty(0, 0)).size()\n        if emb_dim > config[\"model\"][\"n_speakers\"]:\n            return \"模型说话人数量与emb维度不匹配\", gr.Dropdown.update(choices=[], value=\"\"), 0, None\n        if model_dim != config[\"model\"][\"ssl_dim\"]:\n            return \"配置文件与模型不匹配\", gr.Dropdown.update(choices=[], value=\"\"), 0, None\n        \n        encoder = config[\"model\"][\"speech_encoder\"]\n        spk_dict = config.get('spk', {})\n    \n    else:\n        spk_dict = diff_spk\n\n    # 根据设备类型初始化设备\n    device = cuda[using_device] if \"CUDA\" in using_device else using_device\n\n    # 根据输入参数初始化模型\n    model = Svc(ckpt_path, config_path, device=device if device != \"Auto\" else None, cluster_model_path=cluster_path, nsf_hifigan_enhance=enhance, diffusion_model_path=diff_model_path, diffusion_config_path=diff_config_path, shallow_diffusion=diff_model_name != \"no_diff\", only_diffusion=only_diffusion, spk_mix_enable=use_spk_mix, feature_retrieval=cluster_name.endswith(\".pkl\"))\n\n    # 一些额外处理\n    spk_list = list(spk_dict.keys())\n    if enhance:\n        from modules.enhancer import Enhancer\n        model.enhancer = Enhancer('nsf-hifigan', f'pretrain/{vocoder_name}/model', device=model.dev)\n\n    # 根据条件设置 clip 的值\n    clip = 25 if encoder == \"whisper-ppg\" or encoder == \"whisper-ppg-large\" else cl_num\n    device_name = torch.cuda.get_device_properties(model.dev).name if \"cuda\" in str(model.dev) else str(model.dev)\n    sovits_msg = f\"模型被成功加载到了{device_name}上\\n\" if not only_diffusion else \"启用全扩散推理，未加载So-VITS模型\\n\"\n\n    index_or_kmeans = \"特征索引\" if cluster_name.endswith(\".pkl\") else \"聚类模型\"\n    clu_load = \"未加载\" if cluster_name == \"no_clu\" else cluster_name\n    diff_load = \"未加载\" if diff_model_name == \"no_diff\" else f\"{diff_model_name} | 采样器: {method} | 加速倍数：{int(speedup)} | 最大浅扩散步数：{k_step_max} | 声码器： {vocoder_name}\"\n    output_msg = f\"{sovits_msg}{index_or_kmeans}：{clu_load}\\n扩散模型：{diff_load}\"\n\n    return (\n        output_msg,\n        gr.Dropdown.update(choices=spk_list, value=next(iter(spk_dict), \"未检测到音色\")),\n        clip,\n        gr.Slider.update(value=100 if k_step_max > 100 else k_step_max, minimum=speedup, maximum=k_step_max)\n    )\n\ndef refresh_options():\n    # 使用global关键字使这些变量在函数内部被视为全局变量\n    global ckpt_read_dir, config_read_dir, diff_read_dir, current_mode\n    \n    # 根据条件选择要读取的目录\n    ckpt_read_dir = workdir\n    config_read_dir = config_dir\n    diff_read_dir = diff_workdir\n    \n    # 加载选项列表\n    ckpt_list, config_list, cluster_list, diff_list, diff_config_list = option_loader()\n    \n\n    \n    # 更新各个选择框和文本显示\n    return (\n        choice_ckpt.update(choices=ckpt_list),  # 更新ckpt选择框\n        config_choice.update(choices=config_list),  # 更新config选择框\n        cluster_choice.update(choices=cluster_list),  # 更新cluster选择框\n        diff_choice.update(choices=diff_list),  # 更新diff选择框\n        diff_config_choice.update(choices=diff_config_list),  # 更新diff config选择框\n    )\n\n\ndef load_json_encoder(config_choice, choice_ckpt):\n    # 如果没有选择配置文件，则返回相应提示\n    if config_choice == \"未选择配置文件\":\n        return \"自动加载未启用，请手动选择配置文件。\"\n    \n    # 如果没有选择模型，则返回相应提示\n    if choice_ckpt == \"未选择模型\":\n        return \"请先选择模型。\"\n    \n    # 读取配置文件\n    config_file = Cfg(os.path.join(config_read_dir, config_choice), \"json\")\n    config = config_file.read()\n    \n    try:\n        # 检查配置文件中的模型编码器和维度是否匹配\n        config_encoder = config[\"model\"].get(\"speech_encoder\", \"no_encoder\")\n        config_dim = config[\"model\"][\"ssl_dim\"]\n        \n        # 处理旧版本配置文件的自动匹配\n        if config_encoder == \"no_encoder\":\n            config_encoder = config[\"model\"][\"speech_encoder\"] = \"vec256l9\" if config_dim == 256 else \"vec768l12\"\n            config_file.save(config)\n        \n        # 获取正确的模型维度\n        correct_dim = MODEL_TYPE.get(config_encoder, \"unknown\")\n        \n        # 如果模型维度不匹配，则返回相应提示\n        if config_dim != correct_dim:\n            return \"配置文件中指定的编码器与模型维度不匹配。\"\n        \n        # 返回配置文件中的编码器\n        return config_encoder\n    \n    except Exception as e:\n        # 如果出现异常，则返回错误信息\n        return f\"出现错误：{e}\"\n\ndef get_model_info(choice_ckpt):\n    pthfile = os.path.join(ckpt_read_dir, choice_ckpt)\n    \n    # 加载模型，映射到CPU以避免使用GPU内存\n    net = torch.load(pthfile, map_location=torch.device('cpu'))\n    \n    # 获取模型中的说话者嵌入向量\n    spk_emb = net[\"model\"].get(\"emb_g.weight\")\n    \n    # 检查模型是否缺少说话者嵌入向量\n    if spk_emb is None:\n        return \"所选模型缺少emb_g.weight，可能选择了一个底层模型\"\n    \n    # 获取说话者嵌入向量的维度\n    _layer = spk_emb.size(1)\n    \n    # 通过维度查找对应的编码器\n    encoder = [k for k, v in MODEL_TYPE.items() if v == _layer]\n    encoder.sort()\n    \n    # 对特定编码器进行合并处理\n    if encoder == [\"hubertsoft\", \"vec256l9\"]:\n        encoder = [\"vec256l9 / hubertsoft\"]\n    if encoder == [\"cnhubertlarge\", \"whisper-ppg\"]:\n        encoder = [\"whisper-ppg / cnhubertlarge\"]\n    if encoder == [\"dphubert\", \"vec768l12\", \"wavlmbase+\"]:\n        encoder = [\"vec768l12 / dphubert / wavlmbase+\"]\n    \n    return encoder[0]\n\ndef auto_load(choice_ckpt):\n    \n    # 获取模型信息\n    model_output_msg = get_model_info(choice_ckpt)\n    \n    # 初始化变量\n    json_output_msg = \"\"\n    config_choice = \"\"\n    \n    # 获取选择的ckpt文件名，去掉扩展名\n    choice_ckpt_name, _ = os.path.splitext(choice_ckpt)\n    return model_output_msg, \"未选择配置文件\", \"\"\n\ndef auto_load_diff(diff_model):\n\n    return \"未启用扩散配置文件加载\"\n    \n    # 获取目录中所有以.yaml结尾的文件\n    all_diff_config = [yaml for yaml in os.listdir(second_dir) if yaml.endswith(\".yaml\")]\n    \n    # 遍历所有扩散配置文件\n    for config in all_diff_config:\n        config_fname, _ = os.path.splitext(config)\n        diff_fname, _ = os.path.splitext(diff_model)\n        \n        # 比较文件名是否匹配\n        if config_fname == diff_fname:\n            return config\n    \n    # 如果没有找到匹配的配置文件，则返回相应提示\n    return \"未找到匹配的扩散配置文件\"\n\ndef model_empty_cache():\n    global model\n    if model is None:\n        return sid.update(choices = [],value=\"\"),\"没有模型需要卸载!\"\n    else:\n        model.unload_model()\n        model = None\n        torch.cuda.empty_cache()\n        return sid.update(choices = [],value=\"\"),\"模型卸载完毕!\"\n\ndef debug_change():\n    global debug\n    debug = debug_button.value\n\ndef vc_infer(output_format, sid, input_audio, sr, input_audio_path, vc_transform, auto_f0, cluster_ratio, slice_db, \n              noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold,\n              k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment):\n    # 将输入音频转换为浮点数类型，并确保只有一个声道\n    if np.issubdtype(input_audio.dtype, np.integer):\n        input_audio = (input_audio / np.iinfo(input_audio.dtype).max).astype(np.float32)\n    if len(input_audio.shape) > 1:\n        input_audio = librosa.to_mono(input_audio.transpose(1, 0))\n    \n    # 如果音频采样率不是44100Hz，则重新采样为44100Hz\n    if sr != 44100:\n        input_audio = librosa.resample(input_audio, orig_sr=sr, target_sr=44100)\n    \n    # 将预处理后的音频保存为临时文件\n    sf.write(\"temp.wav\", input_audio, 44100, format=\"wav\")\n    \n    # 对临时文件执行声码转换推断\n    _audio = model.slice_inference(\"temp.wav\", sid, vc_transform, slice_db, cluster_ratio, auto_f0, noise_scale,\n                                   pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold,\n                                   k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment)\n    \n    # 清空模型状态\n    model.clear_empty()\n    \n    # 确定输出文件名\n    key = \"auto\" if auto_f0 else f\"{int(vc_transform)}key\"\n    cluster = \"_\" if cluster_ratio == 0 else f\"_{cluster_ratio}_\"\n    isdiffusion = \"sovits_\" if not model.shallow_diffusion else \"sovdiff_\" if model.shallow_diffusion else \"diff_\"\n    \n    # 处理 Gradio 上传的文件路径\n    truncated_basename = Path(input_audio_path).stem[:-6] if Path(input_audio_path).stem[-6:] == \"-0-100\" else Path(input_audio_path).stem\n    output_file_name = f'{truncated_basename}_{sid}_{key}{cluster}{isdiffusion}{f0_predictor}.{output_format}'\n    output_file_path = os.path.join(\"results\", output_file_name)\n    \n    # 如果输出文件已经存在，则在文件名中添加序号以避免覆盖现有文件\n    if os.path.exists(output_file_path):\n        count = 1\n        while os.path.exists(output_file_path):\n            output_file_name = f'{truncated_basename}_{sid}_{key}{cluster}{isdiffusion}{f0_predictor}_{str(count)}.{output_format}'\n            output_file_path = os.path.join(\"results\", output_file_name)\n            count += 1\n    \n    # 将输出音频保存为指定的格式\n    sf.write(output_file_path, _audio, model.target_sample, format=output_format)\n    \n    # 返回输出文件路径\n    return output_file_path\n\n\n\ndef vc_fn(output_format, sid, input_audio, vc_transform, auto_f0, cluster_ratio, slice_db, noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold, k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment, progress=gr.Progress(track_tqdm=True)):\n    global model\n    try:\n        if input_audio is None:\n            return \"你还没有上传音频\", None\n        if model is None:\n            return \"你还没有加载模型\", None\n        if getattr(model, 'cluster_model', None) is None and model.feature_retrieval is False:\n            if cluster_ratio != 0:\n                return \"你还未加载聚类或特征检索模型，无法启用聚类/特征检索混合比例\", None\n        audio, sr = sf.read(input_audio)\n        output_file_path = vc_infer(output_format, sid, audio, sr, input_audio, vc_transform, auto_f0, cluster_ratio, slice_db, noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold, k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment)\n        os.remove(\"temp.wav\")\n        return \"Success\", output_file_path\n    except torch.cuda.OutOfMemoryError as e:\n        raise gr.Error(f\"{e}\\n显存不足，减小batch_size或者更换配置也许可以解决\")\n    except Exception as e:\n        if debug:\n            traceback.print_exc()\n        raise gr.Error(e)\n\ndef tts_fn(_text, _gender, _lang, _rate, _volume, output_format, sid, vc_transform, auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold, k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment,progress=gr.Progress(track_tqdm=True)):\n    global model\n    try:\n        if model is None:\n            return \"你还没有加载模型\", None\n        if getattr(model, 'cluster_model', None) is None and model.feature_retrieval is False:\n            if cluster_ratio != 0:\n                return \"你还未加载聚类或特征检索模型，无法启用聚类/特征检索混合比例\", None\n        _rate = f\"+{int(_rate*100)}%\" if _rate >= 0 else f\"{int(_rate*100)}%\"\n        _volume = f\"+{int(_volume*100)}%\" if _volume >= 0 else f\"{int(_volume*100)}%\"\n        if _lang == \"Auto\":\n            _gender = \"Male\" if _gender == \"男\" else \"Female\"\n            subprocess.run([r\".\\env\\python.exe\", \"./edgetts/tts.py\", _text, _lang, _rate, _volume, _gender])\n        else:\n            subprocess.run([r\".\\env\\python.exe\", \"./edgetts/tts.py\", _text, _lang, _rate, _volume])\n        target_sr = 44100\n        y, sr = librosa.load(\"tts.wav\")\n        resampled_y = librosa.resample(y, orig_sr=sr, target_sr=target_sr)\n        sf.write(\"tts.wav\", resampled_y, target_sr, subtype = \"PCM_16\")\n        input_audio = \"tts.wav\"\n        audio, sr = sf.read(input_audio)\n        output_file_path = vc_infer(output_format, sid, audio, sr, input_audio, vc_transform, auto_f0, cluster_ratio, slice_db, noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold, k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment)\n        #os.remove(\"tts.wav\")\n        return \"Success\", output_file_path\n    except Exception as e:\n        if debug:\n            traceback.print_exc()\n\n```\n\n界面设计\n\n```python\n        with gr.TabItem('推理') as inference_tab:\n            gr.Markdown(value=\"\"\"\n                        ### 音频推理模块\n                         \n                        \"\"\")\n            with gr.Group():\n                with gr.Row():\n                    choice_ckpt = gr.Dropdown(label=\"模型选择\", choices=ckpt_list, value=\"未选择模型\")\n                    model_branch = gr.Textbox(label=\"模型编码器\", placeholder=\"请先选择模型\", interactive=False)\n                \n                with gr.Row():\n                    config_choice = gr.Dropdown(label=\"配置文件\", choices=config_list, value=\"未选择配置文件\")\n                    config_info = gr.Textbox(label=\"配置文件编码器\", placeholder=\"请选择配置文件\")\n                \n                gr.Markdown(value=\"**请检查模型和配置文件的编码器是否匹配**\")\n                \n                with gr.Row():\n                    diff_choice = gr.Dropdown(label=\"（可选）选择扩散模型\", choices=diff_list, value=\"未选择扩散模型\", interactive=True)\n                    diff_config_choice = gr.Dropdown(label=\"扩散模型配置文件\", choices=diff_config_list, value=\"未选择扩散模型配置文件\", interactive=True)\n                \n                with gr.Row():\n                    cluster_choice = gr.Dropdown(label=\"（可选）选择聚类模型/特征检索模型\", choices=cluster_list, value=\"未选择聚类模型/特征检索模型\")\n                    vocoder_choice = gr.Dropdown(label=\"选择声码器\", choices=vocoder_options, value=\"nsf_hifigan\")\n                \n\n                with gr.Row():\n                    enhance = gr.Checkbox(label=\"是否使用NSF_HIFIGAN增强\", value=False)\n                    only_diffusion = gr.Checkbox(label=\"是否使用全扩散推理\", value=False)\n                \n                with gr.Row():\n                    diffusion_method = gr.Dropdown(label=\"扩散模型采样器\", choices=[\"dpm-solver++\",\"dpm-solver\",\"pndm\",\"ddim\",\"unipc\"], value=\"dpm-solver++\")\n                    diffusion_speedup = gr.Number(label=\"扩散加速倍数，默认为10倍\", value=10)\n                \n                using_device = gr.Dropdown(label=\"推理设备，默认为自动选择\", choices=[\"Auto\",*cuda.keys(),\"cpu\"], value=\"Auto\")\n                \n                with gr.Row():\n                    loadckpt = gr.Button(\"加载模型\", variant=\"primary\")\n                    unload = gr.Button(\"卸载模型\", variant=\"primary\")\n                \n                with gr.Row():\n                    model_message = gr.Textbox(label=\"Output Message\")\n                    sid = gr.Dropdown(label=\"So-VITS说话人\", value=\"speaker0\")\n\n                gr.Markdown(\n        value=\"请等待模型加载，大概十多秒钟(取决于硬盘速度)后续不需要重新加载模型\"\n    )\n\n            with gr.Tabs():\n                with gr.TabItem(\"音频上传\"):\n                    with gr.Column():\n                        vc_input = gr.Audio(\n                            label=\"单音频上传\", type=\"filepath\", source=\"upload\"\n                        )\n\n\n                with gr.TabItem(\"文字转语音\"):\n                    gr.Markdown(\n                        \"\"\"\n                        说明：使用edge_tts库生成音频，并转换为模型音色。\n                        \"\"\"\n                    )\n                    text_input = gr.Textbox(\n                        label=\"在此输入需要转译的文字（建议打开自动f0预测）\"\n                    )\n                    with gr.Row():\n                        tts_gender = gr.Radio(\n                            label=\"说话人性别\", choices=[\"男\", \"女\"], value=\"男\"\n                        )\n                        tts_lang = gr.Dropdown(\n                            label=\"选择语言，Auto为根据输入文字自动识别\",\n                            choices=SUPPORTED_LANGUAGES, value=\"Auto\"\n                        )\n                    with gr.Row():\n                        tts_rate = gr.Slider(\n                            label=\"TTS语音变速（倍速相对值）\",\n                            minimum=-1, maximum=3, value=0, step=0.1\n                        )\n                        tts_volume = gr.Slider(\n                            label=\"TTS语音音量（相对值）\",\n                            minimum=-1, maximum=1.5, value=0, step=0.1\n                        )\n\n            with gr.Row():\n                auto_f0 = gr.Checkbox(\n                    label=\"自动f0预测，配合聚类模型f0预测效果更好，会导致变调功能失效\",\n                    value=False\n                )\n                f0_predictor = gr.Radio(\n                    label=\"f0预测器选择（如遇哑音可以更换f0预测器解决，crepe为原F0使用均值滤波器）\",\n                    choices=[\"rmvpe\", \"crepe\"],\n                    value=\"rmvpe\"\n                )\n                cr_threshold = gr.Number(\n                    label=\"F0过滤阈值，只有使用crepe时有效。数值范围从0-1。降低该值可减少跑调概率，但会增加哑音\",\n                    value=0.05\n                )\n\n            with gr.Row():\n                vc_transform = gr.Number(\n                    label=\"变调（整数，可以是正负数，半音数量。升高八度就是12）\",\n                    value=0\n                )\n                cluster_ratio = gr.Number(\n                    label=\"聚类模型/特征检索混合比例，0-1之间，默认为0不启用聚类或特征检索，能提升音色相似度，但会导致咬字下降\",\n                    value=0\n                )\n                k_step = gr.Slider(\n                    label=\"浅扩散步数，必须使用扩散模型才有效，步数越大越接近扩散模型的结果\",\n                    value=100, minimum=1, maximum=1000\n                )\n\n            with gr.Row():\n                output_format = gr.Radio(\n                    label=\"音频输出格式\",\n                    choices=[\"wav\", \"flac\", \"mp3\"],\n                    value=\"wav\"\n                )\n                enhancer_adaptive_key = gr.Number(\n                    label=\"使NSF-HIFIGAN增强器适应更高的音域(单位为半音数)，默认为0\",\n                    value=0\n                )\n                slice_db = gr.Number(label=\"切片阈值\", value=-50)\n                cl_num = gr.Number(\n                    label=\"音频自动切片，0为按默认方式切片，单位为秒/s，显存不足可以设置此处强制切片\",\n                    value=0\n                )\n\n            with gr.Accordion(\"高级设置\", open=False):\n                noise_scale = gr.Number(\n                    label=\"noise_scale 影响音质，默认即可\",\n                    value=0.4\n                )\n                pad_seconds = gr.Number(\n                    label=\"推理音频pad秒数，由于未知原因开头结尾会有异响，pad一小段静音段后就不会出现\",\n                    value=0.5\n                )\n                lg_num = gr.Number(\n                    label=\"两端音频切片的交叉淡入长度，如果自动切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值0，注意，该设置会影响推理速度，单位为秒/s\",\n                    value=1\n                )\n                lgr_num = gr.Number(\n                    label=\"自动音频切片后，需要舍弃每段切片的头尾。该参数设置交叉长度保留的比例，范围0-1，左开右闭\",\n                    value=0.75\n                )\n                second_encoding = gr.Checkbox(\n                    label=\"二次编码，浅扩散前会对原始音频进行二次编码,效果两极分化，默认关闭\",\n                    value=False\n                )\n                loudness_envelope_adjustment = gr.Number(\n                    label=\"输入源响度包络替换输出响度包络融合比例，越靠近1越使用输出响度包络\",\n                    value=0\n                )\n                use_spk_mix = gr.Checkbox(\n                    label=\"动态声线融合，仅提供开关，不建议开启\",\n                    value=False, interactive=False\n                )\n\n            with gr.Row():\n                vc_submit = gr.Button(\"音频转换\", variant=\"primary\")\n                vc_tts_submit = gr.Button(\"文本转语音\", variant=\"primary\")\n            vc_output1 = gr.Textbox(label=\"输出信息\")\n            vc_output2 = gr.Audio(label=\"输出音频\")\n    with gr.Tabs():\n        with gr.Row(variant=\"panel\"):\n            with gr.Column():\n                gr.Markdown(value=\"\"\"\n                * * *\n\n                **调试设置**\n                \"\"\")\n                with gr.Row():\n                    debug_button = gr.Checkbox(label=\"启动Debug，仅在终端运行时有效，会在vscode或者pycharm终端显示详细报错\", value=debug)                \n        debug_button.change(debug_change,[],[])\n       \n\n```\n\n\n\n\n\n按键绑定\n\n```python\n        inference_tab.select(refresh_options,[],[choice_ckpt,config_choice,cluster_choice,diff_choice,diff_config_choice])\n        choice_ckpt.change(auto_load, [choice_ckpt], [model_branch, config_choice, config_info])  \n        config_choice.change(load_json_encoder, [config_choice, choice_ckpt], [config_info])\n        diff_choice.change(auto_load_diff, [diff_choice], [diff_config_choice])\n        #自动装载配置文件\n\n        loadckpt.click(load_model_func,[choice_ckpt,cluster_choice,config_choice,enhance,diff_choice,diff_config_choice,only_diffusion,use_spk_mix,using_device,diffusion_method,diffusion_speedup,cl_num,vocoder_choice],[model_message, sid, cl_num, k_step])\n        unload.click(model_empty_cache, [], [sid, model_message])\n        vc_submit.click(vc_fn, [output_format, sid, vc_input, vc_transform,auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold,k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment], [vc_output1, vc_output2])\n        vc_tts_submit.click(tts_fn, [text_input, tts_gender, tts_lang, tts_rate, tts_volume, output_format, sid, vc_transform,auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold,k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment], [vc_output1, vc_output2])\n        #推理相关按键绑定\n```\n\n在项目工具infer_tool.py内作如下修改\n\n```python\n#添加tqdm\nfrom tqdm import tqdm\n\n#并且在446行 \nfor (slice_tag, data) in audio_data:#改为\nfor (slice_tag, data) in tqdm(audio_data):#用于显示进度条\n```\n\n### 预存安装信息\n\n![1712389123101](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712389141182.png)\n\n![1712484163277](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712484163277.png)-\n\n\n\n![1712482664500](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712482664500.png)\n\n如果您将函数`list_files`的类型注解从`-> list[Path]`修改为没有指定具体类型，即去掉具体类型的注解，那么就不会再触发类型错误。这是因为Python的类型提示是可选的，您可以选择添加或删除它们，对于静态类型检查器而言，如果没有提供类型注解，它将无法对类型进行验证，因此不会再引发类型错误。\n\n因此，如果您考虑删除特定的类型提示是为了避免类型错误，这是一个可行的方法。 但要注意，类型提示的存在可以帮助他人更容易地理解代码，并且在编写大型项目时，类型提示也有助于提高代码的可维护性和可读性。\n\n\n\n```python\nfrom pathlib import Path\nfrom typing import Optional\n\nfrom loguru import logger\nfrom tqdm import tqdm\n\nfrom fap.utils.file import AUDIO_EXTENSIONS, list_files\n\n\ndef length(\n    input_dir: str,\n    recursive: bool = False,\n    visualize: bool = False,\n    long_threshold: Optional[float] = None,\n    short_threshold: Optional[float] = None,\n):\n    \"\"\"\n    Get the length of all audio files in a directory\n    \"\"\"\n\n    import soundfile as sf\n    from matplotlib import pyplot as plt\n\n    input_dir = Path(input_dir)\n    files = list_files(input_dir, AUDIO_EXTENSIONS, recursive=recursive)\n    logger.info(f\"Found {len(files)} files, calculating length\")\n\n    infos = []\n    for file in tqdm(files, desc=\"Collecting infos\"):\n        sound = sf.SoundFile(str(file))\n        infos.append(\n            (\n                len(sound),\n                sound.samplerate,\n                len(sound) / sound.samplerate,\n                file.relative_to(input_dir),\n            )\n        )\n\n    # Duration\n    total_duration = sum(i[2] for i in infos)\n    avg_duration = total_duration / len(infos)\n    min_duration = min(i[2] for i in infos)\n    max_duration = max(i[2] for i in infos)\n    logger.info(f\"Total duration: {total_duration / 3600:.2f} hours\")\n    logger.info(f\"Average duration: {avg_duration:.2f} seconds\")\n    logger.info(f\"Max duration: {max(i[2] for i in infos):.2f} seconds\")\n    logger.info(f\"Min duration: {min(i[2] for i in infos):.2f} seconds\")\n\n    # Too Long\n    if long_threshold is not None:\n        long_files = [i for i in infos if i[2] > float(long_threshold)]\n\n        # sort by duration\n        if long_files:\n            long_files = sorted(long_files, key=lambda x: x[2], reverse=True)\n            logger.warning(\n                f\"Found {len(long_files)} files longer than {long_threshold} seconds\"\n            )\n            for i in [f\"{i[3]}: {i[2]:.2f}\" for i in long_files]:\n                logger.warning(f\"    {i}\")\n\n    # Too Short\n    if short_threshold is not None:\n        short_files = [i for i in infos if i[2] < float(short_threshold)]\n\n        if short_files:\n            short_files = sorted(short_files, key=lambda x: x[2], reverse=False)\n            logger.warning(\n                f\"Found {len(short_files)} files shorter than {short_threshold} seconds\"\n            )\n            for i in [f\"{i[3]}: {i[2]:.2f}\" for i in short_files]:\n                logger.warning(f\"    {i}\")\n\n    # Sample Rate\n    total_samplerate = sum(i[1] for i in infos)\n    avg_samplerate = total_samplerate / len(infos)\n    logger.info(f\"Average samplerate: {avg_samplerate:.2f}\")\n\n    if not visualize:\n        if short_threshold is not None:\n            return len(files), total_duration, avg_duration, min_duration, max_duration, short_files\n        else:\n            return len(files), total_duration, avg_duration, min_duration, max_duration, None\n        \n    # Visualize\n    plt.hist([i[2] for i in infos], bins=100)\n    plt.title(\n        f\"Distribution of audio lengths (Total: {len(infos)} files, {total_duration / 3600:.2f} hours)\"\n    )\n    plt.xlabel(\"Length (seconds)\")\n    plt.ylabel(\"Count\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    length()\n\n```\n\n在第二个版本的代码中，对函数`length`进行了一些修改。参数列表中的`recursive`、`visualize`、`long_threshold`和`short_threshold`现在是可选的，并且都有了默认值。此外，在返回结果的部分也进行了修改。如果`visualize`为`False`，函数会根据`short_threshold`是否为`None`返回不同的结果。在处理过长或过短音频文件时，输出信息的显示也稍微不同，指明了具体发现的长音频文件数或短音频文件数。\n\n需要删除并且修改一下文本内的内容\n\n```python\n# This file is edited from https://github.com/openvpi/audio-slicer/blob/main/slicer2.py\n\nfrom pathlib import Path\nfrom typing import Iterable, Union\n\nimport librosa\nimport numpy as np\nimport soundfile as sf\n\nfrom fish_audio_preprocess.utils.slice_audio import slice_by_max_duration\n\n\ndef merge_short_chunks(chunks, max_duration, rate):\n    merged_chunks = []\n    buffer, length = [], 0\n\n    for chunk in chunks:\n        if length + len(chunk) > max_duration * rate and len(buffer) > 0:\n            merged_chunks.append(np.concatenate(buffer))\n            buffer, length = [], 0\n        else:\n            buffer.append(chunk)\n            length += len(chunk)\n\n    if len(buffer) > 0:\n        merged_chunks.append(np.concatenate(buffer))\n\n    return merged_chunks\n\n\nclass Slicer:\n    def __init__(\n        self,\n        sr: int,\n        threshold: float = -40.0,\n        min_length: int = 5000,\n        min_interval: int = 300,\n        hop_size: int = 10,\n        max_sil_kept: int = 5000,\n    ):\n        if not min_length >= min_interval >= hop_size:\n            raise ValueError(\n                \"The following condition must be satisfied: min_length >= min_interval >= hop_size\"\n            )\n\n        if not max_sil_kept >= hop_size:\n            raise ValueError(\n                \"The following condition must be satisfied: max_sil_kept >= hop_size\"\n            )\n\n        min_interval = sr * min_interval / 1000\n        self.threshold = 10 ** (threshold / 20.0)\n        self.hop_size = round(sr * hop_size / 1000)\n        self.win_size = min(round(min_interval), 4 * self.hop_size)\n        self.min_length = round(sr * min_length / 1000 / self.hop_size)\n        self.min_interval = round(min_interval / self.hop_size)\n        self.max_sil_kept = round(sr * max_sil_kept / 1000 / self.hop_size)\n\n    def _apply_slice(self, waveform, begin, end):\n        if len(waveform.shape) > 1:\n            return waveform[\n                :, begin * self.hop_size : min(waveform.shape[1], end * self.hop_size)\n            ]\n        else:\n            return waveform[\n                begin * self.hop_size : min(waveform.shape[0], end * self.hop_size)\n            ]\n\n    def slice(self, waveform):\n        if len(waveform.shape) > 1:\n            samples = waveform.mean(axis=0)\n        else:\n            samples = waveform\n\n        if samples.shape[0] <= self.min_length:\n            return [waveform]\n\n        rms_list = librosa.feature.rms(\n            y=samples, frame_length=self.win_size, hop_length=self.hop_size\n        ).squeeze(0)\n        sil_tags = []\n        silence_start = None\n        clip_start = 0\n\n        for i, rms in enumerate(rms_list):\n            # Keep looping while frame is silent.\n            if rms < self.threshold:\n                # Record start of silent frames.\n                if silence_start is None:\n                    silence_start = i\n                continue\n\n            # Keep looping while frame is not silent and silence start has not been recorded.\n            if silence_start is None:\n                continue\n\n            # Clear recorded silence start if interval is not enough or clip is too short\n            is_leading_silence = silence_start == 0 and i > self.max_sil_kept\n            need_slice_middle = (\n                i - silence_start >= self.min_interval\n                and i - clip_start >= self.min_length\n            )\n\n            if not is_leading_silence and not need_slice_middle:\n                silence_start = None\n                continue\n\n            # Need slicing. Record the range of silent frames to be removed.\n            if i - silence_start <= self.max_sil_kept:\n                pos = rms_list[silence_start : i + 1].argmin() + silence_start\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos))\n                else:\n                    sil_tags.append((pos, pos))\n\n                clip_start = pos\n            elif i - silence_start <= self.max_sil_kept * 2:\n                pos = rms_list[\n                    i - self.max_sil_kept : silence_start + self.max_sil_kept + 1\n                ].argmin()\n                pos += i - self.max_sil_kept\n                pos_l = (\n                    rms_list[\n                        silence_start : silence_start + self.max_sil_kept + 1\n                    ].argmin()\n                    + silence_start\n                )\n                pos_r = (\n                    rms_list[i - self.max_sil_kept : i + 1].argmin()\n                    + i\n                    - self.max_sil_kept\n                )\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos_r))\n                    clip_start = pos_r\n                else:\n                    sil_tags.append((min(pos_l, pos), max(pos_r, pos)))\n                    clip_start = max(pos_r, pos)\n            else:\n                pos_l = (\n                    rms_list[\n                        silence_start : silence_start + self.max_sil_kept + 1\n                    ].argmin()\n                    + silence_start\n                )\n                pos_r = (\n                    rms_list[i - self.max_sil_kept : i + 1].argmin()\n                    + i\n                    - self.max_sil_kept\n                )\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos_r))\n                else:\n                    sil_tags.append((pos_l, pos_r))\n\n                clip_start = pos_r\n            silence_start = None\n\n        # Deal with trailing silence.\n        total_frames = rms_list.shape[0]\n        if (\n            silence_start is not None\n            and total_frames - silence_start >= self.min_interval\n        ):\n            silence_end = min(total_frames, silence_start + self.max_sil_kept)\n            pos = rms_list[silence_start : silence_end + 1].argmin() + silence_start\n            sil_tags.append((pos, total_frames + 1))\n\n        # Apply and return slices.\n        if len(sil_tags) == 0:\n            return [waveform]\n        else:\n            chunks = []\n\n            if sil_tags[0][0] > 0:\n                chunks.append(self._apply_slice(waveform, 0, sil_tags[0][0]))\n\n            for i in range(len(sil_tags) - 1):\n                chunks.append(\n                    self._apply_slice(waveform, sil_tags[i][1], sil_tags[i + 1][0])\n                )\n\n            if sil_tags[-1][1] < total_frames:\n                chunks.append(\n                    self._apply_slice(waveform, sil_tags[-1][1], total_frames)\n                )\n\n            return chunks\n\n\ndef slice_audio_v2(\n    audio: np.ndarray,\n    rate: int,\n    min_duration: float = 5.0,\n    max_duration: float = 30.0,\n    min_silence_duration: float = 0.3,\n    top_db: int = -40,\n    hop_length: int = 10,\n    max_silence_kept: float = 0.5,\n    merge_short: bool = False,\n) -> Iterable[np.ndarray]:\n    \"\"\"Slice audio by silence\n\n    Args:\n        audio: audio data, in shape (samples, channels)\n        rate: sample rate\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n        merge_short: merge short slices automatically\n\n    Returns:\n        Iterable of sliced audio\n    \"\"\"\n\n    if len(audio) / rate < min_duration:\n        sliced_by_max_duration_chunk = slice_by_max_duration(audio, max_duration, rate)\n        yield from merge_short_chunks(\n            sliced_by_max_duration_chunk, max_duration, rate\n        ) if merge_short else sliced_by_max_duration_chunk\n        return\n\n    slicer = Slicer(\n        sr=rate,\n        threshold=top_db,\n        min_length=min_duration * 1000,\n        min_interval=min_silence_duration * 1000,\n        hop_size=hop_length,\n        max_sil_kept=max_silence_kept * 1000,\n    )\n\n    sliced_audio = slicer.slice(audio)\n    if merge_short:\n        sliced_audio = merge_short_chunks(sliced_audio, max_duration, rate)\n\n    for chunk in sliced_audio:\n        sliced_by_max_duration_chunk = slice_by_max_duration(chunk, max_duration, rate)\n        yield from sliced_by_max_duration_chunk\n\n\ndef slice_audio_file_v2(\n    input_file: Union[str, Path],\n    output_dir: Union[str, Path],\n    min_duration: float = 5.0,\n    max_duration: float = 30.0,\n    min_silence_duration: float = 0.3,\n    top_db: int = -40,\n    hop_length: int = 10,\n    max_silence_kept: float = 0.5,\n    flat_layout: bool = False,\n    merge_short: bool = False,\n) -> None:\n    \"\"\"\n    Slice audio by silence and save to output folder\n\n    Args:\n        input_file: input audio file\n        output_dir: output folder\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n        flat_layout: use flat directory structure\n        merge_short: merge short slices automatically\n    \"\"\"\n\n    output_dir = Path(output_dir)\n\n    audio, rate = librosa.load(str(input_file), sr=None, mono=True)\n    for idx, sliced in enumerate(\n        slice_audio_v2(\n            audio,\n            rate,\n            min_duration=min_duration,\n            max_duration=max_duration,\n            min_silence_duration=min_silence_duration,\n            top_db=top_db,\n            hop_length=hop_length,\n            max_silence_kept=max_silence_kept,\n            merge_short=merge_short,\n        )\n    ):\n        if flat_layout:\n            sf.write(str(output_dir) + f\"_{idx:04d}.wav\", sliced, rate)\n        else:\n            sf.write(str(output_dir / f\"{idx:04d}.wav\"), sliced, rate)\n\n```\n\n修改后代码如下\n\n```python\n# This file is edited from https://github.com/openvpi/audio-slicer/blob/main/slicer2.py\n\nfrom pathlib import Path\nfrom typing import Iterable, Union\n\nimport librosa\nimport numpy as np\nimport soundfile as sf\n\nfrom fish_audio_preprocess.utils.slice_audio import slice_by_max_duration\n\n\nclass Slicer:\n    def __init__(\n        self,\n        sr: int,\n        threshold: float = -40.0,\n        min_length: int = 5000,\n        min_interval: int = 300,\n        hop_size: int = 10,\n        max_sil_kept: int = 5000,\n    ):\n        if not min_length >= min_interval >= hop_size:\n            raise ValueError(\n                \"The following condition must be satisfied: min_length >= min_interval >= hop_size\"\n            )\n\n        if not max_sil_kept >= hop_size:\n            raise ValueError(\n                \"The following condition must be satisfied: max_sil_kept >= hop_size\"\n            )\n\n        min_interval = sr * min_interval / 1000\n        self.threshold = 10 ** (threshold / 20.0)\n        self.hop_size = round(sr * hop_size / 1000)\n        self.win_size = min(round(min_interval), 4 * self.hop_size)\n        self.min_length = round(sr * min_length / 1000 / self.hop_size)\n        self.min_interval = round(min_interval / self.hop_size)\n        self.max_sil_kept = round(sr * max_sil_kept / 1000 / self.hop_size)\n\n    def _apply_slice(self, waveform, begin, end):\n        if len(waveform.shape) > 1:\n            return waveform[\n                :, begin * self.hop_size : min(waveform.shape[1], end * self.hop_size)\n            ]\n        else:\n            return waveform[\n                begin * self.hop_size : min(waveform.shape[0], end * self.hop_size)\n            ]\n\n    def slice(self, waveform):\n        if len(waveform.shape) > 1:\n            samples = waveform.mean(axis=0)\n        else:\n            samples = waveform\n\n        if samples.shape[0] <= self.min_length:\n            return [waveform]\n\n        rms_list = librosa.feature.rms(\n            y=samples, frame_length=self.win_size, hop_length=self.hop_size\n        ).squeeze(0)\n        sil_tags = []\n        silence_start = None\n        clip_start = 0\n\n        for i, rms in enumerate(rms_list):\n            # Keep looping while frame is silent.\n            if rms < self.threshold:\n                # Record start of silent frames.\n                if silence_start is None:\n                    silence_start = i\n                continue\n\n            # Keep looping while frame is not silent and silence start has not been recorded.\n            if silence_start is None:\n                continue\n\n            # Clear recorded silence start if interval is not enough or clip is too short\n            is_leading_silence = silence_start == 0 and i > self.max_sil_kept\n            need_slice_middle = (\n                i - silence_start >= self.min_interval\n                and i - clip_start >= self.min_length\n            )\n\n            if not is_leading_silence and not need_slice_middle:\n                silence_start = None\n                continue\n\n            # Need slicing. Record the range of silent frames to be removed.\n            if i - silence_start <= self.max_sil_kept:\n                pos = rms_list[silence_start : i + 1].argmin() + silence_start\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos))\n                else:\n                    sil_tags.append((pos, pos))\n\n                clip_start = pos\n            elif i - silence_start <= self.max_sil_kept * 2:\n                pos = rms_list[\n                    i - self.max_sil_kept : silence_start + self.max_sil_kept + 1\n                ].argmin()\n                pos += i - self.max_sil_kept\n                pos_l = (\n                    rms_list[\n                        silence_start : silence_start + self.max_sil_kept + 1\n                    ].argmin()\n                    + silence_start\n                )\n                pos_r = (\n                    rms_list[i - self.max_sil_kept : i + 1].argmin()\n                    + i\n                    - self.max_sil_kept\n                )\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos_r))\n                    clip_start = pos_r\n                else:\n                    sil_tags.append((min(pos_l, pos), max(pos_r, pos)))\n                    clip_start = max(pos_r, pos)\n            else:\n                pos_l = (\n                    rms_list[\n                        silence_start : silence_start + self.max_sil_kept + 1\n                    ].argmin()\n                    + silence_start\n                )\n                pos_r = (\n                    rms_list[i - self.max_sil_kept : i + 1].argmin()\n                    + i\n                    - self.max_sil_kept\n                )\n\n                if silence_start == 0:\n                    sil_tags.append((0, pos_r))\n                else:\n                    sil_tags.append((pos_l, pos_r))\n\n                clip_start = pos_r\n            silence_start = None\n\n        # Deal with trailing silence.\n        total_frames = rms_list.shape[0]\n        if (\n            silence_start is not None\n            and total_frames - silence_start >= self.min_interval\n        ):\n            silence_end = min(total_frames, silence_start + self.max_sil_kept)\n            pos = rms_list[silence_start : silence_end + 1].argmin() + silence_start\n            sil_tags.append((pos, total_frames + 1))\n\n        # Apply and return slices.\n        if len(sil_tags) == 0:\n            return [waveform]\n        else:\n            chunks = []\n\n            if sil_tags[0][0] > 0:\n                chunks.append(self._apply_slice(waveform, 0, sil_tags[0][0]))\n\n            for i in range(len(sil_tags) - 1):\n                chunks.append(\n                    self._apply_slice(waveform, sil_tags[i][1], sil_tags[i + 1][0])\n                )\n\n            if sil_tags[-1][1] < total_frames:\n                chunks.append(\n                    self._apply_slice(waveform, sil_tags[-1][1], total_frames)\n                )\n\n            return chunks\n\n\ndef slice_audio_v2(\n    audio: np.ndarray,\n    rate: int,\n    min_duration: float = 5.0,\n    max_duration: float = 30.0,\n    min_silence_duration: float = 0.3,\n    top_db: int = -40,\n    hop_length: int = 10,\n    max_silence_kept: float = 0.5,\n) -> Iterable[np.ndarray]:\n    \"\"\"Slice audio by silence\n\n    Args:\n        audio: audio data, in shape (samples, channels)\n        rate: sample rate\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n\n    Returns:\n        Iterable of sliced audio\n    \"\"\"\n\n    if len(audio) / rate < min_duration:\n        yield from slice_by_max_duration(audio, max_duration, rate)\n        return\n\n    slicer = Slicer(\n        sr=rate,\n        threshold=top_db,\n        min_length=min_duration * 1000,\n        min_interval=min_silence_duration * 1000,\n        hop_size=hop_length,\n        max_sil_kept=max_silence_kept * 1000,\n    )\n\n    for chunk in slicer.slice(audio):\n        yield from slice_by_max_duration(chunk, max_duration, rate)\n\n\ndef slice_audio_file_v2(\n    input_file: Union[str, Path],\n    output_dir: Union[str, Path],\n    min_duration: float = 5.0,\n    max_duration: float = 30.0,\n    min_silence_duration: float = 0.3,\n    top_db: int = -40,\n    hop_length: int = 10,\n    max_silence_kept: float = 0.5,\n) -> None:\n    \"\"\"\n    Slice audio by silence and save to output folder\n\n    Args:\n        input_file: input audio file\n        output_dir: output folder\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n    \"\"\"\n\n    output_dir = Path(output_dir)\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    input_file_name = Path(input_file).stem\n    audio, rate = librosa.load(str(input_file), sr=None, mono=True)\n    for idx, sliced in enumerate(\n        slice_audio_v2(\n            audio,\n            rate,\n            min_duration=min_duration,\n            max_duration=max_duration,\n            min_silence_duration=min_silence_duration,\n            top_db=top_db,\n            hop_length=hop_length,\n            max_silence_kept=max_silence_kept,\n        )\n    ):\n        sf.write(str(output_dir / f\"{input_file_name}_{idx:04d}.wav\"), sliced, rate)\n\n```\n\n\n\n1. \n\n2. *移除了merge_short参数**：原始代码中的`merge_short`参数用于控制是否自动合并短音频片段，我在修改后的代码中将其移除，以简化逻辑。\n\n3. **修改了判定条件**：我将原始代码中对于音频长度小于`min_duration`时的处理逻辑进行了修改。原先在这种情况下会执行合并短片段的操作，而我修改后则直接通过`slice_audio_v2`函数来裁剪音频，而不再合并或限制数量。\n\n4. **删除了返回值**：由于现在裁剪条目的数量不再有限制，所以在函数的最后不再需要返回`None`，因为函数会一直运行直到音频全部被处理完毕。\n\n   二次修改\n\n   ```python\n   file_name_changes = 0\n   current_input_file_name = None\n   #用于进行中文消除\n   def slice_audio_file_v2(\n       input_file: Union[str, Path],\n       output_dir: Union[str, Path],\n       min_duration: float = 5.0,\n       max_duration: float = 30.0,\n       min_silence_duration: float = 0.3,\n       top_db: int = -40,\n       hop_length: int = 10,\n       max_silence_kept: float = 0.5,\n   ) -> None:\n       global file_name_changes\n       global current_input_file_name\n   \n       output_dir = Path(output_dir)\n       output_dir.mkdir(parents=True, exist_ok=True)\n   \n       input_file_name = Path(input_file).stem\n   \n       if input_file_name != current_input_file_name:\n           file_name_changes += 1\n           current_input_file_name = input_file_name\n   \n       audio, rate = librosa.load(str(input_file), sr=None, mono=True)\n       for idx, sliced in enumerate(\n           slice_audio_v2(\n               audio,\n               rate,\n               min_duration=min_duration,\n               max_duration=max_duration,\n               min_silence_duration=min_silence_duration,\n               top_db=top_db,\n               hop_length=hop_length,\n               max_silence_kept=max_silence_kept,\n           )\n       ):\n           sf.write(str(output_dir / f\"{file_name_changes:04d}_{idx:04d}.wav\"), sliced, rate)#输出为对应人声干音的序号_切片在该干音的序号。\n   \n   ```\n\n   定义了一个全局变量，作用是对切片里的中文名进行处理，因为模型不允许中文输入。\n\n   ```python\n   import os\n   import PyInstaller.__main__\n   import tkinter as tk\n   from tkinter import filedialog\n   import subprocess\n   \n   def select_bat_file():\n       root = tk.Tk()\n       root.withdraw()\n       file_path = filedialog.askopenfilename(filetypes=[(\"BAT文件\", \"*.bat\")])\n       return file_path\n   \n   def create_python_script(bat_file):\n       with open('temp_script.py', 'w', encoding='utf-8') as f:\n           f.write('import subprocess\\n')\n           f.write('import tkinter as tk\\n\\n')\n           \n           f.write('# 创建一个关闭cmd进程的函数\\n')\n           f.write('def close_process():\\n')\n           f.write('    subprocess.call(\"taskkill /f /im cmd.exe\", shell=True)\\n')\n           f.write('    exit()\\n\\n')\n           \n           f.write('# 创建GUI窗口\\n')\n           f.write('root = tk.Tk()\\n')\n           f.write('root.title(\"关闭CMD进程\")\\n\\n')\n           \n           f.write('# 创建关闭按钮\\n')\n           f.write('button = tk.Button(root, text=\"关闭CMD进程\", command=close_process)\\n')\n           f.write('button.pack()\\n\\n')\n           \n           f.write('# 使用subprocess调用BAT文件\\n')\n           f.write(f'subprocess.call([\"cmd\", \"/c\", \"{bat_file}\"], shell=True)\\n')\n   \n           f.write('root.mainloop()\\n')\n   \n   def convert_bat_to_exe(bat_file, output_exe_name):\n       create_python_script(bat_file)\n       output_dir = os.path.dirname(bat_file)\n       PyInstaller.__main__.run([\n           '--onefile',\n           # '--noconsole',  # 移除 --noconsole 参数\n           '--distpath=' + output_dir,\n           f'--name={output_exe_name}',\n           'temp_script.py'\n       ])\n       os.remove('temp_script.py')\n       print(\"BAT文件成功转换为EXE文件！\")\n   \n   if __name__ == \"__main__\":\n       bat_file_path = select_bat_file()\n       \n       if bat_file_path.endswith(\".bat\"):\n           output_exe_name = input(\"请输入输出EXE文件的名称：\")\n           convert_bat_to_exe(bat_file_path, output_exe_name)\n       else:\n           print(\"请勾选有效的BAT文件。\")\n   \n   ```\n\n   bat转exe方法\n\n   待转bat如下\n\n   ```powershell\n   @echo off\n   chcp 65001\n   echo ================================ 稍等片刻，系统正在加载 ================================\n   echo =======================================================================================\n   echo ================================ ***请勿关闭本窗口*** ================================\n   echo =======================================================================================\n   echo ================================ ***正在启动，即将自动跳转*** ================================\n   .\\env\\python.exe index.py\n   \n   pause\n   ```\n\n修改实现图形化窗口控制\n\n```python\nimport os\nimport PyInstaller.__main__\nimport tkinter as tk\nfrom tkinter import filedialog\nimport subprocess\nimport threading  # 导入 threading 模块\n\ndef select_bat_file():\n    root = tk.Tk()\n    root.withdraw()\n    file_path = filedialog.askopenfilename(filetypes=[(\"BAT文件\", \"*.bat\")])\n    return file_path\n\ndef create_python_script(bat_file):\n    with open('temp_script.py', 'w', encoding='utf-8') as f:\n        f.write('import subprocess\\n')\n        f.write('import tkinter as tk\\n')\n        f.write('import threading\\n\\n')  # 导入 threading 模块\n        \n        f.write('def close_process():\\n')\n        f.write('    subprocess.call([\"taskkill\", \"/F\", \"/T\", \"/IM\", \"cmd.exe\"], shell=True)\\n')\n        f.write('    exit()\\n\\n')\n\n        f.write('def run_bat(bat_file):\\n')\n        f.write('    script = \"\"\"start /B cmd /c {}\\nexit\"\"\"\\n'.format(bat_file))  # 创建一个批处理脚本\n        f.write('    subprocess.Popen(script, shell=True)\\n\\n')\n        \n        f.write('def create_window():\\n')\n        f.write('    root = tk.Tk()\\n')\n        f.write('    root.title(\"关闭CMD进程\")\\n\\n')\n        \n        f.write('    button = tk.Button(root, text=\"关闭CMD进程\", command=close_process)\\n')\n        f.write('    button.pack()\\n\\n')\n        \n        f.write('    root.mainloop()\\n')\n\n        f.write('bat_file = r\"{}\"\\n'.format(bat_file.replace('\\\\', '\\\\\\\\')))\n        f.write('threading.Thread(target=run_bat, args=(bat_file,)).start()\\n')\n        f.write('create_window()')\n\ndef convert_bat_to_exe(bat_file, output_exe_name):\n    create_python_script(bat_file)\n    output_dir = os.path.dirname(bat_file)\n    PyInstaller.__main__.run([\n        '--onefile',\n        '--noconsole',  # 移除 --noconsole 参数\n        '--distpath=' + output_dir,\n        f'--name={output_exe_name}',\n        'temp_script.py'\n    ])\n    os.remove('temp_script.py')\n    print(\"BAT文件成功转换为EXE文件！\")\n\nif __name__ == \"__main__\":\n    bat_file_path = select_bat_file()\n    \n    if bat_file_path.endswith(\".bat\"):\n        output_exe_name = input(\"请输入输出EXE文件的名称：\")\n        convert_bat_to_exe(bat_file_path, output_exe_name)\n    else:\n        print(\"请勾选有效的BAT文件。\")\n\n```\n\n修改实现输出与重启\n\n```python\nimport os\nimport PyInstaller.__main__\nimport tkinter as tk\nfrom tkinter import filedialog\nimport subprocess\nimport threading\n\ndef select_bat_file():\n    # 创建选择BAT文件的窗口\n    root = tk.Tk()\n    root.withdraw()\n    # 弹出文件对话框并返回选择的BAT文件路径\n    file_path = filedialog.askopenfilename(filetypes=[(\"BAT文件\", \"*.bat\")])\n    return file_path\n\ndef create_python_script(bat_file):\n    with open('temp_script.py', 'w', encoding='utf-8') as f:\n        # 写入Python脚本内容\n        f.write('import subprocess\\n')\n        f.write('import tkinter as tk\\n')\n        f.write('import threading\\n\\n')\n        \n        # 关闭进程的函数\n        f.write('def close_process():\\n')\n        f.write('    # 调用系统命令杀死cmd进程\\n')\n        f.write('    subprocess.call([\"taskkill\", \"/F\", \"/T\", \"/IM\", \"cmd.exe\"], shell=True)\\n')\n        f.write('    # 修改状态标签显示文本\\n')\n        f.write('    status_label.config(text=\"成功关闭 CMD 进程\")\\n')\n        f.write('    # 10秒后清空状态标签\\n')\n        f.write('    root.after(10000, clear_status)\\n\\n')\n\n        # 重启cmd进程的函数\n        f.write('def restart_cmd(bat_file):\\n')\n        f.write('    # 修改状态标签显示文本\\n')\n        f.write('    status_label.config(text=\"正在重启 CMD 进程...\")\\n')\n        f.write('    # 执行BAT文件\\n')\n        f.write('    run_bat(bat_file)\\n')\n\n        # 执行BAT文件的函数\n        f.write('def run_bat(bat_file):\\n')\n        f.write('    # 构建启动BAT文件的命令\\n')\n        f.write('    script = \"\"\"start /B cmd /c {}\\nexit\"\"\"\\n'.format(bat_file))\n        f.write('    # 使用subprocess启动新进程\\n')\n        f.write('    subprocess.Popen(script, shell=True)\\n\\n')\n        \n        # 创建窗口的函数\n        f.write('def create_window():\\n')\n        f.write('    global root\\n')\n        f.write('    global status_label\\n')\n        \n        f.write('    # 创建主窗口\\n')\n        f.write('    root = tk.Tk()\\n')\n        f.write('    root.title(\"关闭和重启 CMD 进程\")\\n\\n')\n        \n        # 创建状态标签并放置在窗口中\n        f.write('    status_label = tk.Label(root, text=\"\", pady=10)\\n')\n        f.write('    status_label.pack()\\n\\n')\n\n        # 创建关闭按钮\n        f.write('    button_close = tk.Button(root, text=\"关闭 CMD 进程\", command=close_process)\\n')\n        f.write('    button_close.pack()\\n\\n')\n\n        # 创建重启标签并放置在窗口中\n        f.write('    restart_label = tk.Label(root, text=\"重新启动 CMD 进程\")\\n')\n        f.write('    restart_label.pack()\\n\\n')\n        \n        # 创建重启按钮\n        f.write('    button_restart = tk.Button(root, text=\"重启 CMD\", command=lambda: restart_cmd(bat_file))\\n')\n        f.write('    button_restart.pack()\\n\\n')\n\n        # 运行窗口程序\n        f.write('    root.mainloop()\\n')\n\n        # 设置BAT文件路径并启动线程执行BAT文件\n        f.write('bat_file = r\"{}\"\\n'.format(bat_file.replace('\\\\', '\\\\\\\\')))\n        f.write('threading.Thread(target=run_bat, args=(bat_file,)).start()\\n')\n        f.write('create_window()')\n\ndef clear_status():\n    # 清空状态标签的文本\n    status_label.config(text=\"\")\n\ndef convert_bat_to_exe(bat_file, output_exe_name):\n    # 创建Python脚本\n    create_python_script(bat_file)\n    # 获取输出目录\n    output_dir = os.path.dirname(bat_file)\n    # 使用PyInstaller转换为EXE文件\n    PyInstaller.__main__.run([\n        '--onefile',\n        '--noconsole',\n        '--distpath=' + output_dir,\n        f'--name={output_exe_name}',\n        'temp_script.py'\n    ])\n    # 删除临时Python脚本文件\n    os.remove('temp_script.py')\n    print(\"BAT文件成功转换为EXE文件！\")\n\nif __name__ == \"__main__\":\n    # 选择BAT文件\n    bat_file_path = select_bat_file()\n    \n    if bat_file_path.endswith(\".bat\"):\n        # 输入输出EXE文件的名称\n        output_exe_name = input(\"请输入输出EXE文件的名称：\")\n        # 转换BAT文件为EXE文件\n        convert_bat_to_exe(bat_file_path, output_exe_name)\n    else:\n        print(\"请勾选有效的BAT文件。\")\n\n```\n\n","slug":"毕业设计开发文档记录","published":1,"updated":"2024-05-20T11:03:17.145Z","comments":1,"layout":"post","photos":[],"_id":"clwnrkl47001fosw5gds3e17o","content":"<h4 id=\"部分文件处理代码学习自-羽毛布团大佬\"><a href=\"#部分文件处理代码学习自-羽毛布团大佬\" class=\"headerlink\" title=\"部分文件处理代码学习自 羽毛布团大佬\"></a>部分文件处理代码学习自 羽毛布团大佬</h4><h4 id=\"本文仅记录本人从零开始搭建毕设前后端过程。\"><a href=\"#本文仅记录本人从零开始搭建毕设前后端过程。\" class=\"headerlink\" title=\"本文仅记录本人从零开始搭建毕设前后端过程。\"></a>本文仅记录本人从零开始搭建毕设前后端过程。</h4><h1 id=\"整体打样-使用python-gradio库\"><a href=\"#整体打样-使用python-gradio库\" class=\"headerlink\" title=\"整体打样(使用python gradio库)\"></a>整体打样(使用python gradio库)</h1><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">index <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Blocks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> index<span class=\"token punctuation\">:</span>\n    gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''### 本系统基于sovits框架4.1版本\n                毕业设计：基于sovits项目的AI音乐生成与创作系统\n                '''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Tabs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"训练模块\"><a href=\"#训练模块\" class=\"headerlink\" title=\"训练模块\"></a>训练模块</h1><p>此处使用的库有</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> gradio <span class=\"token keyword\">as</span> gr\n<span class=\"token keyword\">import</span> re<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"数据装载\"><a href=\"#数据装载\" class=\"headerlink\" title=\"数据装载\"></a>数据装载</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"训练\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> train_tab<span class=\"token punctuation\">:</span>   \n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                       ### 模型训练模块\n                        \n                       \"\"\"</span><span class=\"token punctuation\">)</span>\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\"</span><span class=\"token punctuation\">)</span>\n            raw_dirs_list<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"加载原始数据集:\"</span><span class=\"token punctuation\">)</span>\n            get_raw_dirs<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"识别数据集\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                        **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中，</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">get_raw_dirs<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>load_raw_dirs<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>raw_dirs_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[1]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>绑定点击事件，输入为load_raw_dirs，输出给到raw_dirs_list</p>\n<h4 id=\"load-raw-dirs方法\"><a href=\"#load-raw-dirs方法\" class=\"headerlink\" title=\"load_raw_dirs方法\"></a>load_raw_dirs方法</h4><p>预定义全局变量</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">precheck_ok <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nraw_path <span class=\"token operator\">=</span> <span class=\"token string\">\"dataset_raw\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#数据集加载[1]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_raw_dirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> precheck_ok\n    precheck_ok <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    allowed_pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'^[a-zA-Z0-9_@#$%^&amp;()_+\\-=\\s\\.]*$'</span><span class=\"token punctuation\">)</span>\n    illegal_files <span class=\"token operator\">=</span> illegal_dataset <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> root<span class=\"token punctuation\">,</span> dirs<span class=\"token punctuation\">,</span> files <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>raw_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">dir</span> <span class=\"token keyword\">in</span> dirs<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> allowed_pattern<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                illegal_dataset<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> illegal_dataset<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"数据集文件夹名只能包含数字、字母、下划线，以下文件夹名称非法：\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>illegal_dataset<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n        <span class=\"token keyword\">if</span> root <span class=\"token operator\">!=</span> raw_path<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 只处理子文件夹内的文件</span>\n            <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> allowed_pattern<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> illegal_files<span class=\"token punctuation\">:</span>\n                    illegal_files<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.wav'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> illegal_files<span class=\"token punctuation\">:</span>\n                    illegal_files<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> illegal_files<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"数据集文件名只能包含数字、字母、下划线，且必须是.wav格式，以下文件后缀非法：\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>illegal_files<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n    spk_dirs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">for</span> entry <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>scandir<span class=\"token punctuation\">(</span>raw_path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> entry<span class=\"token punctuation\">.</span>is_dir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> spk_dirs<span class=\"token punctuation\">:</span>\n        precheck_ok <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> spk_dirs\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到数据集，请检查dataset_raw文件夹\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用以下代码显示页面（当完成预处理代码时需要添加队列方法）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">index.launch(server_name&#x3D;&quot;127.0.0.1&quot;,inbrowser&#x3D;True,quiet&#x3D;True)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"特征编码器与f0预测器选择\"><a href=\"#特征编码器与f0预测器选择\" class=\"headerlink\" title=\"特征编码器与f0预测器选择\"></a>特征编码器与f0预测器选择</h4><p>预定义全局变量：编码器与f0</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f0_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"crepe\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pm\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dio\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"harvest\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fcpe\"</span><span class=\"token punctuation\">]</span>\nENCODER_PRETRAIN <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"vec256l9\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/checkpoint_best_legacy_500.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/checkpoint_best_legacy_500.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/hubert-soft-0d54a1f4.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/medium.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"cnhubertlarge\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/chinese-hubert-large-fairseq-ckpt.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"dphubert\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/DPHuBERT-sp0.75.pth\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"wavlmbase+\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/WavLM-Base+.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"whisper-ppg-large\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/large-v2.pt\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\"</span><span class=\"token punctuation\">)</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                branch_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的编码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>encoder_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                f0_predictor_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的f0预测器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>f0_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于编码器是以字典形式存储，故encoder_list获取函数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##编码器获取[2]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_available_encoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 获取当前目录下的预训练模型文件列表</span>\n    current_pretrain <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 为每个预训练模型文件添加路径信息</span>\n    current_pretrain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain/\"</span> <span class=\"token operator\">+</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> model <span class=\"token keyword\">in</span> current_pretrain<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\"># 初始化编码器列表</span>\n    encoder_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\"># 遍历所有编码器-预训练模型路径字典中的项</span>\n    <span class=\"token keyword\">for</span> encoder<span class=\"token punctuation\">,</span> path <span class=\"token keyword\">in</span> ENCODER_PRETRAIN<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果某个编码器对应的预训练模型文件在当前目录下可用</span>\n        <span class=\"token keyword\">if</span> path <span class=\"token keyword\">in</span> current_pretrain<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 将该编码器添加到可用编码器列表中</span>\n            encoder_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> encoder_list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到这里，训练页面应该如图所示</p>\n<p>其中，点击识别数据集，能够在文本框看到raw目录下的数据集文件夹名，下方两个下拉框均可进行选取</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimg1710574509749.png\" alt=\"1710574509749\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710574631703.png\" alt=\"1710574631703\"></p>\n<p>加了个这玩意</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710578725862.png\" alt=\"1710578725862\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\"</span><span class=\"token punctuation\">)</span>\nopen_raw<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"打开dataset_raw文件夹\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"secondary\"</span><span class=\"token punctuation\">)</span>\nraw_dirs_list<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"加载原始数据集:\"</span><span class=\"token punctuation\">)</span>\nget_raw_dirs<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"识别数据集\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码改动如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##打开文件夹[4]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">open_dataset_raw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    folder_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dataset_raw'</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'explorer </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>folder_path<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span> \n\n\n<span class=\"token comment\">##绑定事件 在加载数据集一起</span>\n        open_raw<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>open_dataset_raw<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"数据集预处理\"><a href=\"#数据集预处理\" class=\"headerlink\" title=\"数据集预处理\"></a>数据集预处理</h4><p>至此，使用的库更新为</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> gradio <span class=\"token keyword\">as</span> gr\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> shutil\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">dataset_preprocess</span><span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> use_diff<span class=\"token punctuation\">,</span> vol_aug<span class=\"token punctuation\">,</span> skip_loudnorm<span class=\"token punctuation\">,</span> num_processes<span class=\"token punctuation\">,</span>tiny_enable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> precheck_ok<span class=\"token punctuation\">:</span>\n        diff_arg <span class=\"token operator\">=</span> <span class=\"token string\">\"--use_diff\"</span> <span class=\"token keyword\">if</span> use_diff <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span>\n        vol_aug_arg <span class=\"token operator\">=</span> <span class=\"token string\">\"--vol_aug\"</span> <span class=\"token keyword\">if</span> vol_aug <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span>\n        skip_loudnorm_arg <span class=\"token operator\">=</span> <span class=\"token string\">\"--skip_loudnorm\"</span> <span class=\"token keyword\">if</span> skip_loudnorm <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span>\n        tiny_arg <span class=\"token operator\">=</span> <span class=\"token string\">\"--tiny\"</span> <span class=\"token keyword\">if</span> tiny_enable <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span>\n        preprocess_commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">r\".\\env\\python.exe resample.py %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>skip_loudnorm_arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">r\".\\env\\python.exe preprocess_flist_config.py --speech_encoder %s %s %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> vol_aug_arg<span class=\"token punctuation\">,</span> tiny_arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">r\".\\env\\python.exe preprocess_hubert_f0.py --num_processes %s --f0_predictor %s %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>num_processes <span class=\"token punctuation\">,</span>f0_predictor<span class=\"token punctuation\">,</span> diff_arg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n        accumulated_output <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token comment\">##初始化输出参数</span>\n        <span class=\"token comment\">##清空数据集</span>\n        dataset <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token comment\">##获取文件列表</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> <span class=\"token builtin\">dir</span> <span class=\"token keyword\">in</span> dataset<span class=\"token punctuation\">:</span>\n                dataset_spk_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>dataset_spk_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    shutil<span class=\"token punctuation\">.</span>rmtree<span class=\"token punctuation\">(</span>dataset_spk_dir<span class=\"token punctuation\">)</span>\n                    accumulated_output <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"已删除旧数据集文件: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n\"</span></span>\n        <span class=\"token keyword\">for</span> command <span class=\"token keyword\">in</span> preprocess_commands<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>STDOUT<span class=\"token punctuation\">,</span> shell<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                accumulated_output <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Command(当前命令): </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>command<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, Using Encoder(特征编码器): </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>encoder<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, Using f0 Predictor(f0预测器): </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>f0_predictor<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n\"</span></span>\n                <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n                progress_line <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token string\">r\"it/s\"</span> <span class=\"token keyword\">in</span> line <span class=\"token keyword\">or</span> <span class=\"token string\">r\"s/it\"</span> <span class=\"token keyword\">in</span> line<span class=\"token punctuation\">:</span> <span class=\"token comment\">#防止进度条刷屏</span>\n                        progress_line <span class=\"token operator\">=</span> line\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        accumulated_output <span class=\"token operator\">+=</span> line\n                    <span class=\"token keyword\">if</span> progress_line <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">yield</span> accumulated_output <span class=\"token operator\">+</span> progress_line<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n                result<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> subprocess<span class=\"token punctuation\">.</span>CalledProcessError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>output\n                accumulated_output <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Error: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>result<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n\"</span></span>\n                <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">if</span> progress_line <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                accumulated_output <span class=\"token operator\">+=</span> progress_line\n            accumulated_output <span class=\"token operator\">+=</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span>\n            <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n            config_path <span class=\"token operator\">=</span> <span class=\"token string\">\"configs/config.json\"</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>config_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            config <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n        spk_name <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'spk'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span>spk_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token string\">\"未识别到数据集，请检查错误信息\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"至此前端排版如下\"><a href=\"#至此前端排版如下\" class=\"headerlink\" title=\"至此前端排版如下\"></a>至此前端排版如下</h4><p>增加了一些彩色字体</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   branch_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的编码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>encoder_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n   f0_predictor_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的f0预测器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>f0_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   use_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   skip_loudnorm <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n   num_processes <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\"</span><span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red;\">右侧选项仅为vec768l12提供支持。&lt;/span>  \n   响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n   TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n         \"\"\"</span><span class=\"token punctuation\">)</span>\n   vol_aug <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"响度嵌入/音量增强\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n   tiny_enable <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"TINY模型 \"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件&lt;/span>  \"\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   raw_preprocess<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"数据预处理\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n   regenerate_config_btn<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"重新生成配置文件\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\"</span><span class=\"token punctuation\">,</span> max_lines<span class=\"token operator\">=</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span><span class=\"token string\">\"预处理与特征处理完成，请检查右侧说话人列表，确认无误后点击写入配置文件\"</span><span class=\"token punctuation\">)</span>\n       speakers<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"说话人列表\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于使用了一个cmd命令行执行的函数，点击事件的绑定以及webui显示修改如下，其中，显示代码需要添加队列方法与对应参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">get_raw_dirs.click(load_raw_dirs,[],[raw_dirs_list])##[1]\nraw_preprocess.click(dataset_preprocess,[branch_selection,f0_predictor_selection, use_diff, vol_aug, skip_loudnorm, num_processes,tiny_enable],[preprocess_output,speakers])\nopen_raw.click(open_dataset_raw,[],[])##[4]      index.queue(concurrency_count&#x3D;1024,max_size&#x3D;2048).launch(server_name&#x3D;&quot;127.0.0.1&quot;,inbrowser&#x3D;True,quiet&#x3D;True)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>此时界面应该如图所示并且能够唤醒cmd界面进行训练</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710599401003.png\" alt=\"1710599401003\"></p>\n<p>增加清空输出模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##清理CMD输出</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">clear_output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"清理完毕\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">clear_preprocess_output<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>clear_output<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>preprocess_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[5]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时整个项目前端模板为</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"训练\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> train_tab<span class=\"token punctuation\">:</span>   \n     gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                ### 模型训练模块\n                 \n                \"\"\"</span><span class=\"token punctuation\">)</span>\n     gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\"</span><span class=\"token punctuation\">)</span>\n     open_raw<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"打开dataset_raw文件夹\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"secondary\"</span><span class=\"token punctuation\">)</span>\n     raw_dirs_list<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"加载原始数据集:\"</span><span class=\"token punctuation\">)</span>\n     get_raw_dirs<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"识别数据集\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n     gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                 **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                    **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                    **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                    **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                        \n        \"\"\"</span><span class=\"token punctuation\">)</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                    **dio**: 框架旧版本默认f0预测器，**性能差**  \n                    **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                    **rmvpe**: 目前最精准的预测器  \n                    **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n        \"\"\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        branch_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的编码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>encoder_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        f0_predictor_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的f0预测器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>f0_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        use_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        skip_loudnorm <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        num_processes <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\"</span><span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red;\">右侧选项仅为vec768l12提供支持。&lt;/span>  \n        响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n        TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n              \"\"\"</span><span class=\"token punctuation\">)</span>\n        vol_aug <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"响度嵌入/音量增强\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        tiny_enable <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"TINY模型 \"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件&lt;/span>  \"\"\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        raw_preprocess<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"数据预处理\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n        regenerate_config_btn<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"重新生成配置文件\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\"</span><span class=\"token punctuation\">,</span> max_lines<span class=\"token operator\">=</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        clear_preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"清空CMD通知\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span><span class=\"token string\">\"预处理与特征处理完成，请检查右侧说话人列表，确认无误后进行下一步配置文件与训练\"</span><span class=\"token punctuation\">)</span>\n            speakers<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"说话人列表\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重新生成配置文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">##重新生成[5]\ndef regenerate_config(encoder, vol_aug, tiny_enable):\n    if precheck_ok is False:\n        return &quot;数据集识别失败，请检查报错信息&quot;\n    vol_aug_arg &#x3D; &quot;--vol_aug&quot; if vol_aug else &quot;&quot;\n    tiny_arg &#x3D; &quot;--tiny&quot; if tiny_enable else &quot;&quot;\n    cmd &#x3D; r&quot;.\\env\\python.exe preprocess_flist_config.py --speech_encoder %s %s %s&quot; % (encoder, vol_aug_arg, tiny_arg)\n    output &#x3D; &quot;&quot;\n    try:\n        result &#x3D; subprocess.Popen(cmd, stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.STDOUT, shell&#x3D;True, text&#x3D;True)\n        for line in result.stdout:\n            output +&#x3D; line\n        output +&#x3D; &quot;Regenerate config file successfully.&quot;\n    except subprocess.CalledProcessError as e:\n        result &#x3D; e.output\n        output +&#x3D; f&quot;Error: &#123;result&#125;\\n&quot;\n    return output\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"训练模块-1\"><a href=\"#训练模块-1\" class=\"headerlink\" title=\"训练模块\"></a>训练模块</h4><p>库需求更新</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> gradio <span class=\"token keyword\">as</span> gr\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> shutil\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> torch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>获取本机GPU信息，有其他GPU的可自行修改GPU名称判断</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\nngpu<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>device_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngpu_infos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">##初始化gpu信息</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span> <span class=\"token keyword\">or</span> ngpu<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    check_gpu <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    check_gpu <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ngpu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gpu_name <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_name<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MX\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RTX\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"GTX\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"A\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"V\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"T\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"P\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"M4\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            check_gpu <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            gpu_infos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"序号：%s\\tGPU型号:%s\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>gpu_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ngpu_info<span class=\"token operator\">=</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>gpu_infos<span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span> check_gpu <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>gpu_infos<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"GPU不可用或不支持，请检查\"</span><span class=\"token comment\">##转换为单列文本，便于后期使用</span>\ngpus<span class=\"token operator\">=</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> gpu_infos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##获取GPU序号信息</span>\n<span class=\"token comment\">##print(gpus,gpu_info)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>去除注释后输出：</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710669011479.png\" alt=\"1710669011479\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 读取用于推断的 CUDA 信息</span>\ncuda <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 用于存储 CUDA 相关信息的字典</span>\nmin_vram <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># VRAM 的最小值初始化为 0</span>\n\n<span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 如果有可用的 CUDA 设备</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>device_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 遍历每个 CUDA 设备</span>\n        current_vram <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_properties<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>total_memory  <span class=\"token comment\"># 获取当前设备的总显存</span>\n        min_vram <span class=\"token operator\">=</span> current_vram <span class=\"token keyword\">if</span> current_vram <span class=\"token operator\">></span> min_vram <span class=\"token keyword\">else</span> min_vram  <span class=\"token comment\"># 更新最小显存值</span>\n        device_name <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_properties<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name  <span class=\"token comment\"># 获取设备名称</span>\n        cuda<span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"CUDA:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>device_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"cuda:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>  <span class=\"token comment\"># 将设备信息添加到 cuda 字典中</span>\n\n<span class=\"token comment\"># 计算总显存并推荐批次大小</span>\ntotal_vram <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_vram <span class=\"token operator\">*</span> <span class=\"token number\">9.31322575e-10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> min_vram <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 计算总显存，并将其转换为 GB</span>\nauto_batch <span class=\"token operator\">=</span> total_vram <span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token keyword\">if</span> total_vram <span class=\"token operator\">&lt;=</span> <span class=\"token number\">12</span> <span class=\"token keyword\">and</span> total_vram <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> total_vram  <span class=\"token comment\"># 推荐的批次大小</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"当前显存：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>total_vram<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> GiB，推荐批次大小：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>auto_batch<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当前输出</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710669593061.png\" alt=\"1710669593061\"></p>\n<p>检查BF16（30系及以上可用，动态浮点计算加速）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##检查bf16是否可用</span>\namp_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"fp32\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fp16\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">if</span> check_gpu<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_bf16_supported<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        amp_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"fp32\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fp16\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bf16\"</span><span class=\"token punctuation\">]</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>检查编码器信息</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##查找本地编码器</span>\nvocoder_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token builtin\">dir</span> <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"model\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"config.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            vocoder_options<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>配置文件保存模块开发</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> gradio <span class=\"token keyword\">as</span> gr\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> shutil\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> yaml\n\nsovits_params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\ndiff_params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nprecheck_ok <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nraw_path <span class=\"token operator\">=</span> <span class=\"token string\">\"dataset_raw\"</span>\ndataset_dir <span class=\"token operator\">=</span> <span class=\"token string\">\"dataset/44k\"</span>\ndefault_settings_file <span class=\"token operator\">=</span> <span class=\"token string\">\"defset.yaml\"</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cfg</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        初始化配置对象。\n\n        Args:\n            path (str): 配置文件的路径。\n            type (str): 配置文件的类型 (\"json\" 或 \"yaml\")。\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">type</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        从文件中读取配置数据。\n\n        Returns:\n            dict: 将配置文件的内容作为字典返回。\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> yaml<span class=\"token punctuation\">.</span>safe_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        将提供的内容保存到配置文件中。\n\n        Args:\n            content (dict): 要保存到文件中的内容。\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                yaml<span class=\"token punctuation\">.</span>safe_dump<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> default_flow_style<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save_default_settings</span><span class=\"token punctuation\">(</span>log_interval<span class=\"token punctuation\">,</span>eval_interval<span class=\"token punctuation\">,</span>keep_ckpts<span class=\"token punctuation\">,</span>batch_size<span class=\"token punctuation\">,</span>learning_rate<span class=\"token punctuation\">,</span>amp_dtype<span class=\"token punctuation\">,</span>all_in_mem<span class=\"token punctuation\">,</span>num_workers<span class=\"token punctuation\">,</span>cache_all_data<span class=\"token punctuation\">,</span>cache_device<span class=\"token punctuation\">,</span>diff_amp_dtype<span class=\"token punctuation\">,</span>diff_batch_size<span class=\"token punctuation\">,</span>diff_lr<span class=\"token punctuation\">,</span>diff_interval_log<span class=\"token punctuation\">,</span>diff_interval_val<span class=\"token punctuation\">,</span>diff_force_save<span class=\"token punctuation\">,</span>diff_k_step_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    config_file <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>default_settings_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">)</span>\n    default_settings <span class=\"token operator\">=</span> config_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'log_interval'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>log_interval<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'eval_interval'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>eval_interval<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'keep_ckpts'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>keep_ckpts<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>learning_rate<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>amp_dtype<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'all_in_mem'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> all_in_mem\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'num_workers'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num_workers<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cache_all_data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cache_all_data\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cache_device'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cache_device<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>diff_amp_dtype<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_batch_size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_batch_size<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_lr'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>diff_lr<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_interval_log'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_interval_log<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_interval_val'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_interval_val<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_force_save'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_force_save<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_k_step_max'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diff_k_step_max\n    config_file<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>default_settings<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"成功保存默认配置\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_default_settings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> sovits_params<span class=\"token punctuation\">,</span> diff_params\n    config_file <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>default_settings_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">)</span>\n    default_settings <span class=\"token operator\">=</span> config_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sovits_params <span class=\"token operator\">=</span> default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span>\n    diff_params <span class=\"token operator\">=</span> default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> sovits_params<span class=\"token punctuation\">,</span> diff_params\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>get_default_settings<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在根目录新建应该defset.yaml，粘贴以下内容</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sovits_params</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">log_interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>\n  <span class=\"token key atrule\">eval_interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">800</span>\n  <span class=\"token key atrule\">keep_ckpts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">batch_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">learning_rate</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.0001</span>\n  <span class=\"token key atrule\">amp_dtype</span><span class=\"token punctuation\">:</span> fp32\n  <span class=\"token key atrule\">all_in_mem</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">diff_params</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">num_workers</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">cache_all_data</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">cache_device</span><span class=\"token punctuation\">:</span> cuda\n  <span class=\"token key atrule\">amp_dtype</span><span class=\"token punctuation\">:</span> fp32\n  <span class=\"token key atrule\">diff_batch_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">24</span>\n  <span class=\"token key atrule\">diff_lr</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.0002</span>\n  <span class=\"token key atrule\">diff_interval_log</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token key atrule\">diff_interval_val</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span>\n  <span class=\"token key atrule\">diff_force_save</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span>\n  <span class=\"token key atrule\">diff_k_step_max</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出为<img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710747254487.png\" alt=\"1710747254487\"></p>\n<p>此时，包含参数如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\nimport torch\nimport yaml\n\n\n##一些参数\ndefault_settings_file &#x3D; &quot;defset.yaml&quot;\nworkdir &#x3D; &quot;logs&#x2F;44k&quot;\ndiff_workdir &#x3D; &quot;logs&#x2F;44k&#x2F;diffusion&quot;\nconfig_dir &#x3D; &quot;configs&#x2F;&quot;\nsovits_params &#x3D; &#123;&#125;\ndiff_params &#x3D; &#123;&#125;\nprecheck_ok &#x3D; False\nraw_path &#x3D; &quot;dataset_raw&quot;\ndataset_dir &#x3D; &quot;dataset&#x2F;44k&quot;\nf0_options &#x3D; [&quot;crepe&quot;,&quot;pm&quot;,&quot;dio&quot;,&quot;harvest&quot;,&quot;rmvpe&quot;,&quot;fcpe&quot;]\nENCODER_PRETRAIN &#x3D; &#123;\n    &quot;vec256l9&quot;: &quot;pretrain&#x2F;checkpoint_best_legacy_500.pt&quot;,\n    &quot;vec768l12&quot;: &quot;pretrain&#x2F;checkpoint_best_legacy_500.pt&quot;,\n    &quot;hubertsoft&quot;: &quot;pretrain&#x2F;hubert-soft-0d54a1f4.pt&quot;,\n    &quot;whisper-ppg&quot;: &quot;pretrain&#x2F;medium.pt&quot;,\n    &quot;cnhubertlarge&quot;: &quot;pretrain&#x2F;chinese-hubert-large-fairseq-ckpt.pt&quot;,\n    &quot;dphubert&quot;: &quot;pretrain&#x2F;DPHuBERT-sp0.75.pth&quot;,\n    &quot;wavlmbase+&quot;: &quot;pretrain&#x2F;WavLM-Base+.pt&quot;,\n    &quot;whisper-ppg-large&quot;: &quot;pretrain&#x2F;large-v2.pt&quot;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置文件相关代码注释掉print之后放入函数部分</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##函数后添加</span>\nsovits_params<span class=\"token punctuation\">,</span> diff_params <span class=\"token operator\">=</span> get_default_settings<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##调用信息</span>\nckpt_read_dir <span class=\"token operator\">=</span> workdir\nconfig_read_dir <span class=\"token operator\">=</span> config_dir\ndiff_read_dir <span class=\"token operator\">=</span> diff_workdir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，完成到了模型默认配置的准备</p>\n<p>前端代码如下‘</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">index <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Blocks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> index<span class=\"token punctuation\">:</span>\n    gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''### 本系统基于sovits框架4.1版本\n                毕业设计：基于sovits项目的AI音乐生成与创作系统\n                '''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Tabs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">'音频切片预处理工具'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> preprocessing_tab<span class=\"token punctuation\">:</span>\n             gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                        ### 预处理模块\n                    \n                        \"\"\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"训练\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> train_tab<span class=\"token punctuation\">:</span>   \n             gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                        ### 模型训练模块\n                         \n                        \"\"\"</span><span class=\"token punctuation\">)</span>\n             gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\"</span><span class=\"token punctuation\">)</span>\n             open_raw<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"打开dataset_raw文件夹\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"secondary\"</span><span class=\"token punctuation\">)</span>\n             raw_dirs_list<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"加载原始数据集:\"</span><span class=\"token punctuation\">)</span>\n             get_raw_dirs<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"识别数据集\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n             gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                         **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\"</span><span class=\"token punctuation\">)</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                branch_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的编码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>encoder_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                f0_predictor_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的f0预测器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>f0_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                use_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                skip_loudnorm <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n                num_processes <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\"</span><span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red;\">右侧选项仅为vec768l12提供支持。&lt;/span>  \n                响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n                TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n                      \"\"\"</span><span class=\"token punctuation\">)</span>\n                vol_aug <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"响度嵌入/音量增强\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n                tiny_enable <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"TINY模型 \"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件&lt;span style=\"color:red;\">  \"\"\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                raw_preprocess<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"数据预处理\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                regenerate_config_btn<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"重新生成配置文件\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\"</span><span class=\"token punctuation\">,</span> max_lines<span class=\"token operator\">=</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                clear_preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"清空CMD通知\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span><span class=\"token string\">\"预处理与特征处理完成后，请检查右侧说话人列表，确认无误后进行下一步准备配置文件\"</span><span class=\"token punctuation\">)</span>\n                    speakers<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"说话人列表\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Accordion<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"主模型超参数列表 点击打开 否则按照默认参数训练\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">open</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"显卡信息\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>gpu_info<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    chose_gpu <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"显卡选择，默认0号，多卡用户西文逗号分隔，如0,1,2...\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span>gpus<span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    log_interval <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"日志间隔 即多久输出一次损失日志\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'log_interval'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                    eval_interval <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"评估间隔 即多久保存一次模型\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'eval_interval'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                    keep_ckpts <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"保存模型数量 即仅保留最新的N个模型 旧模型会删除，若需要保存过程中的每个模型则设置为0 \"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    batch_size<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"batch_size，6G建议1-2，每多2G可尝试+1\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>auto_batch<span class=\"token punctuation\">)</span>\n                    lr <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"学习率 默认0.0001 若数据集过大或过小可微调，微调范围+-0.0001内\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                    amp_dtype <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"浮点类型，默认f32即可，显卡型号较新也可尝试f16\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>amp_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    all_in_mem<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"内存加速，建议打开，数据集将全部加载到内存，避免硬盘io低下影响训练\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'all_in_mem'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Accordion<span class=\"token punctuation\">(</span>label <span class=\"token operator\">=</span> <span class=\"token string\">\"扩散模型配置文件 点击打开 否则同样默认参数\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    diff_num_workers <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"num_workers, 设置为0将作为主进程与cpu交互，但是容易出现死锁，仅建议高性能用户改动\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'num_workers'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_k_step_max <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"100步深度的浅扩散。加快训练速度并提高模型质量，但无法执行超过100步的浅扩散推理\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_k_step_max'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_cache_all_data <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"数据缓存，启用后加快训练速度，关闭后节省显存或内存，减慢训练速度\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'cache_all_data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_cache_device <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"缓存硬件：需开启数据缓存，建议使用cuda/gpu显存加速\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'cache_device'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_amp_dtype <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"浮点类型，默认f32，较新的显卡可选f16提速\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"fp32\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fp16\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    diff_batch_size <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"batch_size，数值尽量不超过数据集1/4，6G建议24左右，显存越大可适当增大\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_batch_size'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_lr <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"学习率 建议仅+-0.0001范围内微调\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_lr'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_interval_log <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"日志间隔\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_interval_log'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_interval_val <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"验证间隔  不建议过低 建议1000+\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_interval_val'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_force_save <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"强制保留模型，该步数倍数保存的模型会被保留，其余会被删除。设置为与验证步数相同的值则每个模型都会被保留\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_force_save'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                save_params<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"保存为默认设置\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                write_config<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"写入配置文件\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n             write_config_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"输出信息\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">'推理'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> inference_tab<span class=\"token punctuation\">:</span>\n              gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                        ### 音频推理模块\n                         \n                        \"\"\"</span><span class=\"token punctuation\">)</span>\n        get_raw_dirs<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>load_raw_dirs<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>raw_dirs_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[1]</span>\n        raw_preprocess<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>dataset_preprocess<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>branch_selection<span class=\"token punctuation\">,</span>f0_predictor_selection<span class=\"token punctuation\">,</span> use_diff<span class=\"token punctuation\">,</span> vol_aug<span class=\"token punctuation\">,</span> skip_loudnorm<span class=\"token punctuation\">,</span> num_processes<span class=\"token punctuation\">,</span>tiny_enable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>preprocess_output<span class=\"token punctuation\">,</span>speakers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        open_raw<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>open_dataset_raw<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[4]</span>\n        clear_preprocess_output<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>clear_output<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>preprocess_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[4.1]</span>\n        regenerate_config_btn<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>regenerate_config<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>branch_selection<span class=\"token punctuation\">,</span> vol_aug<span class=\"token punctuation\">,</span> tiny_enable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>preprocess_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        save_params<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>save_default_settings<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>log_interval<span class=\"token punctuation\">,</span>eval_interval<span class=\"token punctuation\">,</span>keep_ckpts<span class=\"token punctuation\">,</span>batch_size<span class=\"token punctuation\">,</span>lr<span class=\"token punctuation\">,</span>amp_dtype<span class=\"token punctuation\">,</span>all_in_mem<span class=\"token punctuation\">,</span>diff_num_workers<span class=\"token punctuation\">,</span>diff_cache_all_data<span class=\"token punctuation\">,</span>diff_cache_device<span class=\"token punctuation\">,</span>diff_amp_dtype<span class=\"token punctuation\">,</span>diff_batch_size<span class=\"token punctuation\">,</span>diff_lr<span class=\"token punctuation\">,</span>diff_interval_log<span class=\"token punctuation\">,</span>diff_interval_val<span class=\"token punctuation\">,</span>diff_force_save<span class=\"token punctuation\">,</span>diff_k_step_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>write_config_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710750595175.png\" alt=\"1710750595175\"></p>\n<p>接下来添加配置写入函数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">config_fn</span><span class=\"token punctuation\">(</span>log_interval<span class=\"token punctuation\">,</span> eval_interval<span class=\"token punctuation\">,</span> keep_ckpts<span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> amp_dtype<span class=\"token punctuation\">,</span> all_in_mem<span class=\"token punctuation\">,</span> diff_num_workers<span class=\"token punctuation\">,</span> diff_cache_all_data<span class=\"token punctuation\">,</span> diff_batch_size<span class=\"token punctuation\">,</span> diff_lr<span class=\"token punctuation\">,</span> diff_interval_log<span class=\"token punctuation\">,</span> diff_interval_val<span class=\"token punctuation\">,</span> diff_cache_device<span class=\"token punctuation\">,</span> diff_amp_dtype<span class=\"token punctuation\">,</span> diff_force_save<span class=\"token punctuation\">,</span> diff_k_step_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> amp_dtype <span class=\"token operator\">==</span> <span class=\"token string\">\"fp16\"</span> <span class=\"token keyword\">or</span> amp_dtype <span class=\"token operator\">==</span> <span class=\"token string\">\"bf16\"</span><span class=\"token punctuation\">:</span>\n        fp16_run <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        fp16_run <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        amp_dtype <span class=\"token operator\">=</span> <span class=\"token string\">\"fp16\"</span>\n    config_origin <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span><span class=\"token string\">\"configs/config.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span>\n    diff_config <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span><span class=\"token string\">\"configs/diffusion.yaml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">)</span>\n    config_data <span class=\"token operator\">=</span> config_origin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'log_interval'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>log_interval<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'eval_interval'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>eval_interval<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'keep_ckpts'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>keep_ckpts<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'fp16_run'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fp16_run\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'half_type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>amp_dtype<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'all_in_mem'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> all_in_mem\n    config_origin<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>config_data<span class=\"token punctuation\">)</span>\n    diff_config_data <span class=\"token operator\">=</span> diff_config<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'num_workers'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_num_workers<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cache_all_data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diff_cache_all_data\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_batch_size<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'lr'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>diff_lr<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'interval_log'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_interval_log<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'interval_val'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_interval_val<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cache_device'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>diff_cache_device<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>diff_amp_dtype<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'interval_force_save'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_force_save<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'k_step_max'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token keyword\">if</span> diff_k_step_max <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n    diff_config<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>diff_config_data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"配置文件写入完成\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在按键绑定中添加</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">write_config<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>config_fn<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>log_interval<span class=\"token punctuation\">,</span> eval_interval<span class=\"token punctuation\">,</span> keep_ckpts<span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> amp_dtype<span class=\"token punctuation\">,</span> all_in_mem<span class=\"token punctuation\">,</span> diff_num_workers<span class=\"token punctuation\">,</span> diff_cache_all_data<span class=\"token punctuation\">,</span> diff_batch_size<span class=\"token punctuation\">,</span> diff_lr<span class=\"token punctuation\">,</span> diff_interval_log<span class=\"token punctuation\">,</span> diff_interval_val<span class=\"token punctuation\">,</span> diff_cache_device<span class=\"token punctuation\">,</span> diff_amp_dtype<span class=\"token punctuation\">,</span> diff_force_save<span class=\"token punctuation\">,</span> diff_k_step_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>write_config_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"启动训练相关\"><a href=\"#启动训练相关\" class=\"headerlink\" title=\"启动训练相关\"></a>启动训练相关</h4><p>首先是检查数据集是否可用：</p>\n<p>由于已知数据集处理后包含npy和pt的编码与f0权重，设置一个函数来检查数据集。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">check_dataset</span><span class=\"token punctuation\">(</span>dataset_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"该路径下未检测到数据集\"</span><span class=\"token comment\">##检测数据集目录是否存在</span>\n    unavailable_dataset <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">for</span> root<span class=\"token punctuation\">,</span> dirs<span class=\"token punctuation\">,</span> files <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>dataset_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.pt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.npy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\">##return \"已检查到到数据集\"</span>\n                unavailable_dataset <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">if</span> unavailable_dataset<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"该目录下未存在一个有效的数据集权重，请检查文件目录是否有pt或者npy的模型文件\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来是启动训练的函数：分为从0开始和继续训练，由于模型的特殊性，从0 开始需要准备对应的预训练模型（称之为底模），方便模型进行特征学习，不然自己训练底模只能达到五分之一左右的效果。</p>\n<p>底模从社区获取，模型路径如下图</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710989114237.png\" alt=\"1710989114237\"></p>\n<p>添加备份文件夹 新建</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710993075567.png\" alt=\"1710993075567\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">backup_path <span class=\"token operator\">=</span> <span class=\"token string\">'backup_model'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>路径如上<br>训练函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">training</span><span class=\"token punctuation\">(</span>gpu_selection<span class=\"token punctuation\">,</span>encoder<span class=\"token punctuation\">,</span>tiny_enable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> tiny_enable<span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    config_data_cfg <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span><span class=\"token string\">\"configs/config.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span>\n    config_data <span class=\"token operator\">=</span> config_data_cfg<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##调用配置文件信息</span>\n    vol_emb <span class=\"token operator\">=</span> config_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"vol_embedding\"</span><span class=\"token punctuation\">]</span>\n    warn <span class=\"token operator\">=</span> check_dataset<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> warn <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> warn\n    pretain_path <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string\">\"vec256l9\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/768l12/vol_emb\"</span> <span class=\"token keyword\">if</span> vol_emb <span class=\"token keyword\">else</span> <span class=\"token string\">\"pretrained_model/768l12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"vec768l12_tiny\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/tiny/vec768l12_vol_emb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/hubertsoft\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/whisper-ppg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"cnhubertlarge\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/cnhubertlarge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"dphubert\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/dphubert\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"wavlmbase+\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/wavlmbase+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"whisper-ppg-large\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/whisper-ppg-large\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> encoder <span class=\"token keyword\">in</span> pretain_path<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到对应编码器底模，请检查编码器是否存在\"</span>\n    D_file<span class=\"token punctuation\">,</span>G_file<span class=\"token punctuation\">,</span>encoder_path <span class=\"token operator\">=</span> pretain_path<span class=\"token punctuation\">[</span>encoder<span class=\"token punctuation\">]</span>\n    D_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>encoder_path<span class=\"token punctuation\">,</span>D_file<span class=\"token punctuation\">)</span>\n    G_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>encoder_path<span class=\"token punctuation\">,</span>G_file<span class=\"token punctuation\">)</span>\n    time_stamp <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y_%m_%d_%H_%M'</span><span class=\"token punctuation\">)</span>\n    backup_folder <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>backup_path<span class=\"token punctuation\">,</span>time_stamp<span class=\"token punctuation\">)</span>\n    output_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"备份已完成，旧模型被保存在%s\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>backup_folder<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'diffusion'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>new_backup_folder<span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"diffusion\"</span><span class=\"token punctuation\">:</span>\n                shutil<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>new_backup_folder<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>G_path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>D_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        shutil<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>D_path<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        shutil<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>G_path<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        output_msg <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"成功装载预训练模型，编码器：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>encoder<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n\"</span></span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        output_msg <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>encoder<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">的预训练模型不存在，未装载预训练模型\\n\"</span></span>\n\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">r\"set CUDA_VISIBLE_DEVICES=%s &amp;&amp; .\\env\\python.exe train.py -c configs/config.json -m 44k\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>gpu_selection<span class=\"token punctuation\">)</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    output_msg <span class=\"token operator\">+=</span> <span class=\"token string\">\"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C\"</span>\n    <span class=\"token keyword\">return</span> output_msg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续训练函数（多段输出使用output_msg进行自增，单端输出直接return）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">continue_training</span><span class=\"token punctuation\">(</span>gpu_selection<span class=\"token punctuation\">,</span>encoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    warn <span class=\"token operator\">=</span> check_dataset<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> warn <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> warn\n    <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 从工作目录下的所有文件中筛选文件名以'G_'开头且以'.pth'结尾的文件</span>\n    files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>f <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'G_'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> f<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.pth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到已训练模型，无法继续训练，请检查文件目录或者使用重新开始训练。\"</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">r\"set CUDA_VISIBLE_DEVICES=%s &amp;&amp; .\\env\\python.exe train.py -c configs/config.json -m 44k\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>gpu_selection<span class=\"token punctuation\">)</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span>cmd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C\"</span>\n\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>要导入：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> datetime\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时前端代码添加：</p>\n<pre class=\"line-numbers language-PYTHON\" data-language=\"PYTHON\"><code class=\"language-PYTHON\">with gr.Row():\n   save_params&#x3D;gr.Button(&quot;保存为默认设置&quot;, variant&#x3D;&quot;primary&quot;)\n   write_config&#x3D;gr.Button(&quot;写入配置文件&quot;, variant&#x3D;&quot;primary&quot;)\nwrite_config_output&#x3D;gr.Textbox(label&#x3D;&quot;输出信息&quot;)\nwith gr.Row():\n   with gr.Column():\n       start_train &#x3D; gr.Button(&quot;开始训练&quot;,variant&#x3D;&#39;primary&#39;)\n       train_out &#x3D; gr.Textbox(label&#x3D;&quot;训练信息&quot;)\n   with gr.Column():\n       continue_train &#x3D; gr.Button(&quot;继续训练&quot;,variant&#x3D;&quot;primary&quot;)\n       continue_train_out &#x3D; gr.Textbox(label&#x3D;&quot;训练信息&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>按键绑定</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">start_train<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>chose_gpu<span class=\"token punctuation\">,</span> branch_selection<span class=\"token punctuation\">,</span> tiny_enable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>train_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncontinue_train<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>continue_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>chose_gpu<span class=\"token punctuation\">,</span> branch_selection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>continue_train_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>缝缝补补，改完之后应该可以实现如下效果：</p>\n<p>点击开始训练，弹出cmd并且提示loaded checkpoints G0（说明正确加载了预训练模型）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711362464630.png\" alt=\"1711362464630\"></p>\n<p>使用ctrl+c键盘中断，接下来检查继续训练</p>\n<p>首先来到logs&#x2F;44k路径下。删除除了diffusion目录的所有文件（也可以直接覆盖，复制备份文件夹内文件直接粘贴）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711363139340.png\" alt=\"1711363139340\"></p>\n<p>之后将之前备份的模型文件复制过来（只需要G,D各一个再加上配置文件即可，日志文件复制可选，因为可以承接之前的训练输出）<br>之后直接点击继续训练即可</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711365203345.png\" alt=\"1711365203345\"></p>\n<p>完成其他几个模型的函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">kmeans_training</span><span class=\"token punctuation\">(</span>kmeans_gpu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"数据集不存在，请检查dataset文件夹\"</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">r\".\\env\\python.exe cluster/train_cluster.py --gpu\"</span> <span class=\"token keyword\">if</span> kmeans_gpu <span class=\"token keyword\">else</span> <span class=\"token string\">r\".\\env\\python.exe cluster/train_cluster.py\"</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"训练已开始，cpu需要5-10min，无终端输出\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">index_training</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"数据集不存在，请检查dataset文件夹\"</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">r\".\\env\\python.exe train_index.py -c configs/config.json\"</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"训练已开始\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">diff_training</span><span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> k_step_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"数据集不存在，请检查dataset文件夹\"</span>\n    timestamp <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y_%m_%d_%H_%M'</span><span class=\"token punctuation\">)</span>\n    new_backup_folder <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>backup_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"diffusion\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>new_backup_folder<span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            shutil<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>new_backup_folder<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    DIFF_PRETRAIN <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"768-kstepmax100\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrained_model/diffusion/768l12/max100/model_0.pt\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrained_model/diffusion/768l12/model_0.pt\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrained_model/diffusion/hubertsoft/model_0.pt\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrained_model/diffusion/whisper-ppg/model_0.pt\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> DIFF_PRETRAIN<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"该编码器不支持训练扩散模型\"</span>\n    <span class=\"token keyword\">if</span> k_step_max<span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token string\">\"768-kstepmax100\"</span>\n    diff_pretrained_model <span class=\"token operator\">=</span> DIFF_PRETRAIN<span class=\"token punctuation\">[</span>encoder<span class=\"token punctuation\">]</span>\n    shutil<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>diff_pretrained_model<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"model_0.pt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\".\\env\\python.exe train_diff.py -c configs/diffusion.yaml\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    output_message <span class=\"token operator\">=</span> <span class=\"token string\">\"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C。\"</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"768-kstepmax100\"</span><span class=\"token punctuation\">:</span>\n        output_message <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n正在进行100步深度的浅扩散训练，已加载底模\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        output_message <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\\n正在进行完整深度的扩散训练，编码器</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>encoder<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token keyword\">return</span> output_message\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">diff_continue_training</span><span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"数据集不存在，请检查dataset文件夹\"</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未选择预处理对应的编码器\"</span>\n    all_files <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">)</span>\n    model_files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>f <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> all_files <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.pt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>model_files<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到已训练模型，无法继续训练，请检查文件目录或者使用重新开始训练。\"</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\".\\env\\python.exe train_diff.py -c configs/diffusion.yaml\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C。\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">           <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Accordion<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"扩散模型\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">open</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                      start_train_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"开始训练\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">'primary'</span><span class=\"token punctuation\">)</span>\n                      train_diff_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"训练信息\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                      continue_train_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"继续训练\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                      continue_train_diff_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"训练信息\"</span><span class=\"token punctuation\">)</span>\n                      \n                      \n\nstart_train_diff<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>diff_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>branch_selection<span class=\"token punctuation\">,</span> diff_k_step_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>train_diff_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      continue_train_diff<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>diff_continue_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>branch_selection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>continue_train_diff_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>前端代码与按键绑定如上</p>\n<p>此时，浅扩散训练按钮效果如下<img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711420592406.png\" alt=\"1711420592406\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711420657241.png\" alt=\"1711420657241\"></p>\n<p>特征模型和聚类模型绑定如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train_index<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>index_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>train_index_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntrain_kmeans<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>kmeans_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>chose_gpu<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>train_kmeans_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#前端如下：</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                train_index <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"开始训练特征检索模型\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">'primary'</span><span class=\"token punctuation\">)</span>\n                train_index_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"训练信息\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                                       \n                train_kmeans <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"开始训练kmeans聚类模型\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                train_kmeans_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"训练信息\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>tensorboard如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                tensorboard_bth <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"打开tensorboard\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                tensorboard_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#按钮绑定</span>\n        tensorboard_bth<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>tensorboard_open<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>tensorboard_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#函数设计</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tensorboard_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\".\\env\\python.exe -m tensorboard.main --logdir=logs\\44k\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"已打开tensorboard，请复制ip地址浏览器使用\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，训练模块制作完成，开始制作推理模块</p>\n<h3 id=\"推理模块\"><a href=\"#推理模块\" class=\"headerlink\" title=\"推理模块\"></a>推理模块</h3><p>添加定义</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">model <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\ndebug <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\nMODEL_TYPE <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">768</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"vec256l9\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"cnhubertlarge\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"dphubert\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">768</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"wavlmbase+\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">768</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"whisper-ppg-large\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1280</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加导入包</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> edgetts<span class=\"token punctuation\">.</span>tts_voices <span class=\"token keyword\">import</span> SUPPORTED_LANGUAGES\n<span class=\"token keyword\">from</span> inference<span class=\"token punctuation\">.</span>infer_tool <span class=\"token keyword\">import</span> Svc\n<span class=\"token keyword\">import</span> soundfile <span class=\"token keyword\">as</span> sf\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> librosa\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>相关函数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_file_options</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">,</span> extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">file</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span>extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">option_loader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ckpt_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">file</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> get_file_options<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".pth\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"D_\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">file</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">]</span>\n    config_list <span class=\"token operator\">=</span> get_file_options<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".json\"</span><span class=\"token punctuation\">)</span>\n    cluster_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"请选择特征/聚类模型\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> get_file_options<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".pt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> get_file_options<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".pkl\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 聚类和特征检索模型</span>\n    diff_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"请选择扩散模型\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> get_file_options<span class=\"token punctuation\">(</span>diff_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".pt\"</span><span class=\"token punctuation\">)</span>\n    diff_config_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"请选择扩散模型配置\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> get_file_options<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".yaml\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ckpt_list<span class=\"token punctuation\">,</span> config_list<span class=\"token punctuation\">,</span> cluster_list<span class=\"token punctuation\">,</span> diff_list<span class=\"token punctuation\">,</span> diff_config_list\n\n<span class=\"token comment\"># read ckpt list读取模型清单</span>\nckpt_list<span class=\"token punctuation\">,</span> config_list<span class=\"token punctuation\">,</span> cluster_list<span class=\"token punctuation\">,</span> diff_list<span class=\"token punctuation\">,</span> diff_config_list <span class=\"token operator\">=</span> option_loader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_model_func</span><span class=\"token punctuation\">(</span>ckpt_name<span class=\"token punctuation\">,</span> cluster_name<span class=\"token punctuation\">,</span> config_name<span class=\"token punctuation\">,</span> enhance<span class=\"token punctuation\">,</span> diff_model_name<span class=\"token punctuation\">,</span> diff_config_name<span class=\"token punctuation\">,</span> only_diffusion<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> using_device<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> speedup<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> vocoder_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> model\n    \n    <span class=\"token comment\"># 构建配置文件和模型路径</span>\n    config_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> config_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion <span class=\"token keyword\">else</span> <span class=\"token string\">\"configs/config.json\"</span>\n    diff_config_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> diff_config_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> diff_config_name <span class=\"token operator\">!=</span> <span class=\"token string\">\"未选择扩散模型配置文件\"</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"configs/diffusion.yaml\"</span>\n    ckpt_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> ckpt_name<span class=\"token punctuation\">)</span>\n    cluster_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> cluster_name<span class=\"token punctuation\">)</span>\n    diff_model_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>diff_read_dir<span class=\"token punctuation\">,</span> diff_model_name<span class=\"token punctuation\">)</span>\n    \n    k_step_max <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\n    \n    <span class=\"token comment\"># 根据是否只加载扩散模型，读取相应的配置文件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion<span class=\"token punctuation\">:</span>\n        config <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>config_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 如果存在扩散模型，检查维度是否匹配</span>\n    <span class=\"token keyword\">if</span> diff_model_name <span class=\"token operator\">!=</span> <span class=\"token string\">\"未选择扩散模型\"</span><span class=\"token punctuation\">:</span>\n        _diff <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>diff_config_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">)</span>\n        _content <span class=\"token operator\">=</span> _diff<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        diff_spk <span class=\"token operator\">=</span> _content<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'spk'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 检查扩散模型维度是否匹配主模型</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> _content<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'encoder_out_channels'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'ssl_dim'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"扩散模型维度与主模型不匹配，请确保两个模型使用的是同一个编码器\"</span><span class=\"token punctuation\">,</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        \n        <span class=\"token comment\"># 更新扩散模型配置信息</span>\n        _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"infer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"speedup\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>speedup<span class=\"token punctuation\">)</span>\n        _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"infer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span>\n        _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"vocoder\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ckpt\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"pretrain/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>vocoder_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/model\"</span></span>\n        k_step_max <span class=\"token operator\">=</span> _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'k_step_max'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'k_step_max'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">1000</span>\n        _diff<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>_content<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 加载模型</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion<span class=\"token punctuation\">:</span>\n        net <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>ckpt_path<span class=\"token punctuation\">,</span> map_location<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 检查模型维度是否匹配配置</span>\n        emb_dim<span class=\"token punctuation\">,</span> model_dim <span class=\"token operator\">=</span> net<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"emb_g.weight\"</span><span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> emb_dim <span class=\"token operator\">></span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"n_speakers\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"模型说话人数量与emb维度不匹配\"</span><span class=\"token punctuation\">,</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> model_dim <span class=\"token operator\">!=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ssl_dim\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"配置文件与模型不匹配\"</span><span class=\"token punctuation\">,</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        \n        encoder <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"speech_encoder\"</span><span class=\"token punctuation\">]</span>\n        spk_dict <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'spk'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        spk_dict <span class=\"token operator\">=</span> diff_spk\n\n    <span class=\"token comment\"># 根据设备类型初始化设备</span>\n    device <span class=\"token operator\">=</span> cuda<span class=\"token punctuation\">[</span>using_device<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token string\">\"CUDA\"</span> <span class=\"token keyword\">in</span> using_device <span class=\"token keyword\">else</span> using_device\n\n    <span class=\"token comment\"># 根据输入参数初始化模型</span>\n    model <span class=\"token operator\">=</span> Svc<span class=\"token punctuation\">(</span>ckpt_path<span class=\"token punctuation\">,</span> config_path<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device <span class=\"token keyword\">if</span> device <span class=\"token operator\">!=</span> <span class=\"token string\">\"Auto\"</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> cluster_model_path<span class=\"token operator\">=</span>cluster_path<span class=\"token punctuation\">,</span> nsf_hifigan_enhance<span class=\"token operator\">=</span>enhance<span class=\"token punctuation\">,</span> diffusion_model_path<span class=\"token operator\">=</span>diff_model_path<span class=\"token punctuation\">,</span> diffusion_config_path<span class=\"token operator\">=</span>diff_config_path<span class=\"token punctuation\">,</span> shallow_diffusion<span class=\"token operator\">=</span>diff_model_name <span class=\"token operator\">!=</span> <span class=\"token string\">\"no_diff\"</span><span class=\"token punctuation\">,</span> only_diffusion<span class=\"token operator\">=</span>only_diffusion<span class=\"token punctuation\">,</span> spk_mix_enable<span class=\"token operator\">=</span>use_spk_mix<span class=\"token punctuation\">,</span> feature_retrieval<span class=\"token operator\">=</span>cluster_name<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".pkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 一些额外处理</span>\n    spk_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>spk_dict<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> enhance<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">from</span> modules<span class=\"token punctuation\">.</span>enhancer <span class=\"token keyword\">import</span> Enhancer\n        model<span class=\"token punctuation\">.</span>enhancer <span class=\"token operator\">=</span> Enhancer<span class=\"token punctuation\">(</span><span class=\"token string\">'nsf-hifigan'</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'pretrain/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>vocoder_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/model'</span></span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>model<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 根据条件设置 clip 的值</span>\n    clip <span class=\"token operator\">=</span> <span class=\"token number\">25</span> <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"whisper-ppg\"</span> <span class=\"token keyword\">or</span> encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"whisper-ppg-large\"</span> <span class=\"token keyword\">else</span> cl_num\n    device_name <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_properties<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token keyword\">if</span> <span class=\"token string\">\"cuda\"</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span>\n    sovits_msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"模型被成功加载到了</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>device_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">上\\n\"</span></span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion <span class=\"token keyword\">else</span> <span class=\"token string\">\"启用全扩散推理，未加载So-VITS模型\\n\"</span>\n\n    index_or_kmeans <span class=\"token operator\">=</span> <span class=\"token string\">\"特征索引\"</span> <span class=\"token keyword\">if</span> cluster_name<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".pkl\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"聚类模型\"</span>\n    clu_load <span class=\"token operator\">=</span> <span class=\"token string\">\"未加载\"</span> <span class=\"token keyword\">if</span> cluster_name <span class=\"token operator\">==</span> <span class=\"token string\">\"no_clu\"</span> <span class=\"token keyword\">else</span> cluster_name\n    diff_load <span class=\"token operator\">=</span> <span class=\"token string\">\"未加载\"</span> <span class=\"token keyword\">if</span> diff_model_name <span class=\"token operator\">==</span> <span class=\"token string\">\"no_diff\"</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>diff_model_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> | 采样器: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>method<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> | 加速倍数：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>speedup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> | 最大浅扩散步数：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>k_step_max<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> | 声码器： </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>vocoder_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n    output_msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sovits_msg<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>index_or_kmeans<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>clu_load<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n扩散模型：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>diff_load<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        output_msg<span class=\"token punctuation\">,</span>\n        gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>spk_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>spk_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"未检测到音色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        clip<span class=\"token punctuation\">,</span>\n        gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token keyword\">if</span> k_step_max <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token keyword\">else</span> k_step_max<span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span>speedup<span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span>k_step_max<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">refresh_options</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 使用global关键字使这些变量在函数内部被视为全局变量</span>\n    <span class=\"token keyword\">global</span> ckpt_read_dir<span class=\"token punctuation\">,</span> config_read_dir<span class=\"token punctuation\">,</span> diff_read_dir<span class=\"token punctuation\">,</span> current_mode\n    \n    <span class=\"token comment\"># 根据条件选择要读取的目录</span>\n    ckpt_read_dir <span class=\"token operator\">=</span> workdir\n    config_read_dir <span class=\"token operator\">=</span> config_dir\n    diff_read_dir <span class=\"token operator\">=</span> diff_workdir\n    \n    <span class=\"token comment\"># 加载选项列表</span>\n    ckpt_list<span class=\"token punctuation\">,</span> config_list<span class=\"token punctuation\">,</span> cluster_list<span class=\"token punctuation\">,</span> diff_list<span class=\"token punctuation\">,</span> diff_config_list <span class=\"token operator\">=</span> option_loader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n\n    \n    <span class=\"token comment\"># 更新各个选择框和文本显示</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        choice_ckpt<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>ckpt_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新ckpt选择框</span>\n        config_choice<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>config_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新config选择框</span>\n        cluster_choice<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>cluster_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新cluster选择框</span>\n        diff_choice<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>diff_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新diff选择框</span>\n        diff_config_choice<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>diff_config_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新diff config选择框</span>\n    <span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_json_encoder</span><span class=\"token punctuation\">(</span>config_choice<span class=\"token punctuation\">,</span> choice_ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 如果没有选择配置文件，则返回相应提示</span>\n    <span class=\"token keyword\">if</span> config_choice <span class=\"token operator\">==</span> <span class=\"token string\">\"未选择配置文件\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"自动加载未启用，请手动选择配置文件。\"</span>\n    \n    <span class=\"token comment\"># 如果没有选择模型，则返回相应提示</span>\n    <span class=\"token keyword\">if</span> choice_ckpt <span class=\"token operator\">==</span> <span class=\"token string\">\"未选择模型\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"请先选择模型。\"</span>\n    \n    <span class=\"token comment\"># 读取配置文件</span>\n    config_file <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> config_choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span>\n    config <span class=\"token operator\">=</span> config_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 检查配置文件中的模型编码器和维度是否匹配</span>\n        config_encoder <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"speech_encoder\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no_encoder\"</span><span class=\"token punctuation\">)</span>\n        config_dim <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ssl_dim\"</span><span class=\"token punctuation\">]</span>\n        \n        <span class=\"token comment\"># 处理旧版本配置文件的自动匹配</span>\n        <span class=\"token keyword\">if</span> config_encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"no_encoder\"</span><span class=\"token punctuation\">:</span>\n            config_encoder <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"speech_encoder\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"vec256l9\"</span> <span class=\"token keyword\">if</span> config_dim <span class=\"token operator\">==</span> <span class=\"token number\">256</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"vec768l12\"</span>\n            config_file<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 获取正确的模型维度</span>\n        correct_dim <span class=\"token operator\">=</span> MODEL_TYPE<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>config_encoder<span class=\"token punctuation\">,</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 如果模型维度不匹配，则返回相应提示</span>\n        <span class=\"token keyword\">if</span> config_dim <span class=\"token operator\">!=</span> correct_dim<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"配置文件中指定的编码器与模型维度不匹配。\"</span>\n        \n        <span class=\"token comment\"># 返回配置文件中的编码器</span>\n        <span class=\"token keyword\">return</span> config_encoder\n    \n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果出现异常，则返回错误信息</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"出现错误：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_model_info</span><span class=\"token punctuation\">(</span>choice_ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pthfile <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> choice_ckpt<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 加载模型，映射到CPU以避免使用GPU内存</span>\n    net <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>pthfile<span class=\"token punctuation\">,</span> map_location<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 获取模型中的说话者嵌入向量</span>\n    spk_emb <span class=\"token operator\">=</span> net<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"emb_g.weight\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 检查模型是否缺少说话者嵌入向量</span>\n    <span class=\"token keyword\">if</span> spk_emb <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"所选模型缺少emb_g.weight，可能选择了一个底层模型\"</span>\n    \n    <span class=\"token comment\"># 获取说话者嵌入向量的维度</span>\n    _layer <span class=\"token operator\">=</span> spk_emb<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 通过维度查找对应的编码器</span>\n    encoder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> MODEL_TYPE<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> _layer<span class=\"token punctuation\">]</span>\n    encoder<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 对特定编码器进行合并处理</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vec256l9\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"vec256l9 / hubertsoft\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cnhubertlarge\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"whisper-ppg / cnhubertlarge\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dphubert\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wavlmbase+\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"vec768l12 / dphubert / wavlmbase+\"</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">return</span> encoder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">auto_load</span><span class=\"token punctuation\">(</span>choice_ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># 获取模型信息</span>\n    model_output_msg <span class=\"token operator\">=</span> get_model_info<span class=\"token punctuation\">(</span>choice_ckpt<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 初始化变量</span>\n    json_output_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    config_choice <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    \n    <span class=\"token comment\"># 获取选择的ckpt文件名，去掉扩展名</span>\n    choice_ckpt_name<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>choice_ckpt<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model_output_msg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"未选择配置文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">auto_load_diff</span><span class=\"token punctuation\">(</span>diff_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"未启用扩散配置文件加载\"</span>\n    \n    <span class=\"token comment\"># 获取目录中所有以.yaml结尾的文件</span>\n    all_diff_config <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>yaml <span class=\"token keyword\">for</span> yaml <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>second_dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> yaml<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".yaml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\"># 遍历所有扩散配置文件</span>\n    <span class=\"token keyword\">for</span> config <span class=\"token keyword\">in</span> all_diff_config<span class=\"token punctuation\">:</span>\n        config_fname<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n        diff_fname<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>diff_model<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 比较文件名是否匹配</span>\n        <span class=\"token keyword\">if</span> config_fname <span class=\"token operator\">==</span> diff_fname<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> config\n    \n    <span class=\"token comment\"># 如果没有找到匹配的配置文件，则返回相应提示</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到匹配的扩散配置文件\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">model_empty_cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> model\n    <span class=\"token keyword\">if</span> model <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> sid<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"没有模型需要卸载!\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        model<span class=\"token punctuation\">.</span>unload_model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        model <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>empty_cache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> sid<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"模型卸载完毕!\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">debug_change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> debug\n    debug <span class=\"token operator\">=</span> debug_button<span class=\"token punctuation\">.</span>value\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">vc_infer</span><span class=\"token punctuation\">(</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> sr<span class=\"token punctuation\">,</span> input_audio_path<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> \n              noise_scale<span class=\"token punctuation\">,</span> pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span>\n              k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 将输入音频转换为浮点数类型，并确保只有一个声道</span>\n    <span class=\"token keyword\">if</span> np<span class=\"token punctuation\">.</span>issubdtype<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        input_audio <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>input_audio <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>iinfo<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        input_audio <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>to_mono<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 如果音频采样率不是44100Hz，则重新采样为44100Hz</span>\n    <span class=\"token keyword\">if</span> sr <span class=\"token operator\">!=</span> <span class=\"token number\">44100</span><span class=\"token punctuation\">:</span>\n        input_audio <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">,</span> orig_sr<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">,</span> target_sr<span class=\"token operator\">=</span><span class=\"token number\">44100</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 将预处理后的音频保存为临时文件</span>\n    sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"temp.wav\"</span><span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> <span class=\"token number\">44100</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">\"wav\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 对临时文件执行声码转换推断</span>\n    _audio <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>slice_inference<span class=\"token punctuation\">(</span><span class=\"token string\">\"temp.wav\"</span><span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span>\n                                   pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span>\n                                   k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 清空模型状态</span>\n    model<span class=\"token punctuation\">.</span>clear_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 确定输出文件名</span>\n    key <span class=\"token operator\">=</span> <span class=\"token string\">\"auto\"</span> <span class=\"token keyword\">if</span> auto_f0 <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vc_transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">key\"</span></span>\n    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"_\"</span> <span class=\"token keyword\">if</span> cluster_ratio <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cluster_ratio<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_\"</span></span>\n    isdiffusion <span class=\"token operator\">=</span> <span class=\"token string\">\"sovits_\"</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> model<span class=\"token punctuation\">.</span>shallow_diffusion <span class=\"token keyword\">else</span> <span class=\"token string\">\"sovdiff_\"</span> <span class=\"token keyword\">if</span> model<span class=\"token punctuation\">.</span>shallow_diffusion <span class=\"token keyword\">else</span> <span class=\"token string\">\"diff_\"</span>\n    \n    <span class=\"token comment\"># 处理 Gradio 上传的文件路径</span>\n    truncated_basename <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>input_audio_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> Path<span class=\"token punctuation\">(</span>input_audio_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"-0-100\"</span> <span class=\"token keyword\">else</span> Path<span class=\"token punctuation\">(</span>input_audio_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem\n    output_file_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>truncated_basename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cluster<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>isdiffusion<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>f0_predictor<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_format<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span>\n    output_file_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"results\"</span><span class=\"token punctuation\">,</span> output_file_name<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 如果输出文件已经存在，则在文件名中添加序号以避免覆盖现有文件</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>output_file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>output_file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            output_file_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>truncated_basename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cluster<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>isdiffusion<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>f0_predictor<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_format<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span>\n            output_file_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"results\"</span><span class=\"token punctuation\">,</span> output_file_name<span class=\"token punctuation\">)</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token comment\"># 将输出音频保存为指定的格式</span>\n    sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>output_file_path<span class=\"token punctuation\">,</span> _audio<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>target_sample<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span>output_format<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 返回输出文件路径</span>\n    <span class=\"token keyword\">return</span> output_file_path\n\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">vc_fn</span><span class=\"token punctuation\">(</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span> pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">,</span> progress<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Progress<span class=\"token punctuation\">(</span>track_tqdm<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> model\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> input_audio <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还没有上传音频\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> model <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还没有加载模型\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'cluster_model'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> model<span class=\"token punctuation\">.</span>feature_retrieval <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> cluster_ratio <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还未加载聚类或特征检索模型，无法启用聚类/特征检索混合比例\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        audio<span class=\"token punctuation\">,</span> sr <span class=\"token operator\">=</span> sf<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">)</span>\n        output_file_path <span class=\"token operator\">=</span> vc_infer<span class=\"token punctuation\">(</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> audio<span class=\"token punctuation\">,</span> sr<span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span> pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"temp.wav\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">,</span> output_file_path\n    <span class=\"token keyword\">except</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>OutOfMemoryError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> gr<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n显存不足，减小batch_size或者更换配置也许可以解决\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> debug<span class=\"token punctuation\">:</span>\n            traceback<span class=\"token punctuation\">.</span>print_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> gr<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">tts_fn</span><span class=\"token punctuation\">(</span>_text<span class=\"token punctuation\">,</span> _gender<span class=\"token punctuation\">,</span> _lang<span class=\"token punctuation\">,</span> _rate<span class=\"token punctuation\">,</span> _volume<span class=\"token punctuation\">,</span> output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span>cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span>pad_seconds<span class=\"token punctuation\">,</span>cl_num<span class=\"token punctuation\">,</span>lg_num<span class=\"token punctuation\">,</span>lgr_num<span class=\"token punctuation\">,</span>f0_predictor<span class=\"token punctuation\">,</span>enhancer_adaptive_key<span class=\"token punctuation\">,</span>cr_threshold<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">,</span>use_spk_mix<span class=\"token punctuation\">,</span>second_encoding<span class=\"token punctuation\">,</span>loudness_envelope_adjustment<span class=\"token punctuation\">,</span>progress<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Progress<span class=\"token punctuation\">(</span>track_tqdm<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> model\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> model <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还没有加载模型\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'cluster_model'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> model<span class=\"token punctuation\">.</span>feature_retrieval <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> cluster_ratio <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还未加载聚类或特征检索模型，无法启用聚类/特征检索混合比例\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        _rate <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"+</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>_rate<span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%\"</span></span> <span class=\"token keyword\">if</span> _rate <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>_rate<span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%\"</span></span>\n        _volume <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"+</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>_volume<span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%\"</span></span> <span class=\"token keyword\">if</span> _volume <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>_volume<span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%\"</span></span>\n        <span class=\"token keyword\">if</span> _lang <span class=\"token operator\">==</span> <span class=\"token string\">\"Auto\"</span><span class=\"token punctuation\">:</span>\n            _gender <span class=\"token operator\">=</span> <span class=\"token string\">\"Male\"</span> <span class=\"token keyword\">if</span> _gender <span class=\"token operator\">==</span> <span class=\"token string\">\"男\"</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"Female\"</span>\n            subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">r\".\\env\\python.exe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./edgetts/tts.py\"</span><span class=\"token punctuation\">,</span> _text<span class=\"token punctuation\">,</span> _lang<span class=\"token punctuation\">,</span> _rate<span class=\"token punctuation\">,</span> _volume<span class=\"token punctuation\">,</span> _gender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">r\".\\env\\python.exe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./edgetts/tts.py\"</span><span class=\"token punctuation\">,</span> _text<span class=\"token punctuation\">,</span> _lang<span class=\"token punctuation\">,</span> _rate<span class=\"token punctuation\">,</span> _volume<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        target_sr <span class=\"token operator\">=</span> <span class=\"token number\">44100</span>\n        y<span class=\"token punctuation\">,</span> sr <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"tts.wav\"</span><span class=\"token punctuation\">)</span>\n        resampled_y <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> orig_sr<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">,</span> target_sr<span class=\"token operator\">=</span>target_sr<span class=\"token punctuation\">)</span>\n        sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"tts.wav\"</span><span class=\"token punctuation\">,</span> resampled_y<span class=\"token punctuation\">,</span> target_sr<span class=\"token punctuation\">,</span> subtype <span class=\"token operator\">=</span> <span class=\"token string\">\"PCM_16\"</span><span class=\"token punctuation\">)</span>\n        input_audio <span class=\"token operator\">=</span> <span class=\"token string\">\"tts.wav\"</span>\n        audio<span class=\"token punctuation\">,</span> sr <span class=\"token operator\">=</span> sf<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">)</span>\n        output_file_path <span class=\"token operator\">=</span> vc_infer<span class=\"token punctuation\">(</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> audio<span class=\"token punctuation\">,</span> sr<span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span> pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#os.remove(\"tts.wav\")</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">,</span> output_file_path\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> debug<span class=\"token punctuation\">:</span>\n            traceback<span class=\"token punctuation\">.</span>print_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>界面设计</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">    <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">'推理'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> inference_tab<span class=\"token punctuation\">:</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                    ### 音频推理模块\n                     \n                    \"\"\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                choice_ckpt <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"模型选择\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>ckpt_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择模型\"</span><span class=\"token punctuation\">)</span>\n                model_branch <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"模型编码器\"</span><span class=\"token punctuation\">,</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请先选择模型\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                config_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"配置文件\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>config_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择配置文件\"</span><span class=\"token punctuation\">)</span>\n                config_info <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"配置文件编码器\"</span><span class=\"token punctuation\">,</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请选择配置文件\"</span><span class=\"token punctuation\">)</span>\n            \n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"**请检查模型和配置文件的编码器是否匹配**\"</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                diff_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"（可选）选择扩散模型\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>diff_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择扩散模型\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                diff_config_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"扩散模型配置文件\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>diff_config_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择扩散模型配置文件\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                cluster_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"（可选）选择聚类模型/特征检索模型\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>cluster_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择聚类模型/特征检索模型\"</span><span class=\"token punctuation\">)</span>\n                vocoder_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择声码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>vocoder_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"nsf_hifigan\"</span><span class=\"token punctuation\">)</span>\n            \n\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                enhance <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"是否使用NSF_HIFIGAN增强\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n                only_diffusion <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"是否使用全扩散推理\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                diffusion_method <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"扩散模型采样器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dpm-solver++\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dpm-solver\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pndm\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ddim\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"unipc\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"dpm-solver++\"</span><span class=\"token punctuation\">)</span>\n                diffusion_speedup <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"扩散加速倍数，默认为10倍\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            \n            using_device <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"推理设备，默认为自动选择\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Auto\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>cuda<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"Auto\"</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                loadckpt <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"加载模型\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                unload <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"卸载模型\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                model_message <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"Output Message\"</span><span class=\"token punctuation\">)</span>\n                sid <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"So-VITS说话人\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"speaker0\"</span><span class=\"token punctuation\">)</span>\n\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>\n    value<span class=\"token operator\">=</span><span class=\"token string\">\"请等待模型加载，大概十多秒钟(取决于硬盘速度)后续不需要重新加载模型\"</span>\n<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Tabs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"音频上传\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    vc_input <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Audio<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"单音频上传\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"filepath\"</span><span class=\"token punctuation\">,</span> source<span class=\"token operator\">=</span><span class=\"token string\">\"upload\"</span>\n                    <span class=\"token punctuation\">)</span>\n\n\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"文字转语音\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>\n                    <span class=\"token triple-quoted-string string\">\"\"\"\n                    说明：使用edge_tts库生成音频，并转换为模型音色。\n                    \"\"\"</span>\n                <span class=\"token punctuation\">)</span>\n                text_input <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>\n                    label<span class=\"token operator\">=</span><span class=\"token string\">\"在此输入需要转译的文字（建议打开自动f0预测）\"</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    tts_gender <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"说话人性别\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"男\"</span>\n                    <span class=\"token punctuation\">)</span>\n                    tts_lang <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"选择语言，Auto为根据输入文字自动识别\"</span><span class=\"token punctuation\">,</span>\n                        choices<span class=\"token operator\">=</span>SUPPORTED_LANGUAGES<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"Auto\"</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    tts_rate <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"TTS语音变速（倍速相对值）\"</span><span class=\"token punctuation\">,</span>\n                        minimum<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">0.1</span>\n                    <span class=\"token punctuation\">)</span>\n                    tts_volume <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"TTS语音音量（相对值）\"</span><span class=\"token punctuation\">,</span>\n                        minimum<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">0.1</span>\n                    <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            auto_f0 <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"自动f0预测，配合聚类模型f0预测效果更好，会导致变调功能失效\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n            <span class=\"token punctuation\">)</span>\n            f0_predictor <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"f0预测器选择（如遇哑音可以更换f0预测器解决，crepe为原F0使用均值滤波器）\"</span><span class=\"token punctuation\">,</span>\n                choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"crepe\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span>\n            <span class=\"token punctuation\">)</span>\n            cr_threshold <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"F0过滤阈值，只有使用crepe时有效。数值范围从0-1。降低该值可减少跑调概率，但会增加哑音\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0.05</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            vc_transform <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"变调（整数，可以是正负数，半音数量。升高八度就是12）\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n            cluster_ratio <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"聚类模型/特征检索混合比例，0-1之间，默认为0不启用聚类或特征检索，能提升音色相似度，但会导致咬字下降\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n            k_step <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"浅扩散步数，必须使用扩散模型才有效，步数越大越接近扩散模型的结果\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">1000</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            output_format <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"音频输出格式\"</span><span class=\"token punctuation\">,</span>\n                choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"wav\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"flac\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mp3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token string\">\"wav\"</span>\n            <span class=\"token punctuation\">)</span>\n            enhancer_adaptive_key <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"使NSF-HIFIGAN增强器适应更高的音域(单位为半音数)，默认为0\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n            slice_db <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"切片阈值\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n            cl_num <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"音频自动切片，0为按默认方式切片，单位为秒/s，显存不足可以设置此处强制切片\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Accordion<span class=\"token punctuation\">(</span><span class=\"token string\">\"高级设置\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            noise_scale <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"noise_scale 影响音质，默认即可\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0.4</span>\n            <span class=\"token punctuation\">)</span>\n            pad_seconds <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"推理音频pad秒数，由于未知原因开头结尾会有异响，pad一小段静音段后就不会出现\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0.5</span>\n            <span class=\"token punctuation\">)</span>\n            lg_num <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"两端音频切片的交叉淡入长度，如果自动切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值0，注意，该设置会影响推理速度，单位为秒/s\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n            <span class=\"token punctuation\">)</span>\n            lgr_num <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"自动音频切片后，需要舍弃每段切片的头尾。该参数设置交叉长度保留的比例，范围0-1，左开右闭\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0.75</span>\n            <span class=\"token punctuation\">)</span>\n            second_encoding <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"二次编码，浅扩散前会对原始音频进行二次编码,效果两极分化，默认关闭\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n            <span class=\"token punctuation\">)</span>\n            loudness_envelope_adjustment <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"输入源响度包络替换输出响度包络融合比例，越靠近1越使用输出响度包络\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n            use_spk_mix <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"动态声线融合，仅提供开关，不建议开启\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            vc_submit <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"音频转换\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n            vc_tts_submit <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"文本转语音\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n        vc_output1 <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"输出信息\"</span><span class=\"token punctuation\">)</span>\n        vc_output2 <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Audio<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"输出音频\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Tabs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"panel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n            * * *\n\n            **调试设置**\n            \"\"\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                debug_button <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"启动Debug，仅在终端运行时有效，会在vscode或者pycharm终端显示详细报错\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>debug<span class=\"token punctuation\">)</span>                \n    debug_button<span class=\"token punctuation\">.</span>change<span class=\"token punctuation\">(</span>debug_change<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>按键绑定</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">inference_tab<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>refresh_options<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>choice_ckpt<span class=\"token punctuation\">,</span>config_choice<span class=\"token punctuation\">,</span>cluster_choice<span class=\"token punctuation\">,</span>diff_choice<span class=\"token punctuation\">,</span>diff_config_choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nchoice_ckpt<span class=\"token punctuation\">.</span>change<span class=\"token punctuation\">(</span>auto_load<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>choice_ckpt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>model_branch<span class=\"token punctuation\">,</span> config_choice<span class=\"token punctuation\">,</span> config_info<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \nconfig_choice<span class=\"token punctuation\">.</span>change<span class=\"token punctuation\">(</span>load_json_encoder<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>config_choice<span class=\"token punctuation\">,</span> choice_ckpt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>config_info<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndiff_choice<span class=\"token punctuation\">.</span>change<span class=\"token punctuation\">(</span>auto_load_diff<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>diff_choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>diff_config_choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#自动装载配置文件</span>\n\nloadckpt<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>load_model_func<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>choice_ckpt<span class=\"token punctuation\">,</span>cluster_choice<span class=\"token punctuation\">,</span>config_choice<span class=\"token punctuation\">,</span>enhance<span class=\"token punctuation\">,</span>diff_choice<span class=\"token punctuation\">,</span>diff_config_choice<span class=\"token punctuation\">,</span>only_diffusion<span class=\"token punctuation\">,</span>use_spk_mix<span class=\"token punctuation\">,</span>using_device<span class=\"token punctuation\">,</span>diffusion_method<span class=\"token punctuation\">,</span>diffusion_speedup<span class=\"token punctuation\">,</span>cl_num<span class=\"token punctuation\">,</span>vocoder_choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>model_message<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nunload<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>model_empty_cache<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>sid<span class=\"token punctuation\">,</span> model_message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nvc_submit<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>vc_fn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> vc_input<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span>auto_f0<span class=\"token punctuation\">,</span>cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span>pad_seconds<span class=\"token punctuation\">,</span>cl_num<span class=\"token punctuation\">,</span>lg_num<span class=\"token punctuation\">,</span>lgr_num<span class=\"token punctuation\">,</span>f0_predictor<span class=\"token punctuation\">,</span>enhancer_adaptive_key<span class=\"token punctuation\">,</span>cr_threshold<span class=\"token punctuation\">,</span>k_step<span class=\"token punctuation\">,</span>use_spk_mix<span class=\"token punctuation\">,</span>second_encoding<span class=\"token punctuation\">,</span>loudness_envelope_adjustment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>vc_output1<span class=\"token punctuation\">,</span> vc_output2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nvc_tts_submit<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>tts_fn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>text_input<span class=\"token punctuation\">,</span> tts_gender<span class=\"token punctuation\">,</span> tts_lang<span class=\"token punctuation\">,</span> tts_rate<span class=\"token punctuation\">,</span> tts_volume<span class=\"token punctuation\">,</span> output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span>auto_f0<span class=\"token punctuation\">,</span>cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span>pad_seconds<span class=\"token punctuation\">,</span>cl_num<span class=\"token punctuation\">,</span>lg_num<span class=\"token punctuation\">,</span>lgr_num<span class=\"token punctuation\">,</span>f0_predictor<span class=\"token punctuation\">,</span>enhancer_adaptive_key<span class=\"token punctuation\">,</span>cr_threshold<span class=\"token punctuation\">,</span>k_step<span class=\"token punctuation\">,</span>use_spk_mix<span class=\"token punctuation\">,</span>second_encoding<span class=\"token punctuation\">,</span>loudness_envelope_adjustment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>vc_output1<span class=\"token punctuation\">,</span> vc_output2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#推理相关按键绑定</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在项目工具infer_tool.py内作如下修改</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#添加tqdm</span>\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm\n\n<span class=\"token comment\">#并且在446行 </span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>slice_tag<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> audio_data<span class=\"token punctuation\">:</span><span class=\"token comment\">#改为</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>slice_tag<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> tqdm<span class=\"token punctuation\">(</span>audio_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#用于显示进度条</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"预存安装信息\"><a href=\"#预存安装信息\" class=\"headerlink\" title=\"预存安装信息\"></a>预存安装信息</h3><p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712389141182.png\" alt=\"1712389123101\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712484163277.png\" alt=\"1712484163277\">-</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712482664500.png\" alt=\"1712482664500\"></p>\n<p>如果您将函数<code>list_files</code>的类型注解从<code>-&gt; list[Path]</code>修改为没有指定具体类型，即去掉具体类型的注解，那么就不会再触发类型错误。这是因为Python的类型提示是可选的，您可以选择添加或删除它们，对于静态类型检查器而言，如果没有提供类型注解，它将无法对类型进行验证，因此不会再引发类型错误。</p>\n<p>因此，如果您考虑删除特定的类型提示是为了避免类型错误，这是一个可行的方法。 但要注意，类型提示的存在可以帮助他人更容易地理解代码，并且在编写大型项目时，类型提示也有助于提高代码的可维护性和可读性。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n\n<span class=\"token keyword\">from</span> loguru <span class=\"token keyword\">import</span> logger\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm\n\n<span class=\"token keyword\">from</span> fap<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token builtin\">file</span> <span class=\"token keyword\">import</span> AUDIO_EXTENSIONS<span class=\"token punctuation\">,</span> list_files\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>\n    input_dir<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    recursive<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    visualize<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    long_threshold<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n    short_threshold<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Get the length of all audio files in a directory\n    \"\"\"</span>\n\n    <span class=\"token keyword\">import</span> soundfile <span class=\"token keyword\">as</span> sf\n    <span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\n\n    input_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>input_dir<span class=\"token punctuation\">)</span>\n    files <span class=\"token operator\">=</span> list_files<span class=\"token punctuation\">(</span>input_dir<span class=\"token punctuation\">,</span> AUDIO_EXTENSIONS<span class=\"token punctuation\">,</span> recursive<span class=\"token operator\">=</span>recursive<span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Found </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> files, calculating length\"</span></span><span class=\"token punctuation\">)</span>\n\n    infos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> tqdm<span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> desc<span class=\"token operator\">=</span><span class=\"token string\">\"Collecting infos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sound <span class=\"token operator\">=</span> sf<span class=\"token punctuation\">.</span>SoundFile<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        infos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span>\n                <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                sound<span class=\"token punctuation\">.</span>samplerate<span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> sound<span class=\"token punctuation\">.</span>samplerate<span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>relative_to<span class=\"token punctuation\">(</span>input_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Duration</span>\n    total_duration <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span>\n    avg_duration <span class=\"token operator\">=</span> total_duration <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>infos<span class=\"token punctuation\">)</span>\n    min_duration <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span>\n    max_duration <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Total duration: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>total_duration <span class=\"token operator\">/</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> hours\"</span></span><span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Average duration: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>avg_duration<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Max duration: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Min duration: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Too Long</span>\n    <span class=\"token keyword\">if</span> long_threshold <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        long_files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>long_threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># sort by duration</span>\n        <span class=\"token keyword\">if</span> long_files<span class=\"token punctuation\">:</span>\n            long_files <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>long_files<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            logger<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span>\n                <span class=\"token string-interpolation\"><span class=\"token string\">f\"Found </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>long_files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> files longer than </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>long_threshold<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> long_files<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"    </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Too Short</span>\n    <span class=\"token keyword\">if</span> short_threshold <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        short_files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>short_threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> short_files<span class=\"token punctuation\">:</span>\n            short_files <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>short_files<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n            logger<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span>\n                <span class=\"token string-interpolation\"><span class=\"token string\">f\"Found </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>short_files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> files shorter than </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>short_threshold<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> short_files<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"    </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Sample Rate</span>\n    total_samplerate <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span>\n    avg_samplerate <span class=\"token operator\">=</span> total_samplerate <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>infos<span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Average samplerate: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>avg_samplerate<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visualize<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> short_threshold <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> total_duration<span class=\"token punctuation\">,</span> avg_duration<span class=\"token punctuation\">,</span> min_duration<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> short_files\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> total_duration<span class=\"token punctuation\">,</span> avg_duration<span class=\"token punctuation\">,</span> min_duration<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        \n    <span class=\"token comment\"># Visualize</span>\n    plt<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bins<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"Distribution of audio lengths (Total: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>infos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> files, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>total_duration <span class=\"token operator\">/</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> hours)\"</span></span>\n    <span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Length (seconds)\"</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Count\"</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在第二个版本的代码中，对函数<code>length</code>进行了一些修改。参数列表中的<code>recursive</code>、<code>visualize</code>、<code>long_threshold</code>和<code>short_threshold</code>现在是可选的，并且都有了默认值。此外，在返回结果的部分也进行了修改。如果<code>visualize</code>为<code>False</code>，函数会根据<code>short_threshold</code>是否为<code>None</code>返回不同的结果。在处理过长或过短音频文件时，输出信息的显示也稍微不同，指明了具体发现的长音频文件数或短音频文件数。</p>\n<p>需要删除并且修改一下文本内的内容</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># This file is edited from https://github.com/openvpi/audio-slicer/blob/main/slicer2.py</span>\n\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Iterable<span class=\"token punctuation\">,</span> Union\n\n<span class=\"token keyword\">import</span> librosa\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> soundfile <span class=\"token keyword\">as</span> sf\n\n<span class=\"token keyword\">from</span> fish_audio_preprocess<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>slice_audio <span class=\"token keyword\">import</span> slice_by_max_duration\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">merge_short_chunks</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    merged_chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> chunk <span class=\"token keyword\">in</span> chunks<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> length <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> max_duration <span class=\"token operator\">*</span> rate <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            merged_chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span>\n            length <span class=\"token operator\">+=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        merged_chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> merged_chunks\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Slicer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>\n        self<span class=\"token punctuation\">,</span>\n        sr<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        threshold<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40.0</span><span class=\"token punctuation\">,</span>\n        min_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n        min_interval<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n        hop_size<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        max_sil_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> min_length <span class=\"token operator\">>=</span> min_interval <span class=\"token operator\">>=</span> hop_size<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"The following condition must be satisfied: min_length >= min_interval >= hop_size\"</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> max_sil_kept <span class=\"token operator\">>=</span> hop_size<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"The following condition must be satisfied: max_sil_kept >= hop_size\"</span>\n            <span class=\"token punctuation\">)</span>\n\n        min_interval <span class=\"token operator\">=</span> sr <span class=\"token operator\">*</span> min_interval <span class=\"token operator\">/</span> <span class=\"token number\">1000</span>\n        self<span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>threshold <span class=\"token operator\">/</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hop_size <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> hop_size <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>win_size <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>min_length <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> min_length <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>min_interval <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_interval <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> max_sil_kept <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_apply_slice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> waveform<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> waveform<span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> begin <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size <span class=\"token punctuation\">:</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> waveform<span class=\"token punctuation\">[</span>\n                begin <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size <span class=\"token punctuation\">:</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> waveform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            samples <span class=\"token operator\">=</span> waveform<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            samples <span class=\"token operator\">=</span> waveform\n\n        <span class=\"token keyword\">if</span> samples<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>min_length<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>waveform<span class=\"token punctuation\">]</span>\n\n        rms_list <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>feature<span class=\"token punctuation\">.</span>rms<span class=\"token punctuation\">(</span>\n            y<span class=\"token operator\">=</span>samples<span class=\"token punctuation\">,</span> frame_length<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>win_size<span class=\"token punctuation\">,</span> hop_length<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>hop_size\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        sil_tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        clip_start <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> rms <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>rms_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># Keep looping while frame is silent.</span>\n            <span class=\"token keyword\">if</span> rms <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># Record start of silent frames.</span>\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    silence_start <span class=\"token operator\">=</span> i\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Keep looping while frame is not silent and silence start has not been recorded.</span>\n            <span class=\"token keyword\">if</span> silence_start <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Clear recorded silence start if interval is not enough or clip is too short</span>\n            is_leading_silence <span class=\"token operator\">=</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> i <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>max_sil_kept\n            need_slice_middle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_interval\n                <span class=\"token keyword\">and</span> i <span class=\"token operator\">-</span> clip_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_length\n            <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_leading_silence <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> need_slice_middle<span class=\"token punctuation\">:</span>\n                silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Need slicing. Record the range of silent frames to be removed.</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>max_sil_kept<span class=\"token punctuation\">:</span>\n                pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>silence_start <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> silence_start\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                clip_start <span class=\"token operator\">=</span> pos\n            <span class=\"token keyword\">elif</span> i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>\n                    i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                pos <span class=\"token operator\">+=</span> i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                pos_l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>\n                        silence_start <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> silence_start\n                <span class=\"token punctuation\">)</span>\n                pos_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> i\n                    <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                <span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    clip_start <span class=\"token operator\">=</span> pos_r\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>pos_l<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>pos_r<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    clip_start <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>pos_r<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                pos_l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>\n                        silence_start <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> silence_start\n                <span class=\"token punctuation\">)</span>\n                pos_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> i\n                    <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                <span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos_l<span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                clip_start <span class=\"token operator\">=</span> pos_r\n            silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># Deal with trailing silence.</span>\n        total_frames <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            silence_start <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">and</span> total_frames <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_interval\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            silence_end <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>total_frames<span class=\"token punctuation\">,</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept<span class=\"token punctuation\">)</span>\n            pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>silence_start <span class=\"token punctuation\">:</span> silence_end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> silence_start\n            sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> total_frames <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Apply and return slices.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sil_tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>waveform<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sil_tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> total_frames<span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> total_frames<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> chunks\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_v2</span><span class=\"token punctuation\">(</span>\n    audio<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">,</span>\n    rate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    merge_short<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Iterable<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Slice audio by silence\n\n    Args:\n        audio: audio data, in shape (samples, channels)\n        rate: sample rate\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n        merge_short: merge short slices automatically\n\n    Returns:\n        Iterable of sliced audio\n    \"\"\"</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> rate <span class=\"token operator\">&lt;</span> min_duration<span class=\"token punctuation\">:</span>\n        sliced_by_max_duration_chunk <span class=\"token operator\">=</span> slice_by_max_duration<span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> merge_short_chunks<span class=\"token punctuation\">(</span>\n            sliced_by_max_duration_chunk<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate\n        <span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> merge_short <span class=\"token keyword\">else</span> sliced_by_max_duration_chunk\n        <span class=\"token keyword\">return</span>\n\n    slicer <span class=\"token operator\">=</span> Slicer<span class=\"token punctuation\">(</span>\n        sr<span class=\"token operator\">=</span>rate<span class=\"token punctuation\">,</span>\n        threshold<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n        min_length<span class=\"token operator\">=</span>min_duration <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        min_interval<span class=\"token operator\">=</span>min_silence_duration <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        hop_size<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n        max_sil_kept<span class=\"token operator\">=</span>max_silence_kept <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    sliced_audio <span class=\"token operator\">=</span> slicer<span class=\"token punctuation\">.</span><span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> merge_short<span class=\"token punctuation\">:</span>\n        sliced_audio <span class=\"token operator\">=</span> merge_short_chunks<span class=\"token punctuation\">(</span>sliced_audio<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> chunk <span class=\"token keyword\">in</span> sliced_audio<span class=\"token punctuation\">:</span>\n        sliced_by_max_duration_chunk <span class=\"token operator\">=</span> slice_by_max_duration<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> sliced_by_max_duration_chunk\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_file_v2</span><span class=\"token punctuation\">(</span>\n    input_file<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    output_dir<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    flat_layout<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    merge_short<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Slice audio by silence and save to output folder\n\n    Args:\n        input_file: input audio file\n        output_dir: output folder\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n        flat_layout: use flat directory structure\n        merge_short: merge short slices automatically\n    \"\"\"</span>\n\n    output_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n\n    audio<span class=\"token punctuation\">,</span> rate <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> mono<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> sliced <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>\n        slice_audio_v2<span class=\"token punctuation\">(</span>\n            audio<span class=\"token punctuation\">,</span>\n            rate<span class=\"token punctuation\">,</span>\n            min_duration<span class=\"token operator\">=</span>min_duration<span class=\"token punctuation\">,</span>\n            max_duration<span class=\"token operator\">=</span>max_duration<span class=\"token punctuation\">,</span>\n            min_silence_duration<span class=\"token operator\">=</span>min_silence_duration<span class=\"token punctuation\">,</span>\n            top_db<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n            hop_length<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n            max_silence_kept<span class=\"token operator\">=</span>max_silence_kept<span class=\"token punctuation\">,</span>\n            merge_short<span class=\"token operator\">=</span>merge_short<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> flat_layout<span class=\"token punctuation\">:</span>\n            sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>idx<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.wav\"</span></span><span class=\"token punctuation\">,</span> sliced<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>output_dir <span class=\"token operator\">/</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>idx<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.wav\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sliced<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改后代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># This file is edited from https://github.com/openvpi/audio-slicer/blob/main/slicer2.py</span>\n\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Iterable<span class=\"token punctuation\">,</span> Union\n\n<span class=\"token keyword\">import</span> librosa\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> soundfile <span class=\"token keyword\">as</span> sf\n\n<span class=\"token keyword\">from</span> fish_audio_preprocess<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>slice_audio <span class=\"token keyword\">import</span> slice_by_max_duration\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Slicer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>\n        self<span class=\"token punctuation\">,</span>\n        sr<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        threshold<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40.0</span><span class=\"token punctuation\">,</span>\n        min_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n        min_interval<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n        hop_size<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        max_sil_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> min_length <span class=\"token operator\">>=</span> min_interval <span class=\"token operator\">>=</span> hop_size<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"The following condition must be satisfied: min_length >= min_interval >= hop_size\"</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> max_sil_kept <span class=\"token operator\">>=</span> hop_size<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"The following condition must be satisfied: max_sil_kept >= hop_size\"</span>\n            <span class=\"token punctuation\">)</span>\n\n        min_interval <span class=\"token operator\">=</span> sr <span class=\"token operator\">*</span> min_interval <span class=\"token operator\">/</span> <span class=\"token number\">1000</span>\n        self<span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>threshold <span class=\"token operator\">/</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hop_size <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> hop_size <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>win_size <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>min_length <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> min_length <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>min_interval <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_interval <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> max_sil_kept <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_apply_slice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> waveform<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> waveform<span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> begin <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size <span class=\"token punctuation\">:</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> waveform<span class=\"token punctuation\">[</span>\n                begin <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size <span class=\"token punctuation\">:</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> waveform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            samples <span class=\"token operator\">=</span> waveform<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            samples <span class=\"token operator\">=</span> waveform\n\n        <span class=\"token keyword\">if</span> samples<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>min_length<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>waveform<span class=\"token punctuation\">]</span>\n\n        rms_list <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>feature<span class=\"token punctuation\">.</span>rms<span class=\"token punctuation\">(</span>\n            y<span class=\"token operator\">=</span>samples<span class=\"token punctuation\">,</span> frame_length<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>win_size<span class=\"token punctuation\">,</span> hop_length<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>hop_size\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        sil_tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        clip_start <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> rms <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>rms_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># Keep looping while frame is silent.</span>\n            <span class=\"token keyword\">if</span> rms <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># Record start of silent frames.</span>\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    silence_start <span class=\"token operator\">=</span> i\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Keep looping while frame is not silent and silence start has not been recorded.</span>\n            <span class=\"token keyword\">if</span> silence_start <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Clear recorded silence start if interval is not enough or clip is too short</span>\n            is_leading_silence <span class=\"token operator\">=</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> i <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>max_sil_kept\n            need_slice_middle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_interval\n                <span class=\"token keyword\">and</span> i <span class=\"token operator\">-</span> clip_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_length\n            <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_leading_silence <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> need_slice_middle<span class=\"token punctuation\">:</span>\n                silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Need slicing. Record the range of silent frames to be removed.</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>max_sil_kept<span class=\"token punctuation\">:</span>\n                pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>silence_start <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> silence_start\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                clip_start <span class=\"token operator\">=</span> pos\n            <span class=\"token keyword\">elif</span> i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>\n                    i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                pos <span class=\"token operator\">+=</span> i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                pos_l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>\n                        silence_start <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> silence_start\n                <span class=\"token punctuation\">)</span>\n                pos_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> i\n                    <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                <span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    clip_start <span class=\"token operator\">=</span> pos_r\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>pos_l<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>pos_r<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    clip_start <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>pos_r<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                pos_l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>\n                        silence_start <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> silence_start\n                <span class=\"token punctuation\">)</span>\n                pos_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> i\n                    <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                <span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos_l<span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                clip_start <span class=\"token operator\">=</span> pos_r\n            silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># Deal with trailing silence.</span>\n        total_frames <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            silence_start <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">and</span> total_frames <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_interval\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            silence_end <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>total_frames<span class=\"token punctuation\">,</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept<span class=\"token punctuation\">)</span>\n            pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>silence_start <span class=\"token punctuation\">:</span> silence_end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> silence_start\n            sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> total_frames <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Apply and return slices.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sil_tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>waveform<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sil_tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> total_frames<span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> total_frames<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> chunks\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_v2</span><span class=\"token punctuation\">(</span>\n    audio<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">,</span>\n    rate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Iterable<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Slice audio by silence\n\n    Args:\n        audio: audio data, in shape (samples, channels)\n        rate: sample rate\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n\n    Returns:\n        Iterable of sliced audio\n    \"\"\"</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> rate <span class=\"token operator\">&lt;</span> min_duration<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> slice_by_max_duration<span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\n    slicer <span class=\"token operator\">=</span> Slicer<span class=\"token punctuation\">(</span>\n        sr<span class=\"token operator\">=</span>rate<span class=\"token punctuation\">,</span>\n        threshold<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n        min_length<span class=\"token operator\">=</span>min_duration <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        min_interval<span class=\"token operator\">=</span>min_silence_duration <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        hop_size<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n        max_sil_kept<span class=\"token operator\">=</span>max_silence_kept <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> chunk <span class=\"token keyword\">in</span> slicer<span class=\"token punctuation\">.</span><span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> slice_by_max_duration<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_file_v2</span><span class=\"token punctuation\">(</span>\n    input_file<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    output_dir<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Slice audio by silence and save to output folder\n\n    Args:\n        input_file: input audio file\n        output_dir: output folder\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n    \"\"\"</span>\n\n    output_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n    output_dir<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>parents<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    input_file_name <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem\n    audio<span class=\"token punctuation\">,</span> rate <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> mono<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> sliced <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>\n        slice_audio_v2<span class=\"token punctuation\">(</span>\n            audio<span class=\"token punctuation\">,</span>\n            rate<span class=\"token punctuation\">,</span>\n            min_duration<span class=\"token operator\">=</span>min_duration<span class=\"token punctuation\">,</span>\n            max_duration<span class=\"token operator\">=</span>max_duration<span class=\"token punctuation\">,</span>\n            min_silence_duration<span class=\"token operator\">=</span>min_silence_duration<span class=\"token punctuation\">,</span>\n            top_db<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n            hop_length<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n            max_silence_kept<span class=\"token operator\">=</span>max_silence_kept<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>output_dir <span class=\"token operator\">/</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>input_file_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>idx<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.wav\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sliced<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>1. </p>\n<ol start=\"2\">\n<li><p>*移除了merge_short参数**：原始代码中的<code>merge_short</code>参数用于控制是否自动合并短音频片段，我在修改后的代码中将其移除，以简化逻辑。</p>\n</li>\n<li><p><strong>修改了判定条件</strong>：我将原始代码中对于音频长度小于<code>min_duration</code>时的处理逻辑进行了修改。原先在这种情况下会执行合并短片段的操作，而我修改后则直接通过<code>slice_audio_v2</code>函数来裁剪音频，而不再合并或限制数量。</p>\n</li>\n<li><p><strong>删除了返回值</strong>：由于现在裁剪条目的数量不再有限制，所以在函数的最后不再需要返回<code>None</code>，因为函数会一直运行直到音频全部被处理完毕。</p>\n<p>二次修改</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">file_name_changes <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ncurrent_input_file_name <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\">#用于进行中文消除</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_file_v2</span><span class=\"token punctuation\">(</span>\n    input_file<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    output_dir<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> file_name_changes\n    <span class=\"token keyword\">global</span> current_input_file_name\n\n    output_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n    output_dir<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>parents<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    input_file_name <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem\n\n    <span class=\"token keyword\">if</span> input_file_name <span class=\"token operator\">!=</span> current_input_file_name<span class=\"token punctuation\">:</span>\n        file_name_changes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        current_input_file_name <span class=\"token operator\">=</span> input_file_name\n\n    audio<span class=\"token punctuation\">,</span> rate <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> mono<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> sliced <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>\n        slice_audio_v2<span class=\"token punctuation\">(</span>\n            audio<span class=\"token punctuation\">,</span>\n            rate<span class=\"token punctuation\">,</span>\n            min_duration<span class=\"token operator\">=</span>min_duration<span class=\"token punctuation\">,</span>\n            max_duration<span class=\"token operator\">=</span>max_duration<span class=\"token punctuation\">,</span>\n            min_silence_duration<span class=\"token operator\">=</span>min_silence_duration<span class=\"token punctuation\">,</span>\n            top_db<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n            hop_length<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n            max_silence_kept<span class=\"token operator\">=</span>max_silence_kept<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>output_dir <span class=\"token operator\">/</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>file_name_changes<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>idx<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.wav\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sliced<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span><span class=\"token comment\">#输出为对应人声干音的序号_切片在该干音的序号。</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>定义了一个全局变量，作用是对切片里的中文名进行处理，因为模型不允许中文输入。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> PyInstaller<span class=\"token punctuation\">.</span>__main__\n<span class=\"token keyword\">import</span> tkinter <span class=\"token keyword\">as</span> tk\n<span class=\"token keyword\">from</span> tkinter <span class=\"token keyword\">import</span> filedialog\n<span class=\"token keyword\">import</span> subprocess\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_bat_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    root <span class=\"token operator\">=</span> tk<span class=\"token punctuation\">.</span>Tk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    root<span class=\"token punctuation\">.</span>withdraw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    file_path <span class=\"token operator\">=</span> filedialog<span class=\"token punctuation\">.</span>askopenfilename<span class=\"token punctuation\">(</span>filetypes<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> file_path\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_python_script</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import subprocess\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import tkinter as tk\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'# 创建一个关闭cmd进程的函数\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def close_process():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.call(\"taskkill /f /im cmd.exe\", shell=True)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    exit()\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'# 创建GUI窗口\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'root = tk.Tk()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'root.title(\"关闭CMD进程\")\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'# 创建关闭按钮\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'button = tk.Button(root, text=\"关闭CMD进程\", command=close_process)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'button.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'# 使用subprocess调用BAT文件\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'subprocess.call([\"cmd\", \"/c\", \"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>bat_file<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"], shell=True)\\n'</span></span><span class=\"token punctuation\">)</span>\n\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'root.mainloop()\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_bat_to_exe</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    create_python_script<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    output_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    PyInstaller<span class=\"token punctuation\">.</span>__main__<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'--onefile'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># '--noconsole',  # 移除 --noconsole 参数</span>\n        <span class=\"token string\">'--distpath='</span> <span class=\"token operator\">+</span> output_dir<span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f'--name=</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_exe_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'temp_script.py'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件成功转换为EXE文件！\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    bat_file_path <span class=\"token operator\">=</span> select_bat_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> bat_file_path<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        output_exe_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入输出EXE文件的名称：\"</span><span class=\"token punctuation\">)</span>\n        convert_bat_to_exe<span class=\"token punctuation\">(</span>bat_file_path<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请勾选有效的BAT文件。\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>bat转exe方法</p>\n<p>待转bat如下</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">@<span class=\"token function\">echo</span> off\nchcp 65001\n<span class=\"token function\">echo</span> ================================ 稍等片刻，系统正在加载 ================================\n<span class=\"token function\">echo</span> =======================================================================================\n<span class=\"token function\">echo</span> ================================ <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>请勿关闭本窗口<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> ================================\n<span class=\"token function\">echo</span> =======================================================================================\n<span class=\"token function\">echo</span> ================================ <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>正在启动，即将自动跳转<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> ================================\n<span class=\"token punctuation\">.</span>\\env\\python<span class=\"token punctuation\">.</span>exe index<span class=\"token punctuation\">.</span>py\n\npause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>修改实现图形化窗口控制</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> PyInstaller<span class=\"token punctuation\">.</span>__main__\n<span class=\"token keyword\">import</span> tkinter <span class=\"token keyword\">as</span> tk\n<span class=\"token keyword\">from</span> tkinter <span class=\"token keyword\">import</span> filedialog\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> threading  <span class=\"token comment\"># 导入 threading 模块</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_bat_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    root <span class=\"token operator\">=</span> tk<span class=\"token punctuation\">.</span>Tk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    root<span class=\"token punctuation\">.</span>withdraw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    file_path <span class=\"token operator\">=</span> filedialog<span class=\"token punctuation\">.</span>askopenfilename<span class=\"token punctuation\">(</span>filetypes<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> file_path\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_python_script</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import subprocess\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import tkinter as tk\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import threading\\n\\n'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 导入 threading 模块</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def close_process():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.call([\"taskkill\", \"/F\", \"/T\", \"/IM\", \"cmd.exe\"], shell=True)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    exit()\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def run_bat(bat_file):\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    script = \"\"\"start /B cmd /c &#123;&#125;\\nexit\"\"\"\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个批处理脚本</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.Popen(script, shell=True)\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def create_window():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root = tk.Tk()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.title(\"关闭CMD进程\")\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button = tk.Button(root, text=\"关闭CMD进程\", command=close_process)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.mainloop()\\n'</span><span class=\"token punctuation\">)</span>\n\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'bat_file = r\"&#123;&#125;\"\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'threading.Thread(target=run_bat, args=(bat_file,)).start()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'create_window()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_bat_to_exe</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    create_python_script<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    output_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    PyInstaller<span class=\"token punctuation\">.</span>__main__<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'--onefile'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'--noconsole'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 移除 --noconsole 参数</span>\n        <span class=\"token string\">'--distpath='</span> <span class=\"token operator\">+</span> output_dir<span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f'--name=</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_exe_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'temp_script.py'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件成功转换为EXE文件！\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    bat_file_path <span class=\"token operator\">=</span> select_bat_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> bat_file_path<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        output_exe_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入输出EXE文件的名称：\"</span><span class=\"token punctuation\">)</span>\n        convert_bat_to_exe<span class=\"token punctuation\">(</span>bat_file_path<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请勾选有效的BAT文件。\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改实现输出与重启</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> PyInstaller<span class=\"token punctuation\">.</span>__main__\n<span class=\"token keyword\">import</span> tkinter <span class=\"token keyword\">as</span> tk\n<span class=\"token keyword\">from</span> tkinter <span class=\"token keyword\">import</span> filedialog\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> threading\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_bat_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建选择BAT文件的窗口</span>\n    root <span class=\"token operator\">=</span> tk<span class=\"token punctuation\">.</span>Tk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    root<span class=\"token punctuation\">.</span>withdraw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 弹出文件对话框并返回选择的BAT文件路径</span>\n    file_path <span class=\"token operator\">=</span> filedialog<span class=\"token punctuation\">.</span>askopenfilename<span class=\"token punctuation\">(</span>filetypes<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> file_path\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_python_script</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 写入Python脚本内容</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import subprocess\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import tkinter as tk\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import threading\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 关闭进程的函数</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def close_process():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 调用系统命令杀死cmd进程\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.call([\"taskkill\", \"/F\", \"/T\", \"/IM\", \"cmd.exe\"], shell=True)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 修改状态标签显示文本\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    status_label.config(text=\"成功关闭 CMD 进程\")\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 10秒后清空状态标签\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.after(10000, clear_status)\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 重启cmd进程的函数</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def restart_cmd(bat_file):\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 修改状态标签显示文本\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    status_label.config(text=\"正在重启 CMD 进程...\")\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 执行BAT文件\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    run_bat(bat_file)\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 执行BAT文件的函数</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def run_bat(bat_file):\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 构建启动BAT文件的命令\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    script = \"\"\"start /B cmd /c &#123;&#125;\\nexit\"\"\"\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 使用subprocess启动新进程\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.Popen(script, shell=True)\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 创建窗口的函数</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def create_window():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    global root\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    global status_label\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 创建主窗口\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root = tk.Tk()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.title(\"关闭和重启 CMD 进程\")\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 创建状态标签并放置在窗口中</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    status_label = tk.Label(root, text=\"\", pady=10)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    status_label.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建关闭按钮</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button_close = tk.Button(root, text=\"关闭 CMD 进程\", command=close_process)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button_close.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建重启标签并放置在窗口中</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    restart_label = tk.Label(root, text=\"重新启动 CMD 进程\")\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    restart_label.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 创建重启按钮</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button_restart = tk.Button(root, text=\"重启 CMD\", command=lambda: restart_cmd(bat_file))\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button_restart.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 运行窗口程序</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.mainloop()\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置BAT文件路径并启动线程执行BAT文件</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'bat_file = r\"&#123;&#125;\"\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'threading.Thread(target=run_bat, args=(bat_file,)).start()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'create_window()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">clear_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 清空状态标签的文本</span>\n    status_label<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_bat_to_exe</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建Python脚本</span>\n    create_python_script<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 获取输出目录</span>\n    output_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 使用PyInstaller转换为EXE文件</span>\n    PyInstaller<span class=\"token punctuation\">.</span>__main__<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'--onefile'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'--noconsole'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'--distpath='</span> <span class=\"token operator\">+</span> output_dir<span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f'--name=</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_exe_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'temp_script.py'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 删除临时Python脚本文件</span>\n    os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件成功转换为EXE文件！\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 选择BAT文件</span>\n    bat_file_path <span class=\"token operator\">=</span> select_bat_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> bat_file_path<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 输入输出EXE文件的名称</span>\n        output_exe_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入输出EXE文件的名称：\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 转换BAT文件为EXE文件</span>\n        convert_bat_to_exe<span class=\"token punctuation\">(</span>bat_file_path<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请勾选有效的BAT文件。\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","cover_type":"img","excerpt":"","more":"<h4 id=\"部分文件处理代码学习自-羽毛布团大佬\"><a href=\"#部分文件处理代码学习自-羽毛布团大佬\" class=\"headerlink\" title=\"部分文件处理代码学习自 羽毛布团大佬\"></a>部分文件处理代码学习自 羽毛布团大佬</h4><h4 id=\"本文仅记录本人从零开始搭建毕设前后端过程。\"><a href=\"#本文仅记录本人从零开始搭建毕设前后端过程。\" class=\"headerlink\" title=\"本文仅记录本人从零开始搭建毕设前后端过程。\"></a>本文仅记录本人从零开始搭建毕设前后端过程。</h4><h1 id=\"整体打样-使用python-gradio库\"><a href=\"#整体打样-使用python-gradio库\" class=\"headerlink\" title=\"整体打样(使用python gradio库)\"></a>整体打样(使用python gradio库)</h1><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">index <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Blocks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> index<span class=\"token punctuation\">:</span>\n    gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''### 本系统基于sovits框架4.1版本\n                毕业设计：基于sovits项目的AI音乐生成与创作系统\n                '''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Tabs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"训练模块\"><a href=\"#训练模块\" class=\"headerlink\" title=\"训练模块\"></a>训练模块</h1><p>此处使用的库有</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> gradio <span class=\"token keyword\">as</span> gr\n<span class=\"token keyword\">import</span> re<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"数据装载\"><a href=\"#数据装载\" class=\"headerlink\" title=\"数据装载\"></a>数据装载</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"训练\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> train_tab<span class=\"token punctuation\">:</span>   \n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                       ### 模型训练模块\n                        \n                       \"\"\"</span><span class=\"token punctuation\">)</span>\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\"</span><span class=\"token punctuation\">)</span>\n            raw_dirs_list<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"加载原始数据集:\"</span><span class=\"token punctuation\">)</span>\n            get_raw_dirs<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"识别数据集\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                        **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中，</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">get_raw_dirs<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>load_raw_dirs<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>raw_dirs_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[1]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>绑定点击事件，输入为load_raw_dirs，输出给到raw_dirs_list</p>\n<h4 id=\"load-raw-dirs方法\"><a href=\"#load-raw-dirs方法\" class=\"headerlink\" title=\"load_raw_dirs方法\"></a>load_raw_dirs方法</h4><p>预定义全局变量</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">precheck_ok <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nraw_path <span class=\"token operator\">=</span> <span class=\"token string\">\"dataset_raw\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#数据集加载[1]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_raw_dirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> precheck_ok\n    precheck_ok <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    allowed_pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'^[a-zA-Z0-9_@#$%^&amp;()_+\\-=\\s\\.]*$'</span><span class=\"token punctuation\">)</span>\n    illegal_files <span class=\"token operator\">=</span> illegal_dataset <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> root<span class=\"token punctuation\">,</span> dirs<span class=\"token punctuation\">,</span> files <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>raw_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">dir</span> <span class=\"token keyword\">in</span> dirs<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> allowed_pattern<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                illegal_dataset<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> illegal_dataset<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"数据集文件夹名只能包含数字、字母、下划线，以下文件夹名称非法：\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>illegal_dataset<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n        <span class=\"token keyword\">if</span> root <span class=\"token operator\">!=</span> raw_path<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 只处理子文件夹内的文件</span>\n            <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> allowed_pattern<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> illegal_files<span class=\"token punctuation\">:</span>\n                    illegal_files<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.wav'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> illegal_files<span class=\"token punctuation\">:</span>\n                    illegal_files<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> illegal_files<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"数据集文件名只能包含数字、字母、下划线，且必须是.wav格式，以下文件后缀非法：\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>illegal_files<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n    spk_dirs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">for</span> entry <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>scandir<span class=\"token punctuation\">(</span>raw_path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> entry<span class=\"token punctuation\">.</span>is_dir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> spk_dirs<span class=\"token punctuation\">:</span>\n        precheck_ok <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> spk_dirs\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到数据集，请检查dataset_raw文件夹\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用以下代码显示页面（当完成预处理代码时需要添加队列方法）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">index.launch(server_name&#x3D;&quot;127.0.0.1&quot;,inbrowser&#x3D;True,quiet&#x3D;True)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"特征编码器与f0预测器选择\"><a href=\"#特征编码器与f0预测器选择\" class=\"headerlink\" title=\"特征编码器与f0预测器选择\"></a>特征编码器与f0预测器选择</h4><p>预定义全局变量：编码器与f0</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f0_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"crepe\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pm\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dio\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"harvest\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fcpe\"</span><span class=\"token punctuation\">]</span>\nENCODER_PRETRAIN <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"vec256l9\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/checkpoint_best_legacy_500.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/checkpoint_best_legacy_500.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/hubert-soft-0d54a1f4.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/medium.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"cnhubertlarge\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/chinese-hubert-large-fairseq-ckpt.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"dphubert\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/DPHuBERT-sp0.75.pth\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"wavlmbase+\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/WavLM-Base+.pt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"whisper-ppg-large\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrain/large-v2.pt\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\"</span><span class=\"token punctuation\">)</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                branch_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的编码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>encoder_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                f0_predictor_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的f0预测器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>f0_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于编码器是以字典形式存储，故encoder_list获取函数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##编码器获取[2]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_available_encoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 获取当前目录下的预训练模型文件列表</span>\n    current_pretrain <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 为每个预训练模型文件添加路径信息</span>\n    current_pretrain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain/\"</span> <span class=\"token operator\">+</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> model <span class=\"token keyword\">in</span> current_pretrain<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\"># 初始化编码器列表</span>\n    encoder_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\"># 遍历所有编码器-预训练模型路径字典中的项</span>\n    <span class=\"token keyword\">for</span> encoder<span class=\"token punctuation\">,</span> path <span class=\"token keyword\">in</span> ENCODER_PRETRAIN<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果某个编码器对应的预训练模型文件在当前目录下可用</span>\n        <span class=\"token keyword\">if</span> path <span class=\"token keyword\">in</span> current_pretrain<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 将该编码器添加到可用编码器列表中</span>\n            encoder_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> encoder_list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到这里，训练页面应该如图所示</p>\n<p>其中，点击识别数据集，能够在文本框看到raw目录下的数据集文件夹名，下方两个下拉框均可进行选取</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimgimg1710574509749.png\" alt=\"1710574509749\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710574631703.png\" alt=\"1710574631703\"></p>\n<p>加了个这玩意</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710578725862.png\" alt=\"1710578725862\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\"</span><span class=\"token punctuation\">)</span>\nopen_raw<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"打开dataset_raw文件夹\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"secondary\"</span><span class=\"token punctuation\">)</span>\nraw_dirs_list<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"加载原始数据集:\"</span><span class=\"token punctuation\">)</span>\nget_raw_dirs<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"识别数据集\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码改动如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##打开文件夹[4]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">open_dataset_raw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    folder_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dataset_raw'</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'explorer </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>folder_path<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span> \n\n\n<span class=\"token comment\">##绑定事件 在加载数据集一起</span>\n        open_raw<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>open_dataset_raw<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"数据集预处理\"><a href=\"#数据集预处理\" class=\"headerlink\" title=\"数据集预处理\"></a>数据集预处理</h4><p>至此，使用的库更新为</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> gradio <span class=\"token keyword\">as</span> gr\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> shutil\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">dataset_preprocess</span><span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> use_diff<span class=\"token punctuation\">,</span> vol_aug<span class=\"token punctuation\">,</span> skip_loudnorm<span class=\"token punctuation\">,</span> num_processes<span class=\"token punctuation\">,</span>tiny_enable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> precheck_ok<span class=\"token punctuation\">:</span>\n        diff_arg <span class=\"token operator\">=</span> <span class=\"token string\">\"--use_diff\"</span> <span class=\"token keyword\">if</span> use_diff <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span>\n        vol_aug_arg <span class=\"token operator\">=</span> <span class=\"token string\">\"--vol_aug\"</span> <span class=\"token keyword\">if</span> vol_aug <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span>\n        skip_loudnorm_arg <span class=\"token operator\">=</span> <span class=\"token string\">\"--skip_loudnorm\"</span> <span class=\"token keyword\">if</span> skip_loudnorm <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span>\n        tiny_arg <span class=\"token operator\">=</span> <span class=\"token string\">\"--tiny\"</span> <span class=\"token keyword\">if</span> tiny_enable <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span>\n        preprocess_commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">r\".\\env\\python.exe resample.py %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>skip_loudnorm_arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">r\".\\env\\python.exe preprocess_flist_config.py --speech_encoder %s %s %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> vol_aug_arg<span class=\"token punctuation\">,</span> tiny_arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">r\".\\env\\python.exe preprocess_hubert_f0.py --num_processes %s --f0_predictor %s %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>num_processes <span class=\"token punctuation\">,</span>f0_predictor<span class=\"token punctuation\">,</span> diff_arg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n        accumulated_output <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token comment\">##初始化输出参数</span>\n        <span class=\"token comment\">##清空数据集</span>\n        dataset <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token comment\">##获取文件列表</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> <span class=\"token builtin\">dir</span> <span class=\"token keyword\">in</span> dataset<span class=\"token punctuation\">:</span>\n                dataset_spk_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>dataset_spk_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    shutil<span class=\"token punctuation\">.</span>rmtree<span class=\"token punctuation\">(</span>dataset_spk_dir<span class=\"token punctuation\">)</span>\n                    accumulated_output <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"已删除旧数据集文件: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n\"</span></span>\n        <span class=\"token keyword\">for</span> command <span class=\"token keyword\">in</span> preprocess_commands<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>STDOUT<span class=\"token punctuation\">,</span> shell<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                accumulated_output <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Command(当前命令): </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>command<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, Using Encoder(特征编码器): </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>encoder<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, Using f0 Predictor(f0预测器): </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>f0_predictor<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n\"</span></span>\n                <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n                progress_line <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token string\">r\"it/s\"</span> <span class=\"token keyword\">in</span> line <span class=\"token keyword\">or</span> <span class=\"token string\">r\"s/it\"</span> <span class=\"token keyword\">in</span> line<span class=\"token punctuation\">:</span> <span class=\"token comment\">#防止进度条刷屏</span>\n                        progress_line <span class=\"token operator\">=</span> line\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        accumulated_output <span class=\"token operator\">+=</span> line\n                    <span class=\"token keyword\">if</span> progress_line <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">yield</span> accumulated_output <span class=\"token operator\">+</span> progress_line<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n                result<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> subprocess<span class=\"token punctuation\">.</span>CalledProcessError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>output\n                accumulated_output <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Error: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>result<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n\"</span></span>\n                <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">if</span> progress_line <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                accumulated_output <span class=\"token operator\">+=</span> progress_line\n            accumulated_output <span class=\"token operator\">+=</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span>\n            <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n            config_path <span class=\"token operator\">=</span> <span class=\"token string\">\"configs/config.json\"</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>config_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            config <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n        spk_name <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'spk'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> accumulated_output<span class=\"token punctuation\">,</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span>spk_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token string\">\"未识别到数据集，请检查错误信息\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"至此前端排版如下\"><a href=\"#至此前端排版如下\" class=\"headerlink\" title=\"至此前端排版如下\"></a>至此前端排版如下</h4><p>增加了一些彩色字体</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   branch_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的编码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>encoder_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n   f0_predictor_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的f0预测器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>f0_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   use_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   skip_loudnorm <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n   num_processes <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\"</span><span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red;\">右侧选项仅为vec768l12提供支持。&lt;/span>  \n   响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n   TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n         \"\"\"</span><span class=\"token punctuation\">)</span>\n   vol_aug <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"响度嵌入/音量增强\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n   tiny_enable <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"TINY模型 \"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件&lt;/span>  \"\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   raw_preprocess<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"数据预处理\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n   regenerate_config_btn<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"重新生成配置文件\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\"</span><span class=\"token punctuation\">,</span> max_lines<span class=\"token operator\">=</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span><span class=\"token string\">\"预处理与特征处理完成，请检查右侧说话人列表，确认无误后点击写入配置文件\"</span><span class=\"token punctuation\">)</span>\n       speakers<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"说话人列表\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于使用了一个cmd命令行执行的函数，点击事件的绑定以及webui显示修改如下，其中，显示代码需要添加队列方法与对应参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">get_raw_dirs.click(load_raw_dirs,[],[raw_dirs_list])##[1]\nraw_preprocess.click(dataset_preprocess,[branch_selection,f0_predictor_selection, use_diff, vol_aug, skip_loudnorm, num_processes,tiny_enable],[preprocess_output,speakers])\nopen_raw.click(open_dataset_raw,[],[])##[4]      index.queue(concurrency_count&#x3D;1024,max_size&#x3D;2048).launch(server_name&#x3D;&quot;127.0.0.1&quot;,inbrowser&#x3D;True,quiet&#x3D;True)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>此时界面应该如图所示并且能够唤醒cmd界面进行训练</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710599401003.png\" alt=\"1710599401003\"></p>\n<p>增加清空输出模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##清理CMD输出</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">clear_output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"清理完毕\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">clear_preprocess_output<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>clear_output<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>preprocess_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[5]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时整个项目前端模板为</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"训练\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> train_tab<span class=\"token punctuation\">:</span>   \n     gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                ### 模型训练模块\n                 \n                \"\"\"</span><span class=\"token punctuation\">)</span>\n     gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\"</span><span class=\"token punctuation\">)</span>\n     open_raw<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"打开dataset_raw文件夹\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"secondary\"</span><span class=\"token punctuation\">)</span>\n     raw_dirs_list<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"加载原始数据集:\"</span><span class=\"token punctuation\">)</span>\n     get_raw_dirs<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"识别数据集\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n     gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                 **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                    **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                    **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                    **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                        \n        \"\"\"</span><span class=\"token punctuation\">)</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                    **dio**: 框架旧版本默认f0预测器，**性能差**  \n                    **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                    **rmvpe**: 目前最精准的预测器  \n                    **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n        \"\"\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        branch_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的编码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>encoder_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        f0_predictor_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的f0预测器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>f0_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        use_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        skip_loudnorm <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        num_processes <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\"</span><span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red;\">右侧选项仅为vec768l12提供支持。&lt;/span>  \n        响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n        TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n              \"\"\"</span><span class=\"token punctuation\">)</span>\n        vol_aug <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"响度嵌入/音量增强\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        tiny_enable <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"TINY模型 \"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件&lt;/span>  \"\"\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        raw_preprocess<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"数据预处理\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n        regenerate_config_btn<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"重新生成配置文件\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\"</span><span class=\"token punctuation\">,</span> max_lines<span class=\"token operator\">=</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        clear_preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"清空CMD通知\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span><span class=\"token string\">\"预处理与特征处理完成，请检查右侧说话人列表，确认无误后进行下一步配置文件与训练\"</span><span class=\"token punctuation\">)</span>\n            speakers<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"说话人列表\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重新生成配置文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">##重新生成[5]\ndef regenerate_config(encoder, vol_aug, tiny_enable):\n    if precheck_ok is False:\n        return &quot;数据集识别失败，请检查报错信息&quot;\n    vol_aug_arg &#x3D; &quot;--vol_aug&quot; if vol_aug else &quot;&quot;\n    tiny_arg &#x3D; &quot;--tiny&quot; if tiny_enable else &quot;&quot;\n    cmd &#x3D; r&quot;.\\env\\python.exe preprocess_flist_config.py --speech_encoder %s %s %s&quot; % (encoder, vol_aug_arg, tiny_arg)\n    output &#x3D; &quot;&quot;\n    try:\n        result &#x3D; subprocess.Popen(cmd, stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.STDOUT, shell&#x3D;True, text&#x3D;True)\n        for line in result.stdout:\n            output +&#x3D; line\n        output +&#x3D; &quot;Regenerate config file successfully.&quot;\n    except subprocess.CalledProcessError as e:\n        result &#x3D; e.output\n        output +&#x3D; f&quot;Error: &#123;result&#125;\\n&quot;\n    return output\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"训练模块-1\"><a href=\"#训练模块-1\" class=\"headerlink\" title=\"训练模块\"></a>训练模块</h4><p>库需求更新</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> gradio <span class=\"token keyword\">as</span> gr\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> shutil\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> torch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>获取本机GPU信息，有其他GPU的可自行修改GPU名称判断</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\nngpu<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>device_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngpu_infos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">##初始化gpu信息</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span> <span class=\"token keyword\">or</span> ngpu<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    check_gpu <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    check_gpu <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ngpu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gpu_name <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_name<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MX\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RTX\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"GTX\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"A\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"V\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"T\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"P\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"M4\"</span> <span class=\"token keyword\">in</span> gpu_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            check_gpu <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            gpu_infos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"序号：%s\\tGPU型号:%s\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>gpu_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ngpu_info<span class=\"token operator\">=</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>gpu_infos<span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span> check_gpu <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>gpu_infos<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"GPU不可用或不支持，请检查\"</span><span class=\"token comment\">##转换为单列文本，便于后期使用</span>\ngpus<span class=\"token operator\">=</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> gpu_infos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##获取GPU序号信息</span>\n<span class=\"token comment\">##print(gpus,gpu_info)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>去除注释后输出：</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710669011479.png\" alt=\"1710669011479\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 读取用于推断的 CUDA 信息</span>\ncuda <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 用于存储 CUDA 相关信息的字典</span>\nmin_vram <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># VRAM 的最小值初始化为 0</span>\n\n<span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 如果有可用的 CUDA 设备</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>device_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 遍历每个 CUDA 设备</span>\n        current_vram <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_properties<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>total_memory  <span class=\"token comment\"># 获取当前设备的总显存</span>\n        min_vram <span class=\"token operator\">=</span> current_vram <span class=\"token keyword\">if</span> current_vram <span class=\"token operator\">></span> min_vram <span class=\"token keyword\">else</span> min_vram  <span class=\"token comment\"># 更新最小显存值</span>\n        device_name <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_properties<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name  <span class=\"token comment\"># 获取设备名称</span>\n        cuda<span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"CUDA:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>device_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"cuda:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>  <span class=\"token comment\"># 将设备信息添加到 cuda 字典中</span>\n\n<span class=\"token comment\"># 计算总显存并推荐批次大小</span>\ntotal_vram <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_vram <span class=\"token operator\">*</span> <span class=\"token number\">9.31322575e-10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> min_vram <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 计算总显存，并将其转换为 GB</span>\nauto_batch <span class=\"token operator\">=</span> total_vram <span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token keyword\">if</span> total_vram <span class=\"token operator\">&lt;=</span> <span class=\"token number\">12</span> <span class=\"token keyword\">and</span> total_vram <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> total_vram  <span class=\"token comment\"># 推荐的批次大小</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"当前显存：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>total_vram<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> GiB，推荐批次大小：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>auto_batch<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当前输出</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710669593061.png\" alt=\"1710669593061\"></p>\n<p>检查BF16（30系及以上可用，动态浮点计算加速）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##检查bf16是否可用</span>\namp_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"fp32\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fp16\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">if</span> check_gpu<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_bf16_supported<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        amp_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"fp32\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fp16\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bf16\"</span><span class=\"token punctuation\">]</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>检查编码器信息</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##查找本地编码器</span>\nvocoder_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token builtin\">dir</span> <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"model\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"pretrain\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"config.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            vocoder_options<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>配置文件保存模块开发</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> gradio <span class=\"token keyword\">as</span> gr\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> shutil\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> yaml\n\nsovits_params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\ndiff_params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nprecheck_ok <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nraw_path <span class=\"token operator\">=</span> <span class=\"token string\">\"dataset_raw\"</span>\ndataset_dir <span class=\"token operator\">=</span> <span class=\"token string\">\"dataset/44k\"</span>\ndefault_settings_file <span class=\"token operator\">=</span> <span class=\"token string\">\"defset.yaml\"</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cfg</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        初始化配置对象。\n\n        Args:\n            path (str): 配置文件的路径。\n            type (str): 配置文件的类型 (\"json\" 或 \"yaml\")。\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">type</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        从文件中读取配置数据。\n\n        Returns:\n            dict: 将配置文件的内容作为字典返回。\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> yaml<span class=\"token punctuation\">.</span>safe_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        将提供的内容保存到配置文件中。\n\n        Args:\n            content (dict): 要保存到文件中的内容。\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                yaml<span class=\"token punctuation\">.</span>safe_dump<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> default_flow_style<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save_default_settings</span><span class=\"token punctuation\">(</span>log_interval<span class=\"token punctuation\">,</span>eval_interval<span class=\"token punctuation\">,</span>keep_ckpts<span class=\"token punctuation\">,</span>batch_size<span class=\"token punctuation\">,</span>learning_rate<span class=\"token punctuation\">,</span>amp_dtype<span class=\"token punctuation\">,</span>all_in_mem<span class=\"token punctuation\">,</span>num_workers<span class=\"token punctuation\">,</span>cache_all_data<span class=\"token punctuation\">,</span>cache_device<span class=\"token punctuation\">,</span>diff_amp_dtype<span class=\"token punctuation\">,</span>diff_batch_size<span class=\"token punctuation\">,</span>diff_lr<span class=\"token punctuation\">,</span>diff_interval_log<span class=\"token punctuation\">,</span>diff_interval_val<span class=\"token punctuation\">,</span>diff_force_save<span class=\"token punctuation\">,</span>diff_k_step_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    config_file <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>default_settings_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">)</span>\n    default_settings <span class=\"token operator\">=</span> config_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'log_interval'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>log_interval<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'eval_interval'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>eval_interval<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'keep_ckpts'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>keep_ckpts<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>learning_rate<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>amp_dtype<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'all_in_mem'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> all_in_mem\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'num_workers'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num_workers<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cache_all_data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cache_all_data\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cache_device'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cache_device<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>diff_amp_dtype<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_batch_size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_batch_size<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_lr'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>diff_lr<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_interval_log'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_interval_log<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_interval_val'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_interval_val<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_force_save'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_force_save<span class=\"token punctuation\">)</span>\n    default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'diff_k_step_max'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diff_k_step_max\n    config_file<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>default_settings<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"成功保存默认配置\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_default_settings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> sovits_params<span class=\"token punctuation\">,</span> diff_params\n    config_file <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>default_settings_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">)</span>\n    default_settings <span class=\"token operator\">=</span> config_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sovits_params <span class=\"token operator\">=</span> default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'sovits_params'</span><span class=\"token punctuation\">]</span>\n    diff_params <span class=\"token operator\">=</span> default_settings<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_params'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> sovits_params<span class=\"token punctuation\">,</span> diff_params\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>get_default_settings<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在根目录新建应该defset.yaml，粘贴以下内容</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sovits_params</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">log_interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>\n  <span class=\"token key atrule\">eval_interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">800</span>\n  <span class=\"token key atrule\">keep_ckpts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">batch_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">learning_rate</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.0001</span>\n  <span class=\"token key atrule\">amp_dtype</span><span class=\"token punctuation\">:</span> fp32\n  <span class=\"token key atrule\">all_in_mem</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">diff_params</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">num_workers</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">cache_all_data</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">cache_device</span><span class=\"token punctuation\">:</span> cuda\n  <span class=\"token key atrule\">amp_dtype</span><span class=\"token punctuation\">:</span> fp32\n  <span class=\"token key atrule\">diff_batch_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">24</span>\n  <span class=\"token key atrule\">diff_lr</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.0002</span>\n  <span class=\"token key atrule\">diff_interval_log</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token key atrule\">diff_interval_val</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span>\n  <span class=\"token key atrule\">diff_force_save</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span>\n  <span class=\"token key atrule\">diff_k_step_max</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出为<img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710747254487.png\" alt=\"1710747254487\"></p>\n<p>此时，包含参数如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import os\nimport gradio as gr\nimport re\nimport shutil\nimport subprocess\nimport json\nimport torch\nimport yaml\n\n\n##一些参数\ndefault_settings_file &#x3D; &quot;defset.yaml&quot;\nworkdir &#x3D; &quot;logs&#x2F;44k&quot;\ndiff_workdir &#x3D; &quot;logs&#x2F;44k&#x2F;diffusion&quot;\nconfig_dir &#x3D; &quot;configs&#x2F;&quot;\nsovits_params &#x3D; &#123;&#125;\ndiff_params &#x3D; &#123;&#125;\nprecheck_ok &#x3D; False\nraw_path &#x3D; &quot;dataset_raw&quot;\ndataset_dir &#x3D; &quot;dataset&#x2F;44k&quot;\nf0_options &#x3D; [&quot;crepe&quot;,&quot;pm&quot;,&quot;dio&quot;,&quot;harvest&quot;,&quot;rmvpe&quot;,&quot;fcpe&quot;]\nENCODER_PRETRAIN &#x3D; &#123;\n    &quot;vec256l9&quot;: &quot;pretrain&#x2F;checkpoint_best_legacy_500.pt&quot;,\n    &quot;vec768l12&quot;: &quot;pretrain&#x2F;checkpoint_best_legacy_500.pt&quot;,\n    &quot;hubertsoft&quot;: &quot;pretrain&#x2F;hubert-soft-0d54a1f4.pt&quot;,\n    &quot;whisper-ppg&quot;: &quot;pretrain&#x2F;medium.pt&quot;,\n    &quot;cnhubertlarge&quot;: &quot;pretrain&#x2F;chinese-hubert-large-fairseq-ckpt.pt&quot;,\n    &quot;dphubert&quot;: &quot;pretrain&#x2F;DPHuBERT-sp0.75.pth&quot;,\n    &quot;wavlmbase+&quot;: &quot;pretrain&#x2F;WavLM-Base+.pt&quot;,\n    &quot;whisper-ppg-large&quot;: &quot;pretrain&#x2F;large-v2.pt&quot;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置文件相关代码注释掉print之后放入函数部分</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##函数后添加</span>\nsovits_params<span class=\"token punctuation\">,</span> diff_params <span class=\"token operator\">=</span> get_default_settings<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##调用信息</span>\nckpt_read_dir <span class=\"token operator\">=</span> workdir\nconfig_read_dir <span class=\"token operator\">=</span> config_dir\ndiff_read_dir <span class=\"token operator\">=</span> diff_workdir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，完成到了模型默认配置的准备</p>\n<p>前端代码如下‘</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">index <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Blocks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> index<span class=\"token punctuation\">:</span>\n    gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''### 本系统基于sovits框架4.1版本\n                毕业设计：基于sovits项目的AI音乐生成与创作系统\n                '''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Tabs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">'音频切片预处理工具'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> preprocessing_tab<span class=\"token punctuation\">:</span>\n             gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                        ### 预处理模块\n                    \n                        \"\"\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"训练\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> train_tab<span class=\"token punctuation\">:</span>   \n             gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                        ### 模型训练模块\n                         \n                        \"\"\"</span><span class=\"token punctuation\">)</span>\n             gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"请将数据集文件夹放置在dataset_raw文件夹下，确认放置正确后点击下方获取数据集名称\"\"\"</span><span class=\"token punctuation\">)</span>\n             open_raw<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"打开dataset_raw文件夹\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"secondary\"</span><span class=\"token punctuation\">)</span>\n             raw_dirs_list<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"加载原始数据集:\"</span><span class=\"token punctuation\">)</span>\n             get_raw_dirs<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"识别数据集\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n             gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"识别数据集后请选择训练使用的特征编码器和f0预测器  \n                         **如果要训练扩散模型，请选择Vec768l12，hubertsoft或whisper-ppg其中之一，并确保So-VITS和扩散模型使用同一个编码器**\"\"\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**vec256l9**: 256维度，初代编码器，**性能差**  \n                            **vec768l12**: 12层Transformer，理论上最还原训练集音色  \n                            **hubertsoft**:咬字相对准确，存在多说话人音色泄露问题  \n                            **whisper-ppg**: OpenAI，咬字最准确，但也存在音色泄露，对GPU要求高。\n                                \n                \"\"\"</span><span class=\"token punctuation\">)</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"**crepe**: 抗噪能力强，预处理慢   \n                            **dio**: 框架旧版本默认f0预测器，**性能差**  \n                            **harvest**: 抗噪能力一般，预处理显存占用低，速度慢  \n                            **rmvpe**: 目前最精准的预测器  \n                            **fcpe**: 框架项目组自研F0预测器，有最快的速度和不输crepe的精度\n                \"\"\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                branch_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的编码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>encoder_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                f0_predictor_selection <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择训练使用的f0预测器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>f0_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                use_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预训练浅扩散模型：生成浅扩散特征，默认开启，若不训练可关闭节省硬盘空间\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                skip_loudnorm <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"跳过响度匹配，默认关，若已对数据集进行过音量处理则勾选\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n                num_processes <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"cpu多线程加速,默认1，显存每6-8G可以选择+1提升预处理速度\"</span><span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red;\">右侧选项仅为vec768l12提供支持。&lt;/span>  \n                响度嵌入/音量增强：自动处理响度，默认关，推荐高质量数据集开启  \n                TINY模型：使用小模型,牺牲模型质量换取性能，默认关。**需要打开响度嵌入**\n                      \"\"\"</span><span class=\"token punctuation\">)</span>\n                vol_aug <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"响度嵌入/音量增强\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n                tiny_enable <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"TINY模型 \"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"&lt;span style=\"color:red; display: block; text-align: center;\">数据预处理会删除已处理好的数据集，如仅缺失配置文件，可选重新加载配置文件&lt;span style=\"color:red;\">  \"\"\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                raw_preprocess<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"数据预处理\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                regenerate_config_btn<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"重新生成配置文件\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"预处理输出信息，完成后请检查一下是否有报错信息，如无则可以进行下一步\"</span><span class=\"token punctuation\">,</span> max_lines<span class=\"token operator\">=</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                clear_preprocess_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"清空CMD通知\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span><span class=\"token string\">\"预处理与特征处理完成后，请检查右侧说话人列表，确认无误后进行下一步准备配置文件\"</span><span class=\"token punctuation\">)</span>\n                    speakers<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"说话人列表\"</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Accordion<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"主模型超参数列表 点击打开 否则按照默认参数训练\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">open</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"显卡信息\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>gpu_info<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    chose_gpu <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"显卡选择，默认0号，多卡用户西文逗号分隔，如0,1,2...\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span>gpus<span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    log_interval <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"日志间隔 即多久输出一次损失日志\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'log_interval'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                    eval_interval <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"评估间隔 即多久保存一次模型\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'eval_interval'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                    keep_ckpts <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"保存模型数量 即仅保留最新的N个模型 旧模型会删除，若需要保存过程中的每个模型则设置为0 \"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    batch_size<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"batch_size，6G建议1-2，每多2G可尝试+1\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>auto_batch<span class=\"token punctuation\">)</span>\n                    lr <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"学习率 默认0.0001 若数据集过大或过小可微调，微调范围+-0.0001内\"</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                    amp_dtype <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"浮点类型，默认f32即可，显卡型号较新也可尝试f16\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>amp_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    all_in_mem<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"内存加速，建议打开，数据集将全部加载到内存，避免硬盘io低下影响训练\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>sovits_params<span class=\"token punctuation\">[</span><span class=\"token string\">'all_in_mem'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Accordion<span class=\"token punctuation\">(</span>label <span class=\"token operator\">=</span> <span class=\"token string\">\"扩散模型配置文件 点击打开 否则同样默认参数\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    diff_num_workers <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"num_workers, 设置为0将作为主进程与cpu交互，但是容易出现死锁，仅建议高性能用户改动\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'num_workers'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_k_step_max <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"100步深度的浅扩散。加快训练速度并提高模型质量，但无法执行超过100步的浅扩散推理\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_k_step_max'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_cache_all_data <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"数据缓存，启用后加快训练速度，关闭后节省显存或内存，减慢训练速度\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'cache_all_data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_cache_device <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"缓存硬件：需开启数据缓存，建议使用cuda/gpu显存加速\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'cache_device'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_amp_dtype <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"浮点类型，默认f32，较新的显卡可选f16提速\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"fp32\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fp16\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    diff_batch_size <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"batch_size，数值尽量不超过数据集1/4，6G建议24左右，显存越大可适当增大\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_batch_size'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_lr <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"学习率 建议仅+-0.0001范围内微调\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_lr'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_interval_log <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"日志间隔\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_interval_log'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_interval_val <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"验证间隔  不建议过低 建议1000+\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_interval_val'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    diff_force_save <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"强制保留模型，该步数倍数保存的模型会被保留，其余会被删除。设置为与验证步数相同的值则每个模型都会被保留\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>diff_params<span class=\"token punctuation\">[</span><span class=\"token string\">'diff_force_save'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                save_params<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"保存为默认设置\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                write_config<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"写入配置文件\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n             write_config_output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"输出信息\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">'推理'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> inference_tab<span class=\"token punctuation\">:</span>\n              gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                        ### 音频推理模块\n                         \n                        \"\"\"</span><span class=\"token punctuation\">)</span>\n        get_raw_dirs<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>load_raw_dirs<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>raw_dirs_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[1]</span>\n        raw_preprocess<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>dataset_preprocess<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>branch_selection<span class=\"token punctuation\">,</span>f0_predictor_selection<span class=\"token punctuation\">,</span> use_diff<span class=\"token punctuation\">,</span> vol_aug<span class=\"token punctuation\">,</span> skip_loudnorm<span class=\"token punctuation\">,</span> num_processes<span class=\"token punctuation\">,</span>tiny_enable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>preprocess_output<span class=\"token punctuation\">,</span>speakers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        open_raw<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>open_dataset_raw<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[4]</span>\n        clear_preprocess_output<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>clear_output<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>preprocess_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##[4.1]</span>\n        regenerate_config_btn<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>regenerate_config<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>branch_selection<span class=\"token punctuation\">,</span> vol_aug<span class=\"token punctuation\">,</span> tiny_enable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>preprocess_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        save_params<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>save_default_settings<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>log_interval<span class=\"token punctuation\">,</span>eval_interval<span class=\"token punctuation\">,</span>keep_ckpts<span class=\"token punctuation\">,</span>batch_size<span class=\"token punctuation\">,</span>lr<span class=\"token punctuation\">,</span>amp_dtype<span class=\"token punctuation\">,</span>all_in_mem<span class=\"token punctuation\">,</span>diff_num_workers<span class=\"token punctuation\">,</span>diff_cache_all_data<span class=\"token punctuation\">,</span>diff_cache_device<span class=\"token punctuation\">,</span>diff_amp_dtype<span class=\"token punctuation\">,</span>diff_batch_size<span class=\"token punctuation\">,</span>diff_lr<span class=\"token punctuation\">,</span>diff_interval_log<span class=\"token punctuation\">,</span>diff_interval_val<span class=\"token punctuation\">,</span>diff_force_save<span class=\"token punctuation\">,</span>diff_k_step_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>write_config_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710750595175.png\" alt=\"1710750595175\"></p>\n<p>接下来添加配置写入函数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">config_fn</span><span class=\"token punctuation\">(</span>log_interval<span class=\"token punctuation\">,</span> eval_interval<span class=\"token punctuation\">,</span> keep_ckpts<span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> amp_dtype<span class=\"token punctuation\">,</span> all_in_mem<span class=\"token punctuation\">,</span> diff_num_workers<span class=\"token punctuation\">,</span> diff_cache_all_data<span class=\"token punctuation\">,</span> diff_batch_size<span class=\"token punctuation\">,</span> diff_lr<span class=\"token punctuation\">,</span> diff_interval_log<span class=\"token punctuation\">,</span> diff_interval_val<span class=\"token punctuation\">,</span> diff_cache_device<span class=\"token punctuation\">,</span> diff_amp_dtype<span class=\"token punctuation\">,</span> diff_force_save<span class=\"token punctuation\">,</span> diff_k_step_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> amp_dtype <span class=\"token operator\">==</span> <span class=\"token string\">\"fp16\"</span> <span class=\"token keyword\">or</span> amp_dtype <span class=\"token operator\">==</span> <span class=\"token string\">\"bf16\"</span><span class=\"token punctuation\">:</span>\n        fp16_run <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        fp16_run <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        amp_dtype <span class=\"token operator\">=</span> <span class=\"token string\">\"fp16\"</span>\n    config_origin <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span><span class=\"token string\">\"configs/config.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span>\n    diff_config <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span><span class=\"token string\">\"configs/diffusion.yaml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">)</span>\n    config_data <span class=\"token operator\">=</span> config_origin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'log_interval'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>log_interval<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'eval_interval'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>eval_interval<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'keep_ckpts'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>keep_ckpts<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'fp16_run'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fp16_run\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'half_type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>amp_dtype<span class=\"token punctuation\">)</span>\n    config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'all_in_mem'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> all_in_mem\n    config_origin<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>config_data<span class=\"token punctuation\">)</span>\n    diff_config_data <span class=\"token operator\">=</span> diff_config<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'num_workers'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_num_workers<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cache_all_data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diff_cache_all_data\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_batch_size<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'lr'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>diff_lr<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'interval_log'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_interval_log<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'interval_val'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_interval_val<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cache_device'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>diff_cache_device<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'amp_dtype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>diff_amp_dtype<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'interval_force_save'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff_force_save<span class=\"token punctuation\">)</span>\n    diff_config_data<span class=\"token punctuation\">[</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'k_step_max'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token keyword\">if</span> diff_k_step_max <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n    diff_config<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>diff_config_data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"配置文件写入完成\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在按键绑定中添加</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">write_config<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>config_fn<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>log_interval<span class=\"token punctuation\">,</span> eval_interval<span class=\"token punctuation\">,</span> keep_ckpts<span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> amp_dtype<span class=\"token punctuation\">,</span> all_in_mem<span class=\"token punctuation\">,</span> diff_num_workers<span class=\"token punctuation\">,</span> diff_cache_all_data<span class=\"token punctuation\">,</span> diff_batch_size<span class=\"token punctuation\">,</span> diff_lr<span class=\"token punctuation\">,</span> diff_interval_log<span class=\"token punctuation\">,</span> diff_interval_val<span class=\"token punctuation\">,</span> diff_cache_device<span class=\"token punctuation\">,</span> diff_amp_dtype<span class=\"token punctuation\">,</span> diff_force_save<span class=\"token punctuation\">,</span> diff_k_step_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>write_config_output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"启动训练相关\"><a href=\"#启动训练相关\" class=\"headerlink\" title=\"启动训练相关\"></a>启动训练相关</h4><p>首先是检查数据集是否可用：</p>\n<p>由于已知数据集处理后包含npy和pt的编码与f0权重，设置一个函数来检查数据集。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">check_dataset</span><span class=\"token punctuation\">(</span>dataset_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"该路径下未检测到数据集\"</span><span class=\"token comment\">##检测数据集目录是否存在</span>\n    unavailable_dataset <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">for</span> root<span class=\"token punctuation\">,</span> dirs<span class=\"token punctuation\">,</span> files <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>dataset_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.pt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.npy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\">##return \"已检查到到数据集\"</span>\n                unavailable_dataset <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">if</span> unavailable_dataset<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"该目录下未存在一个有效的数据集权重，请检查文件目录是否有pt或者npy的模型文件\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来是启动训练的函数：分为从0开始和继续训练，由于模型的特殊性，从0 开始需要准备对应的预训练模型（称之为底模），方便模型进行特征学习，不然自己训练底模只能达到五分之一左右的效果。</p>\n<p>底模从社区获取，模型路径如下图</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710989114237.png\" alt=\"1710989114237\"></p>\n<p>添加备份文件夹 新建</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1710993075567.png\" alt=\"1710993075567\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">backup_path <span class=\"token operator\">=</span> <span class=\"token string\">'backup_model'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>路径如上<br>训练函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">training</span><span class=\"token punctuation\">(</span>gpu_selection<span class=\"token punctuation\">,</span>encoder<span class=\"token punctuation\">,</span>tiny_enable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> tiny_enable<span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    config_data_cfg <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span><span class=\"token string\">\"configs/config.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span>\n    config_data <span class=\"token operator\">=</span> config_data_cfg<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">##调用配置文件信息</span>\n    vol_emb <span class=\"token operator\">=</span> config_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"vol_embedding\"</span><span class=\"token punctuation\">]</span>\n    warn <span class=\"token operator\">=</span> check_dataset<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> warn <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> warn\n    pretain_path <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string\">\"vec256l9\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/768l12/vol_emb\"</span> <span class=\"token keyword\">if</span> vol_emb <span class=\"token keyword\">else</span> <span class=\"token string\">\"pretrained_model/768l12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"vec768l12_tiny\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/tiny/vec768l12_vol_emb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/hubertsoft\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/whisper-ppg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"cnhubertlarge\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/cnhubertlarge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"dphubert\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/dphubert\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"wavlmbase+\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/wavlmbase+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"whisper-ppg-large\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pretrained_model/whisper-ppg-large\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> encoder <span class=\"token keyword\">in</span> pretain_path<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到对应编码器底模，请检查编码器是否存在\"</span>\n    D_file<span class=\"token punctuation\">,</span>G_file<span class=\"token punctuation\">,</span>encoder_path <span class=\"token operator\">=</span> pretain_path<span class=\"token punctuation\">[</span>encoder<span class=\"token punctuation\">]</span>\n    D_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>encoder_path<span class=\"token punctuation\">,</span>D_file<span class=\"token punctuation\">)</span>\n    G_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>encoder_path<span class=\"token punctuation\">,</span>G_file<span class=\"token punctuation\">)</span>\n    time_stamp <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y_%m_%d_%H_%M'</span><span class=\"token punctuation\">)</span>\n    backup_folder <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>backup_path<span class=\"token punctuation\">,</span>time_stamp<span class=\"token punctuation\">)</span>\n    output_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"备份已完成，旧模型被保存在%s\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>backup_folder<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'diffusion'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>new_backup_folder<span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"diffusion\"</span><span class=\"token punctuation\">:</span>\n                shutil<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>new_backup_folder<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>G_path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>D_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        shutil<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>D_path<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"D_0.pth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        shutil<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>G_path<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        output_msg <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"成功装载预训练模型，编码器：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>encoder<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n\"</span></span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        output_msg <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>encoder<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">的预训练模型不存在，未装载预训练模型\\n\"</span></span>\n\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">r\"set CUDA_VISIBLE_DEVICES=%s &amp;&amp; .\\env\\python.exe train.py -c configs/config.json -m 44k\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>gpu_selection<span class=\"token punctuation\">)</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    output_msg <span class=\"token operator\">+=</span> <span class=\"token string\">\"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C\"</span>\n    <span class=\"token keyword\">return</span> output_msg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续训练函数（多段输出使用output_msg进行自增，单端输出直接return）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">continue_training</span><span class=\"token punctuation\">(</span>gpu_selection<span class=\"token punctuation\">,</span>encoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    warn <span class=\"token operator\">=</span> check_dataset<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> warn <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> warn\n    <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>workdir<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 从工作目录下的所有文件中筛选文件名以'G_'开头且以'.pth'结尾的文件</span>\n    files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>f <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'G_'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> f<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.pth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到已训练模型，无法继续训练，请检查文件目录或者使用重新开始训练。\"</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">r\"set CUDA_VISIBLE_DEVICES=%s &amp;&amp; .\\env\\python.exe train.py -c configs/config.json -m 44k\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>gpu_selection<span class=\"token punctuation\">)</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span>cmd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C\"</span>\n\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>要导入：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> datetime\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时前端代码添加：</p>\n<pre class=\"line-numbers language-PYTHON\" data-language=\"PYTHON\"><code class=\"language-PYTHON\">with gr.Row():\n   save_params&#x3D;gr.Button(&quot;保存为默认设置&quot;, variant&#x3D;&quot;primary&quot;)\n   write_config&#x3D;gr.Button(&quot;写入配置文件&quot;, variant&#x3D;&quot;primary&quot;)\nwrite_config_output&#x3D;gr.Textbox(label&#x3D;&quot;输出信息&quot;)\nwith gr.Row():\n   with gr.Column():\n       start_train &#x3D; gr.Button(&quot;开始训练&quot;,variant&#x3D;&#39;primary&#39;)\n       train_out &#x3D; gr.Textbox(label&#x3D;&quot;训练信息&quot;)\n   with gr.Column():\n       continue_train &#x3D; gr.Button(&quot;继续训练&quot;,variant&#x3D;&quot;primary&quot;)\n       continue_train_out &#x3D; gr.Textbox(label&#x3D;&quot;训练信息&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>按键绑定</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">start_train<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>chose_gpu<span class=\"token punctuation\">,</span> branch_selection<span class=\"token punctuation\">,</span> tiny_enable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>train_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncontinue_train<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>continue_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>chose_gpu<span class=\"token punctuation\">,</span> branch_selection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>continue_train_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>缝缝补补，改完之后应该可以实现如下效果：</p>\n<p>点击开始训练，弹出cmd并且提示loaded checkpoints G0（说明正确加载了预训练模型）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711362464630.png\" alt=\"1711362464630\"></p>\n<p>使用ctrl+c键盘中断，接下来检查继续训练</p>\n<p>首先来到logs&#x2F;44k路径下。删除除了diffusion目录的所有文件（也可以直接覆盖，复制备份文件夹内文件直接粘贴）</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711363139340.png\" alt=\"1711363139340\"></p>\n<p>之后将之前备份的模型文件复制过来（只需要G,D各一个再加上配置文件即可，日志文件复制可选，因为可以承接之前的训练输出）<br>之后直接点击继续训练即可</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711365203345.png\" alt=\"1711365203345\"></p>\n<p>完成其他几个模型的函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">kmeans_training</span><span class=\"token punctuation\">(</span>kmeans_gpu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"数据集不存在，请检查dataset文件夹\"</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">r\".\\env\\python.exe cluster/train_cluster.py --gpu\"</span> <span class=\"token keyword\">if</span> kmeans_gpu <span class=\"token keyword\">else</span> <span class=\"token string\">r\".\\env\\python.exe cluster/train_cluster.py\"</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"训练已开始，cpu需要5-10min，无终端输出\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">index_training</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"数据集不存在，请检查dataset文件夹\"</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">r\".\\env\\python.exe train_index.py -c configs/config.json\"</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"训练已开始\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">diff_training</span><span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> k_step_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"数据集不存在，请检查dataset文件夹\"</span>\n    timestamp <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y_%m_%d_%H_%M'</span><span class=\"token punctuation\">)</span>\n    new_backup_folder <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>backup_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"diffusion\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>new_backup_folder<span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            shutil<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>new_backup_folder<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    DIFF_PRETRAIN <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"768-kstepmax100\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrained_model/diffusion/768l12/max100/model_0.pt\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrained_model/diffusion/768l12/model_0.pt\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrained_model/diffusion/hubertsoft/model_0.pt\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pretrained_model/diffusion/whisper-ppg/model_0.pt\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> DIFF_PRETRAIN<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"该编码器不支持训练扩散模型\"</span>\n    <span class=\"token keyword\">if</span> k_step_max<span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token string\">\"768-kstepmax100\"</span>\n    diff_pretrained_model <span class=\"token operator\">=</span> DIFF_PRETRAIN<span class=\"token punctuation\">[</span>encoder<span class=\"token punctuation\">]</span>\n    shutil<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>diff_pretrained_model<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"model_0.pt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\".\\env\\python.exe train_diff.py -c configs/diffusion.yaml\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    output_message <span class=\"token operator\">=</span> <span class=\"token string\">\"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C。\"</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"768-kstepmax100\"</span><span class=\"token punctuation\">:</span>\n        output_message <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n正在进行100步深度的浅扩散训练，已加载底模\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        output_message <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\\n正在进行完整深度的扩散训练，编码器</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>encoder<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token keyword\">return</span> output_message\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">diff_continue_training</span><span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dataset_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"数据集不存在，请检查dataset文件夹\"</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未选择预处理对应的编码器\"</span>\n    all_files <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>diff_workdir<span class=\"token punctuation\">)</span>\n    model_files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>f <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> all_files <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.pt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>model_files<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到已训练模型，无法继续训练，请检查文件目录或者使用重新开始训练。\"</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\".\\env\\python.exe train_diff.py -c configs/diffusion.yaml\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"训练已开始，如果需要中断训练，请在CMD内按下ctrl+C。\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">           <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Accordion<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"扩散模型\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">open</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                      start_train_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"开始训练\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">'primary'</span><span class=\"token punctuation\">)</span>\n                      train_diff_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"训练信息\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                      continue_train_diff <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"继续训练\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                      continue_train_diff_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"训练信息\"</span><span class=\"token punctuation\">)</span>\n                      \n                      \n\nstart_train_diff<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>diff_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>branch_selection<span class=\"token punctuation\">,</span> diff_k_step_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>train_diff_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      continue_train_diff<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>diff_continue_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>branch_selection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>continue_train_diff_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>前端代码与按键绑定如上</p>\n<p>此时，浅扩散训练按钮效果如下<img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711420592406.png\" alt=\"1711420592406\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1711420657241.png\" alt=\"1711420657241\"></p>\n<p>特征模型和聚类模型绑定如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train_index<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>index_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>train_index_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntrain_kmeans<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>kmeans_training<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>chose_gpu<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>train_kmeans_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#前端如下：</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                train_index <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"开始训练特征检索模型\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">'primary'</span><span class=\"token punctuation\">)</span>\n                train_index_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"训练信息\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                                       \n                train_kmeans <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"开始训练kmeans聚类模型\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                train_kmeans_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"训练信息\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>tensorboard如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">             <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                tensorboard_bth <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"打开tensorboard\"</span><span class=\"token punctuation\">,</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                tensorboard_out <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#按钮绑定</span>\n        tensorboard_bth<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>tensorboard_open<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>tensorboard_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#函数设计</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tensorboard_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\".\\env\\python.exe -m tensorboard.main --logdir=logs\\44k\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"已打开tensorboard，请复制ip地址浏览器使用\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，训练模块制作完成，开始制作推理模块</p>\n<h3 id=\"推理模块\"><a href=\"#推理模块\" class=\"headerlink\" title=\"推理模块\"></a>推理模块</h3><p>添加定义</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">model <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\ndebug <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\nMODEL_TYPE <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">768</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"vec256l9\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"cnhubertlarge\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"dphubert\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">768</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"wavlmbase+\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">768</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"whisper-ppg-large\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1280</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加导入包</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> edgetts<span class=\"token punctuation\">.</span>tts_voices <span class=\"token keyword\">import</span> SUPPORTED_LANGUAGES\n<span class=\"token keyword\">from</span> inference<span class=\"token punctuation\">.</span>infer_tool <span class=\"token keyword\">import</span> Svc\n<span class=\"token keyword\">import</span> soundfile <span class=\"token keyword\">as</span> sf\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> librosa\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>相关函数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_file_options</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">,</span> extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">file</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span>extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">option_loader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ckpt_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">file</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> get_file_options<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".pth\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"D_\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">file</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"G_0.pth\"</span><span class=\"token punctuation\">]</span>\n    config_list <span class=\"token operator\">=</span> get_file_options<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".json\"</span><span class=\"token punctuation\">)</span>\n    cluster_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"请选择特征/聚类模型\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> get_file_options<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".pt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> get_file_options<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".pkl\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 聚类和特征检索模型</span>\n    diff_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"请选择扩散模型\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> get_file_options<span class=\"token punctuation\">(</span>diff_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".pt\"</span><span class=\"token punctuation\">)</span>\n    diff_config_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"请选择扩散模型配置\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> get_file_options<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\".yaml\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ckpt_list<span class=\"token punctuation\">,</span> config_list<span class=\"token punctuation\">,</span> cluster_list<span class=\"token punctuation\">,</span> diff_list<span class=\"token punctuation\">,</span> diff_config_list\n\n<span class=\"token comment\"># read ckpt list读取模型清单</span>\nckpt_list<span class=\"token punctuation\">,</span> config_list<span class=\"token punctuation\">,</span> cluster_list<span class=\"token punctuation\">,</span> diff_list<span class=\"token punctuation\">,</span> diff_config_list <span class=\"token operator\">=</span> option_loader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_model_func</span><span class=\"token punctuation\">(</span>ckpt_name<span class=\"token punctuation\">,</span> cluster_name<span class=\"token punctuation\">,</span> config_name<span class=\"token punctuation\">,</span> enhance<span class=\"token punctuation\">,</span> diff_model_name<span class=\"token punctuation\">,</span> diff_config_name<span class=\"token punctuation\">,</span> only_diffusion<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> using_device<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> speedup<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> vocoder_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> model\n    \n    <span class=\"token comment\"># 构建配置文件和模型路径</span>\n    config_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> config_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion <span class=\"token keyword\">else</span> <span class=\"token string\">\"configs/config.json\"</span>\n    diff_config_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> diff_config_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> diff_config_name <span class=\"token operator\">!=</span> <span class=\"token string\">\"未选择扩散模型配置文件\"</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"configs/diffusion.yaml\"</span>\n    ckpt_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> ckpt_name<span class=\"token punctuation\">)</span>\n    cluster_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> cluster_name<span class=\"token punctuation\">)</span>\n    diff_model_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>diff_read_dir<span class=\"token punctuation\">,</span> diff_model_name<span class=\"token punctuation\">)</span>\n    \n    k_step_max <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\n    \n    <span class=\"token comment\"># 根据是否只加载扩散模型，读取相应的配置文件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion<span class=\"token punctuation\">:</span>\n        config <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>config_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 如果存在扩散模型，检查维度是否匹配</span>\n    <span class=\"token keyword\">if</span> diff_model_name <span class=\"token operator\">!=</span> <span class=\"token string\">\"未选择扩散模型\"</span><span class=\"token punctuation\">:</span>\n        _diff <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>diff_config_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">)</span>\n        _content <span class=\"token operator\">=</span> _diff<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        diff_spk <span class=\"token operator\">=</span> _content<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'spk'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 检查扩散模型维度是否匹配主模型</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> _content<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'encoder_out_channels'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'ssl_dim'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"扩散模型维度与主模型不匹配，请确保两个模型使用的是同一个编码器\"</span><span class=\"token punctuation\">,</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        \n        <span class=\"token comment\"># 更新扩散模型配置信息</span>\n        _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"infer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"speedup\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>speedup<span class=\"token punctuation\">)</span>\n        _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"infer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span>\n        _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"vocoder\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ckpt\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"pretrain/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>vocoder_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/model\"</span></span>\n        k_step_max <span class=\"token operator\">=</span> _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'k_step_max'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> _content<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'k_step_max'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">1000</span>\n        _diff<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>_content<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 加载模型</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion<span class=\"token punctuation\">:</span>\n        net <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>ckpt_path<span class=\"token punctuation\">,</span> map_location<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 检查模型维度是否匹配配置</span>\n        emb_dim<span class=\"token punctuation\">,</span> model_dim <span class=\"token operator\">=</span> net<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"emb_g.weight\"</span><span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> emb_dim <span class=\"token operator\">></span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"n_speakers\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"模型说话人数量与emb维度不匹配\"</span><span class=\"token punctuation\">,</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> model_dim <span class=\"token operator\">!=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ssl_dim\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"配置文件与模型不匹配\"</span><span class=\"token punctuation\">,</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        \n        encoder <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"speech_encoder\"</span><span class=\"token punctuation\">]</span>\n        spk_dict <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'spk'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        spk_dict <span class=\"token operator\">=</span> diff_spk\n\n    <span class=\"token comment\"># 根据设备类型初始化设备</span>\n    device <span class=\"token operator\">=</span> cuda<span class=\"token punctuation\">[</span>using_device<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token string\">\"CUDA\"</span> <span class=\"token keyword\">in</span> using_device <span class=\"token keyword\">else</span> using_device\n\n    <span class=\"token comment\"># 根据输入参数初始化模型</span>\n    model <span class=\"token operator\">=</span> Svc<span class=\"token punctuation\">(</span>ckpt_path<span class=\"token punctuation\">,</span> config_path<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device <span class=\"token keyword\">if</span> device <span class=\"token operator\">!=</span> <span class=\"token string\">\"Auto\"</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> cluster_model_path<span class=\"token operator\">=</span>cluster_path<span class=\"token punctuation\">,</span> nsf_hifigan_enhance<span class=\"token operator\">=</span>enhance<span class=\"token punctuation\">,</span> diffusion_model_path<span class=\"token operator\">=</span>diff_model_path<span class=\"token punctuation\">,</span> diffusion_config_path<span class=\"token operator\">=</span>diff_config_path<span class=\"token punctuation\">,</span> shallow_diffusion<span class=\"token operator\">=</span>diff_model_name <span class=\"token operator\">!=</span> <span class=\"token string\">\"no_diff\"</span><span class=\"token punctuation\">,</span> only_diffusion<span class=\"token operator\">=</span>only_diffusion<span class=\"token punctuation\">,</span> spk_mix_enable<span class=\"token operator\">=</span>use_spk_mix<span class=\"token punctuation\">,</span> feature_retrieval<span class=\"token operator\">=</span>cluster_name<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".pkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 一些额外处理</span>\n    spk_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>spk_dict<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> enhance<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">from</span> modules<span class=\"token punctuation\">.</span>enhancer <span class=\"token keyword\">import</span> Enhancer\n        model<span class=\"token punctuation\">.</span>enhancer <span class=\"token operator\">=</span> Enhancer<span class=\"token punctuation\">(</span><span class=\"token string\">'nsf-hifigan'</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'pretrain/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>vocoder_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/model'</span></span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>model<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 根据条件设置 clip 的值</span>\n    clip <span class=\"token operator\">=</span> <span class=\"token number\">25</span> <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"whisper-ppg\"</span> <span class=\"token keyword\">or</span> encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"whisper-ppg-large\"</span> <span class=\"token keyword\">else</span> cl_num\n    device_name <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_properties<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token keyword\">if</span> <span class=\"token string\">\"cuda\"</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span>\n    sovits_msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"模型被成功加载到了</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>device_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">上\\n\"</span></span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> only_diffusion <span class=\"token keyword\">else</span> <span class=\"token string\">\"启用全扩散推理，未加载So-VITS模型\\n\"</span>\n\n    index_or_kmeans <span class=\"token operator\">=</span> <span class=\"token string\">\"特征索引\"</span> <span class=\"token keyword\">if</span> cluster_name<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".pkl\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"聚类模型\"</span>\n    clu_load <span class=\"token operator\">=</span> <span class=\"token string\">\"未加载\"</span> <span class=\"token keyword\">if</span> cluster_name <span class=\"token operator\">==</span> <span class=\"token string\">\"no_clu\"</span> <span class=\"token keyword\">else</span> cluster_name\n    diff_load <span class=\"token operator\">=</span> <span class=\"token string\">\"未加载\"</span> <span class=\"token keyword\">if</span> diff_model_name <span class=\"token operator\">==</span> <span class=\"token string\">\"no_diff\"</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>diff_model_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> | 采样器: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>method<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> | 加速倍数：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>speedup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> | 最大浅扩散步数：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>k_step_max<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> | 声码器： </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>vocoder_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n    output_msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sovits_msg<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>index_or_kmeans<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>clu_load<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n扩散模型：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>diff_load<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        output_msg<span class=\"token punctuation\">,</span>\n        gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>spk_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>spk_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"未检测到音色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        clip<span class=\"token punctuation\">,</span>\n        gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token keyword\">if</span> k_step_max <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token keyword\">else</span> k_step_max<span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span>speedup<span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span>k_step_max<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">refresh_options</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 使用global关键字使这些变量在函数内部被视为全局变量</span>\n    <span class=\"token keyword\">global</span> ckpt_read_dir<span class=\"token punctuation\">,</span> config_read_dir<span class=\"token punctuation\">,</span> diff_read_dir<span class=\"token punctuation\">,</span> current_mode\n    \n    <span class=\"token comment\"># 根据条件选择要读取的目录</span>\n    ckpt_read_dir <span class=\"token operator\">=</span> workdir\n    config_read_dir <span class=\"token operator\">=</span> config_dir\n    diff_read_dir <span class=\"token operator\">=</span> diff_workdir\n    \n    <span class=\"token comment\"># 加载选项列表</span>\n    ckpt_list<span class=\"token punctuation\">,</span> config_list<span class=\"token punctuation\">,</span> cluster_list<span class=\"token punctuation\">,</span> diff_list<span class=\"token punctuation\">,</span> diff_config_list <span class=\"token operator\">=</span> option_loader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n\n    \n    <span class=\"token comment\"># 更新各个选择框和文本显示</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        choice_ckpt<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>ckpt_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新ckpt选择框</span>\n        config_choice<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>config_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新config选择框</span>\n        cluster_choice<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>cluster_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新cluster选择框</span>\n        diff_choice<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>diff_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新diff选择框</span>\n        diff_config_choice<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>diff_config_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 更新diff config选择框</span>\n    <span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_json_encoder</span><span class=\"token punctuation\">(</span>config_choice<span class=\"token punctuation\">,</span> choice_ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 如果没有选择配置文件，则返回相应提示</span>\n    <span class=\"token keyword\">if</span> config_choice <span class=\"token operator\">==</span> <span class=\"token string\">\"未选择配置文件\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"自动加载未启用，请手动选择配置文件。\"</span>\n    \n    <span class=\"token comment\"># 如果没有选择模型，则返回相应提示</span>\n    <span class=\"token keyword\">if</span> choice_ckpt <span class=\"token operator\">==</span> <span class=\"token string\">\"未选择模型\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"请先选择模型。\"</span>\n    \n    <span class=\"token comment\"># 读取配置文件</span>\n    config_file <span class=\"token operator\">=</span> Cfg<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>config_read_dir<span class=\"token punctuation\">,</span> config_choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span>\n    config <span class=\"token operator\">=</span> config_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 检查配置文件中的模型编码器和维度是否匹配</span>\n        config_encoder <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"speech_encoder\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no_encoder\"</span><span class=\"token punctuation\">)</span>\n        config_dim <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ssl_dim\"</span><span class=\"token punctuation\">]</span>\n        \n        <span class=\"token comment\"># 处理旧版本配置文件的自动匹配</span>\n        <span class=\"token keyword\">if</span> config_encoder <span class=\"token operator\">==</span> <span class=\"token string\">\"no_encoder\"</span><span class=\"token punctuation\">:</span>\n            config_encoder <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"speech_encoder\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"vec256l9\"</span> <span class=\"token keyword\">if</span> config_dim <span class=\"token operator\">==</span> <span class=\"token number\">256</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"vec768l12\"</span>\n            config_file<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 获取正确的模型维度</span>\n        correct_dim <span class=\"token operator\">=</span> MODEL_TYPE<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>config_encoder<span class=\"token punctuation\">,</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 如果模型维度不匹配，则返回相应提示</span>\n        <span class=\"token keyword\">if</span> config_dim <span class=\"token operator\">!=</span> correct_dim<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"配置文件中指定的编码器与模型维度不匹配。\"</span>\n        \n        <span class=\"token comment\"># 返回配置文件中的编码器</span>\n        <span class=\"token keyword\">return</span> config_encoder\n    \n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果出现异常，则返回错误信息</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"出现错误：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_model_info</span><span class=\"token punctuation\">(</span>choice_ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pthfile <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ckpt_read_dir<span class=\"token punctuation\">,</span> choice_ckpt<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 加载模型，映射到CPU以避免使用GPU内存</span>\n    net <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>pthfile<span class=\"token punctuation\">,</span> map_location<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 获取模型中的说话者嵌入向量</span>\n    spk_emb <span class=\"token operator\">=</span> net<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"emb_g.weight\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 检查模型是否缺少说话者嵌入向量</span>\n    <span class=\"token keyword\">if</span> spk_emb <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"所选模型缺少emb_g.weight，可能选择了一个底层模型\"</span>\n    \n    <span class=\"token comment\"># 获取说话者嵌入向量的维度</span>\n    _layer <span class=\"token operator\">=</span> spk_emb<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 通过维度查找对应的编码器</span>\n    encoder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> MODEL_TYPE<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> _layer<span class=\"token punctuation\">]</span>\n    encoder<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 对特定编码器进行合并处理</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hubertsoft\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vec256l9\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"vec256l9 / hubertsoft\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cnhubertlarge\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"whisper-ppg\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"whisper-ppg / cnhubertlarge\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> encoder <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dphubert\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vec768l12\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wavlmbase+\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        encoder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"vec768l12 / dphubert / wavlmbase+\"</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">return</span> encoder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">auto_load</span><span class=\"token punctuation\">(</span>choice_ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># 获取模型信息</span>\n    model_output_msg <span class=\"token operator\">=</span> get_model_info<span class=\"token punctuation\">(</span>choice_ckpt<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 初始化变量</span>\n    json_output_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    config_choice <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    \n    <span class=\"token comment\"># 获取选择的ckpt文件名，去掉扩展名</span>\n    choice_ckpt_name<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>choice_ckpt<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model_output_msg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"未选择配置文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">auto_load_diff</span><span class=\"token punctuation\">(</span>diff_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"未启用扩散配置文件加载\"</span>\n    \n    <span class=\"token comment\"># 获取目录中所有以.yaml结尾的文件</span>\n    all_diff_config <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>yaml <span class=\"token keyword\">for</span> yaml <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>second_dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> yaml<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".yaml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\"># 遍历所有扩散配置文件</span>\n    <span class=\"token keyword\">for</span> config <span class=\"token keyword\">in</span> all_diff_config<span class=\"token punctuation\">:</span>\n        config_fname<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n        diff_fname<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>diff_model<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 比较文件名是否匹配</span>\n        <span class=\"token keyword\">if</span> config_fname <span class=\"token operator\">==</span> diff_fname<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> config\n    \n    <span class=\"token comment\"># 如果没有找到匹配的配置文件，则返回相应提示</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"未找到匹配的扩散配置文件\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">model_empty_cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> model\n    <span class=\"token keyword\">if</span> model <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> sid<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"没有模型需要卸载!\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        model<span class=\"token punctuation\">.</span>unload_model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        model <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>empty_cache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> sid<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>choices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"模型卸载完毕!\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">debug_change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> debug\n    debug <span class=\"token operator\">=</span> debug_button<span class=\"token punctuation\">.</span>value\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">vc_infer</span><span class=\"token punctuation\">(</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> sr<span class=\"token punctuation\">,</span> input_audio_path<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> \n              noise_scale<span class=\"token punctuation\">,</span> pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span>\n              k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 将输入音频转换为浮点数类型，并确保只有一个声道</span>\n    <span class=\"token keyword\">if</span> np<span class=\"token punctuation\">.</span>issubdtype<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        input_audio <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>input_audio <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>iinfo<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        input_audio <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>to_mono<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 如果音频采样率不是44100Hz，则重新采样为44100Hz</span>\n    <span class=\"token keyword\">if</span> sr <span class=\"token operator\">!=</span> <span class=\"token number\">44100</span><span class=\"token punctuation\">:</span>\n        input_audio <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">,</span> orig_sr<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">,</span> target_sr<span class=\"token operator\">=</span><span class=\"token number\">44100</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 将预处理后的音频保存为临时文件</span>\n    sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"temp.wav\"</span><span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> <span class=\"token number\">44100</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">\"wav\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 对临时文件执行声码转换推断</span>\n    _audio <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>slice_inference<span class=\"token punctuation\">(</span><span class=\"token string\">\"temp.wav\"</span><span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span>\n                                   pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span>\n                                   k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 清空模型状态</span>\n    model<span class=\"token punctuation\">.</span>clear_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 确定输出文件名</span>\n    key <span class=\"token operator\">=</span> <span class=\"token string\">\"auto\"</span> <span class=\"token keyword\">if</span> auto_f0 <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vc_transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">key\"</span></span>\n    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"_\"</span> <span class=\"token keyword\">if</span> cluster_ratio <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cluster_ratio<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_\"</span></span>\n    isdiffusion <span class=\"token operator\">=</span> <span class=\"token string\">\"sovits_\"</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> model<span class=\"token punctuation\">.</span>shallow_diffusion <span class=\"token keyword\">else</span> <span class=\"token string\">\"sovdiff_\"</span> <span class=\"token keyword\">if</span> model<span class=\"token punctuation\">.</span>shallow_diffusion <span class=\"token keyword\">else</span> <span class=\"token string\">\"diff_\"</span>\n    \n    <span class=\"token comment\"># 处理 Gradio 上传的文件路径</span>\n    truncated_basename <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>input_audio_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> Path<span class=\"token punctuation\">(</span>input_audio_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"-0-100\"</span> <span class=\"token keyword\">else</span> Path<span class=\"token punctuation\">(</span>input_audio_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem\n    output_file_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>truncated_basename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cluster<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>isdiffusion<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>f0_predictor<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_format<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span>\n    output_file_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"results\"</span><span class=\"token punctuation\">,</span> output_file_name<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 如果输出文件已经存在，则在文件名中添加序号以避免覆盖现有文件</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>output_file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>output_file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            output_file_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>truncated_basename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cluster<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>isdiffusion<span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>f0_predictor<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_format<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span>\n            output_file_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"results\"</span><span class=\"token punctuation\">,</span> output_file_name<span class=\"token punctuation\">)</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token comment\"># 将输出音频保存为指定的格式</span>\n    sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>output_file_path<span class=\"token punctuation\">,</span> _audio<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>target_sample<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span>output_format<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 返回输出文件路径</span>\n    <span class=\"token keyword\">return</span> output_file_path\n\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">vc_fn</span><span class=\"token punctuation\">(</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span> pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">,</span> progress<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Progress<span class=\"token punctuation\">(</span>track_tqdm<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> model\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> input_audio <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还没有上传音频\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> model <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还没有加载模型\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'cluster_model'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> model<span class=\"token punctuation\">.</span>feature_retrieval <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> cluster_ratio <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还未加载聚类或特征检索模型，无法启用聚类/特征检索混合比例\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        audio<span class=\"token punctuation\">,</span> sr <span class=\"token operator\">=</span> sf<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">)</span>\n        output_file_path <span class=\"token operator\">=</span> vc_infer<span class=\"token punctuation\">(</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> audio<span class=\"token punctuation\">,</span> sr<span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span> pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"temp.wav\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">,</span> output_file_path\n    <span class=\"token keyword\">except</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>OutOfMemoryError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> gr<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\n显存不足，减小batch_size或者更换配置也许可以解决\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> debug<span class=\"token punctuation\">:</span>\n            traceback<span class=\"token punctuation\">.</span>print_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> gr<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">tts_fn</span><span class=\"token punctuation\">(</span>_text<span class=\"token punctuation\">,</span> _gender<span class=\"token punctuation\">,</span> _lang<span class=\"token punctuation\">,</span> _rate<span class=\"token punctuation\">,</span> _volume<span class=\"token punctuation\">,</span> output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span>cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span>pad_seconds<span class=\"token punctuation\">,</span>cl_num<span class=\"token punctuation\">,</span>lg_num<span class=\"token punctuation\">,</span>lgr_num<span class=\"token punctuation\">,</span>f0_predictor<span class=\"token punctuation\">,</span>enhancer_adaptive_key<span class=\"token punctuation\">,</span>cr_threshold<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">,</span>use_spk_mix<span class=\"token punctuation\">,</span>second_encoding<span class=\"token punctuation\">,</span>loudness_envelope_adjustment<span class=\"token punctuation\">,</span>progress<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Progress<span class=\"token punctuation\">(</span>track_tqdm<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> model\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> model <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还没有加载模型\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'cluster_model'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> model<span class=\"token punctuation\">.</span>feature_retrieval <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> cluster_ratio <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"你还未加载聚类或特征检索模型，无法启用聚类/特征检索混合比例\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        _rate <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"+</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>_rate<span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%\"</span></span> <span class=\"token keyword\">if</span> _rate <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>_rate<span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%\"</span></span>\n        _volume <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"+</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>_volume<span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%\"</span></span> <span class=\"token keyword\">if</span> _volume <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>_volume<span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%\"</span></span>\n        <span class=\"token keyword\">if</span> _lang <span class=\"token operator\">==</span> <span class=\"token string\">\"Auto\"</span><span class=\"token punctuation\">:</span>\n            _gender <span class=\"token operator\">=</span> <span class=\"token string\">\"Male\"</span> <span class=\"token keyword\">if</span> _gender <span class=\"token operator\">==</span> <span class=\"token string\">\"男\"</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"Female\"</span>\n            subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">r\".\\env\\python.exe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./edgetts/tts.py\"</span><span class=\"token punctuation\">,</span> _text<span class=\"token punctuation\">,</span> _lang<span class=\"token punctuation\">,</span> _rate<span class=\"token punctuation\">,</span> _volume<span class=\"token punctuation\">,</span> _gender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">r\".\\env\\python.exe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./edgetts/tts.py\"</span><span class=\"token punctuation\">,</span> _text<span class=\"token punctuation\">,</span> _lang<span class=\"token punctuation\">,</span> _rate<span class=\"token punctuation\">,</span> _volume<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        target_sr <span class=\"token operator\">=</span> <span class=\"token number\">44100</span>\n        y<span class=\"token punctuation\">,</span> sr <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"tts.wav\"</span><span class=\"token punctuation\">)</span>\n        resampled_y <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> orig_sr<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">,</span> target_sr<span class=\"token operator\">=</span>target_sr<span class=\"token punctuation\">)</span>\n        sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"tts.wav\"</span><span class=\"token punctuation\">,</span> resampled_y<span class=\"token punctuation\">,</span> target_sr<span class=\"token punctuation\">,</span> subtype <span class=\"token operator\">=</span> <span class=\"token string\">\"PCM_16\"</span><span class=\"token punctuation\">)</span>\n        input_audio <span class=\"token operator\">=</span> <span class=\"token string\">\"tts.wav\"</span>\n        audio<span class=\"token punctuation\">,</span> sr <span class=\"token operator\">=</span> sf<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>input_audio<span class=\"token punctuation\">)</span>\n        output_file_path <span class=\"token operator\">=</span> vc_infer<span class=\"token punctuation\">(</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> audio<span class=\"token punctuation\">,</span> sr<span class=\"token punctuation\">,</span> input_audio<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span> auto_f0<span class=\"token punctuation\">,</span> cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span> pad_seconds<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> lg_num<span class=\"token punctuation\">,</span> lgr_num<span class=\"token punctuation\">,</span> f0_predictor<span class=\"token punctuation\">,</span> enhancer_adaptive_key<span class=\"token punctuation\">,</span> cr_threshold<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">,</span> use_spk_mix<span class=\"token punctuation\">,</span> second_encoding<span class=\"token punctuation\">,</span> loudness_envelope_adjustment<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#os.remove(\"tts.wav\")</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">,</span> output_file_path\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> debug<span class=\"token punctuation\">:</span>\n            traceback<span class=\"token punctuation\">.</span>print_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>界面设计</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">    <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">'推理'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> inference_tab<span class=\"token punctuation\">:</span>\n        gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n                    ### 音频推理模块\n                     \n                    \"\"\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                choice_ckpt <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"模型选择\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>ckpt_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择模型\"</span><span class=\"token punctuation\">)</span>\n                model_branch <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"模型编码器\"</span><span class=\"token punctuation\">,</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请先选择模型\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                config_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"配置文件\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>config_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择配置文件\"</span><span class=\"token punctuation\">)</span>\n                config_info <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"配置文件编码器\"</span><span class=\"token punctuation\">,</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请选择配置文件\"</span><span class=\"token punctuation\">)</span>\n            \n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"**请检查模型和配置文件的编码器是否匹配**\"</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                diff_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"（可选）选择扩散模型\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>diff_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择扩散模型\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n                diff_config_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"扩散模型配置文件\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>diff_config_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择扩散模型配置文件\"</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                cluster_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"（可选）选择聚类模型/特征检索模型\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>cluster_list<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"未选择聚类模型/特征检索模型\"</span><span class=\"token punctuation\">)</span>\n                vocoder_choice <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"选择声码器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>vocoder_options<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"nsf_hifigan\"</span><span class=\"token punctuation\">)</span>\n            \n\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                enhance <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"是否使用NSF_HIFIGAN增强\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n                only_diffusion <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"是否使用全扩散推理\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                diffusion_method <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"扩散模型采样器\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dpm-solver++\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dpm-solver\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pndm\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ddim\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"unipc\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"dpm-solver++\"</span><span class=\"token punctuation\">)</span>\n                diffusion_speedup <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"扩散加速倍数，默认为10倍\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            \n            using_device <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"推理设备，默认为自动选择\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Auto\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>cuda<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"Auto\"</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                loadckpt <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"加载模型\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n                unload <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"卸载模型\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                model_message <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"Output Message\"</span><span class=\"token punctuation\">)</span>\n                sid <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"So-VITS说话人\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"speaker0\"</span><span class=\"token punctuation\">)</span>\n\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>\n    value<span class=\"token operator\">=</span><span class=\"token string\">\"请等待模型加载，大概十多秒钟(取决于硬盘速度)后续不需要重新加载模型\"</span>\n<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Tabs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"音频上传\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    vc_input <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Audio<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"单音频上传\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"filepath\"</span><span class=\"token punctuation\">,</span> source<span class=\"token operator\">=</span><span class=\"token string\">\"upload\"</span>\n                    <span class=\"token punctuation\">)</span>\n\n\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>TabItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"文字转语音\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>\n                    <span class=\"token triple-quoted-string string\">\"\"\"\n                    说明：使用edge_tts库生成音频，并转换为模型音色。\n                    \"\"\"</span>\n                <span class=\"token punctuation\">)</span>\n                text_input <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>\n                    label<span class=\"token operator\">=</span><span class=\"token string\">\"在此输入需要转译的文字（建议打开自动f0预测）\"</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    tts_gender <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"说话人性别\"</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"男\"</span>\n                    <span class=\"token punctuation\">)</span>\n                    tts_lang <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Dropdown<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"选择语言，Auto为根据输入文字自动识别\"</span><span class=\"token punctuation\">,</span>\n                        choices<span class=\"token operator\">=</span>SUPPORTED_LANGUAGES<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"Auto\"</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    tts_rate <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"TTS语音变速（倍速相对值）\"</span><span class=\"token punctuation\">,</span>\n                        minimum<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">0.1</span>\n                    <span class=\"token punctuation\">)</span>\n                    tts_volume <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>\n                        label<span class=\"token operator\">=</span><span class=\"token string\">\"TTS语音音量（相对值）\"</span><span class=\"token punctuation\">,</span>\n                        minimum<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">0.1</span>\n                    <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            auto_f0 <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"自动f0预测，配合聚类模型f0预测效果更好，会导致变调功能失效\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n            <span class=\"token punctuation\">)</span>\n            f0_predictor <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"f0预测器选择（如遇哑音可以更换f0预测器解决，crepe为原F0使用均值滤波器）\"</span><span class=\"token punctuation\">,</span>\n                choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"rmvpe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"crepe\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token string\">\"rmvpe\"</span>\n            <span class=\"token punctuation\">)</span>\n            cr_threshold <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"F0过滤阈值，只有使用crepe时有效。数值范围从0-1。降低该值可减少跑调概率，但会增加哑音\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0.05</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            vc_transform <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"变调（整数，可以是正负数，半音数量。升高八度就是12）\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n            cluster_ratio <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"聚类模型/特征检索混合比例，0-1之间，默认为0不启用聚类或特征检索，能提升音色相似度，但会导致咬字下降\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n            k_step <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Slider<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"浅扩散步数，必须使用扩散模型才有效，步数越大越接近扩散模型的结果\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> minimum<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">=</span><span class=\"token number\">1000</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            output_format <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Radio<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"音频输出格式\"</span><span class=\"token punctuation\">,</span>\n                choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"wav\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"flac\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mp3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token string\">\"wav\"</span>\n            <span class=\"token punctuation\">)</span>\n            enhancer_adaptive_key <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"使NSF-HIFIGAN增强器适应更高的音域(单位为半音数)，默认为0\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n            slice_db <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"切片阈值\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n            cl_num <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"音频自动切片，0为按默认方式切片，单位为秒/s，显存不足可以设置此处强制切片\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Accordion<span class=\"token punctuation\">(</span><span class=\"token string\">\"高级设置\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            noise_scale <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"noise_scale 影响音质，默认即可\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0.4</span>\n            <span class=\"token punctuation\">)</span>\n            pad_seconds <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"推理音频pad秒数，由于未知原因开头结尾会有异响，pad一小段静音段后就不会出现\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0.5</span>\n            <span class=\"token punctuation\">)</span>\n            lg_num <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"两端音频切片的交叉淡入长度，如果自动切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值0，注意，该设置会影响推理速度，单位为秒/s\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n            <span class=\"token punctuation\">)</span>\n            lgr_num <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"自动音频切片后，需要舍弃每段切片的头尾。该参数设置交叉长度保留的比例，范围0-1，左开右闭\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0.75</span>\n            <span class=\"token punctuation\">)</span>\n            second_encoding <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"二次编码，浅扩散前会对原始音频进行二次编码,效果两极分化，默认关闭\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n            <span class=\"token punctuation\">)</span>\n            loudness_envelope_adjustment <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"输入源响度包络替换输出响度包络融合比例，越靠近1越使用输出响度包络\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span>\n            use_spk_mix <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>\n                label<span class=\"token operator\">=</span><span class=\"token string\">\"动态声线融合，仅提供开关，不建议开启\"</span><span class=\"token punctuation\">,</span>\n                value<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> interactive<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            vc_submit <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"音频转换\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n            vc_tts_submit <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Button<span class=\"token punctuation\">(</span><span class=\"token string\">\"文本转语音\"</span><span class=\"token punctuation\">,</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span>\n        vc_output1 <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Textbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"输出信息\"</span><span class=\"token punctuation\">)</span>\n        vc_output2 <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Audio<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"输出音频\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Tabs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span>variant<span class=\"token operator\">=</span><span class=\"token string\">\"panel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            gr<span class=\"token punctuation\">.</span>Markdown<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n            * * *\n\n            **调试设置**\n            \"\"\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">with</span> gr<span class=\"token punctuation\">.</span>Row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                debug_button <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span>Checkbox<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"启动Debug，仅在终端运行时有效，会在vscode或者pycharm终端显示详细报错\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>debug<span class=\"token punctuation\">)</span>                \n    debug_button<span class=\"token punctuation\">.</span>change<span class=\"token punctuation\">(</span>debug_change<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>按键绑定</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">inference_tab<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>refresh_options<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>choice_ckpt<span class=\"token punctuation\">,</span>config_choice<span class=\"token punctuation\">,</span>cluster_choice<span class=\"token punctuation\">,</span>diff_choice<span class=\"token punctuation\">,</span>diff_config_choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nchoice_ckpt<span class=\"token punctuation\">.</span>change<span class=\"token punctuation\">(</span>auto_load<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>choice_ckpt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>model_branch<span class=\"token punctuation\">,</span> config_choice<span class=\"token punctuation\">,</span> config_info<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \nconfig_choice<span class=\"token punctuation\">.</span>change<span class=\"token punctuation\">(</span>load_json_encoder<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>config_choice<span class=\"token punctuation\">,</span> choice_ckpt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>config_info<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndiff_choice<span class=\"token punctuation\">.</span>change<span class=\"token punctuation\">(</span>auto_load_diff<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>diff_choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>diff_config_choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#自动装载配置文件</span>\n\nloadckpt<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>load_model_func<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>choice_ckpt<span class=\"token punctuation\">,</span>cluster_choice<span class=\"token punctuation\">,</span>config_choice<span class=\"token punctuation\">,</span>enhance<span class=\"token punctuation\">,</span>diff_choice<span class=\"token punctuation\">,</span>diff_config_choice<span class=\"token punctuation\">,</span>only_diffusion<span class=\"token punctuation\">,</span>use_spk_mix<span class=\"token punctuation\">,</span>using_device<span class=\"token punctuation\">,</span>diffusion_method<span class=\"token punctuation\">,</span>diffusion_speedup<span class=\"token punctuation\">,</span>cl_num<span class=\"token punctuation\">,</span>vocoder_choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>model_message<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> cl_num<span class=\"token punctuation\">,</span> k_step<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nunload<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>model_empty_cache<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>sid<span class=\"token punctuation\">,</span> model_message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nvc_submit<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>vc_fn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> vc_input<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span>auto_f0<span class=\"token punctuation\">,</span>cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span>pad_seconds<span class=\"token punctuation\">,</span>cl_num<span class=\"token punctuation\">,</span>lg_num<span class=\"token punctuation\">,</span>lgr_num<span class=\"token punctuation\">,</span>f0_predictor<span class=\"token punctuation\">,</span>enhancer_adaptive_key<span class=\"token punctuation\">,</span>cr_threshold<span class=\"token punctuation\">,</span>k_step<span class=\"token punctuation\">,</span>use_spk_mix<span class=\"token punctuation\">,</span>second_encoding<span class=\"token punctuation\">,</span>loudness_envelope_adjustment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>vc_output1<span class=\"token punctuation\">,</span> vc_output2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nvc_tts_submit<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>tts_fn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>text_input<span class=\"token punctuation\">,</span> tts_gender<span class=\"token punctuation\">,</span> tts_lang<span class=\"token punctuation\">,</span> tts_rate<span class=\"token punctuation\">,</span> tts_volume<span class=\"token punctuation\">,</span> output_format<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> vc_transform<span class=\"token punctuation\">,</span>auto_f0<span class=\"token punctuation\">,</span>cluster_ratio<span class=\"token punctuation\">,</span> slice_db<span class=\"token punctuation\">,</span> noise_scale<span class=\"token punctuation\">,</span>pad_seconds<span class=\"token punctuation\">,</span>cl_num<span class=\"token punctuation\">,</span>lg_num<span class=\"token punctuation\">,</span>lgr_num<span class=\"token punctuation\">,</span>f0_predictor<span class=\"token punctuation\">,</span>enhancer_adaptive_key<span class=\"token punctuation\">,</span>cr_threshold<span class=\"token punctuation\">,</span>k_step<span class=\"token punctuation\">,</span>use_spk_mix<span class=\"token punctuation\">,</span>second_encoding<span class=\"token punctuation\">,</span>loudness_envelope_adjustment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>vc_output1<span class=\"token punctuation\">,</span> vc_output2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#推理相关按键绑定</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在项目工具infer_tool.py内作如下修改</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#添加tqdm</span>\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm\n\n<span class=\"token comment\">#并且在446行 </span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>slice_tag<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> audio_data<span class=\"token punctuation\">:</span><span class=\"token comment\">#改为</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>slice_tag<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> tqdm<span class=\"token punctuation\">(</span>audio_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#用于显示进度条</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"预存安装信息\"><a href=\"#预存安装信息\" class=\"headerlink\" title=\"预存安装信息\"></a>预存安装信息</h3><p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712389141182.png\" alt=\"1712389123101\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712484163277.png\" alt=\"1712484163277\">-</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimg1712482664500.png\" alt=\"1712482664500\"></p>\n<p>如果您将函数<code>list_files</code>的类型注解从<code>-&gt; list[Path]</code>修改为没有指定具体类型，即去掉具体类型的注解，那么就不会再触发类型错误。这是因为Python的类型提示是可选的，您可以选择添加或删除它们，对于静态类型检查器而言，如果没有提供类型注解，它将无法对类型进行验证，因此不会再引发类型错误。</p>\n<p>因此，如果您考虑删除特定的类型提示是为了避免类型错误，这是一个可行的方法。 但要注意，类型提示的存在可以帮助他人更容易地理解代码，并且在编写大型项目时，类型提示也有助于提高代码的可维护性和可读性。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n\n<span class=\"token keyword\">from</span> loguru <span class=\"token keyword\">import</span> logger\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm\n\n<span class=\"token keyword\">from</span> fap<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token builtin\">file</span> <span class=\"token keyword\">import</span> AUDIO_EXTENSIONS<span class=\"token punctuation\">,</span> list_files\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>\n    input_dir<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    recursive<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    visualize<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    long_threshold<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n    short_threshold<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Get the length of all audio files in a directory\n    \"\"\"</span>\n\n    <span class=\"token keyword\">import</span> soundfile <span class=\"token keyword\">as</span> sf\n    <span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\n\n    input_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>input_dir<span class=\"token punctuation\">)</span>\n    files <span class=\"token operator\">=</span> list_files<span class=\"token punctuation\">(</span>input_dir<span class=\"token punctuation\">,</span> AUDIO_EXTENSIONS<span class=\"token punctuation\">,</span> recursive<span class=\"token operator\">=</span>recursive<span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Found </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> files, calculating length\"</span></span><span class=\"token punctuation\">)</span>\n\n    infos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> tqdm<span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> desc<span class=\"token operator\">=</span><span class=\"token string\">\"Collecting infos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sound <span class=\"token operator\">=</span> sf<span class=\"token punctuation\">.</span>SoundFile<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        infos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span>\n                <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                sound<span class=\"token punctuation\">.</span>samplerate<span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> sound<span class=\"token punctuation\">.</span>samplerate<span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>relative_to<span class=\"token punctuation\">(</span>input_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Duration</span>\n    total_duration <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span>\n    avg_duration <span class=\"token operator\">=</span> total_duration <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>infos<span class=\"token punctuation\">)</span>\n    min_duration <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span>\n    max_duration <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Total duration: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>total_duration <span class=\"token operator\">/</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> hours\"</span></span><span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Average duration: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>avg_duration<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Max duration: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Min duration: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Too Long</span>\n    <span class=\"token keyword\">if</span> long_threshold <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        long_files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>long_threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># sort by duration</span>\n        <span class=\"token keyword\">if</span> long_files<span class=\"token punctuation\">:</span>\n            long_files <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>long_files<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            logger<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span>\n                <span class=\"token string-interpolation\"><span class=\"token string\">f\"Found </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>long_files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> files longer than </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>long_threshold<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> long_files<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"    </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Too Short</span>\n    <span class=\"token keyword\">if</span> short_threshold <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        short_files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>short_threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> short_files<span class=\"token punctuation\">:</span>\n            short_files <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>short_files<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n            logger<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span>\n                <span class=\"token string-interpolation\"><span class=\"token string\">f\"Found </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>short_files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> files shorter than </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>short_threshold<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds\"</span></span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> short_files<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"    </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Sample Rate</span>\n    total_samplerate <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">)</span>\n    avg_samplerate <span class=\"token operator\">=</span> total_samplerate <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>infos<span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Average samplerate: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>avg_samplerate<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visualize<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> short_threshold <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> total_duration<span class=\"token punctuation\">,</span> avg_duration<span class=\"token punctuation\">,</span> min_duration<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> short_files\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> total_duration<span class=\"token punctuation\">,</span> avg_duration<span class=\"token punctuation\">,</span> min_duration<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n        \n    <span class=\"token comment\"># Visualize</span>\n    plt<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> infos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bins<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"Distribution of audio lengths (Total: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>infos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> files, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>total_duration <span class=\"token operator\">/</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> hours)\"</span></span>\n    <span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Length (seconds)\"</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Count\"</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在第二个版本的代码中，对函数<code>length</code>进行了一些修改。参数列表中的<code>recursive</code>、<code>visualize</code>、<code>long_threshold</code>和<code>short_threshold</code>现在是可选的，并且都有了默认值。此外，在返回结果的部分也进行了修改。如果<code>visualize</code>为<code>False</code>，函数会根据<code>short_threshold</code>是否为<code>None</code>返回不同的结果。在处理过长或过短音频文件时，输出信息的显示也稍微不同，指明了具体发现的长音频文件数或短音频文件数。</p>\n<p>需要删除并且修改一下文本内的内容</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># This file is edited from https://github.com/openvpi/audio-slicer/blob/main/slicer2.py</span>\n\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Iterable<span class=\"token punctuation\">,</span> Union\n\n<span class=\"token keyword\">import</span> librosa\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> soundfile <span class=\"token keyword\">as</span> sf\n\n<span class=\"token keyword\">from</span> fish_audio_preprocess<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>slice_audio <span class=\"token keyword\">import</span> slice_by_max_duration\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">merge_short_chunks</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    merged_chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> chunk <span class=\"token keyword\">in</span> chunks<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> length <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> max_duration <span class=\"token operator\">*</span> rate <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            merged_chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span>\n            length <span class=\"token operator\">+=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        merged_chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> merged_chunks\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Slicer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>\n        self<span class=\"token punctuation\">,</span>\n        sr<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        threshold<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40.0</span><span class=\"token punctuation\">,</span>\n        min_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n        min_interval<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n        hop_size<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        max_sil_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> min_length <span class=\"token operator\">>=</span> min_interval <span class=\"token operator\">>=</span> hop_size<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"The following condition must be satisfied: min_length >= min_interval >= hop_size\"</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> max_sil_kept <span class=\"token operator\">>=</span> hop_size<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"The following condition must be satisfied: max_sil_kept >= hop_size\"</span>\n            <span class=\"token punctuation\">)</span>\n\n        min_interval <span class=\"token operator\">=</span> sr <span class=\"token operator\">*</span> min_interval <span class=\"token operator\">/</span> <span class=\"token number\">1000</span>\n        self<span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>threshold <span class=\"token operator\">/</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hop_size <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> hop_size <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>win_size <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>min_length <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> min_length <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>min_interval <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_interval <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> max_sil_kept <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_apply_slice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> waveform<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> waveform<span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> begin <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size <span class=\"token punctuation\">:</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> waveform<span class=\"token punctuation\">[</span>\n                begin <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size <span class=\"token punctuation\">:</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> waveform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            samples <span class=\"token operator\">=</span> waveform<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            samples <span class=\"token operator\">=</span> waveform\n\n        <span class=\"token keyword\">if</span> samples<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>min_length<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>waveform<span class=\"token punctuation\">]</span>\n\n        rms_list <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>feature<span class=\"token punctuation\">.</span>rms<span class=\"token punctuation\">(</span>\n            y<span class=\"token operator\">=</span>samples<span class=\"token punctuation\">,</span> frame_length<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>win_size<span class=\"token punctuation\">,</span> hop_length<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>hop_size\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        sil_tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        clip_start <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> rms <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>rms_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># Keep looping while frame is silent.</span>\n            <span class=\"token keyword\">if</span> rms <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># Record start of silent frames.</span>\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    silence_start <span class=\"token operator\">=</span> i\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Keep looping while frame is not silent and silence start has not been recorded.</span>\n            <span class=\"token keyword\">if</span> silence_start <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Clear recorded silence start if interval is not enough or clip is too short</span>\n            is_leading_silence <span class=\"token operator\">=</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> i <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>max_sil_kept\n            need_slice_middle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_interval\n                <span class=\"token keyword\">and</span> i <span class=\"token operator\">-</span> clip_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_length\n            <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_leading_silence <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> need_slice_middle<span class=\"token punctuation\">:</span>\n                silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Need slicing. Record the range of silent frames to be removed.</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>max_sil_kept<span class=\"token punctuation\">:</span>\n                pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>silence_start <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> silence_start\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                clip_start <span class=\"token operator\">=</span> pos\n            <span class=\"token keyword\">elif</span> i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>\n                    i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                pos <span class=\"token operator\">+=</span> i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                pos_l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>\n                        silence_start <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> silence_start\n                <span class=\"token punctuation\">)</span>\n                pos_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> i\n                    <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                <span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    clip_start <span class=\"token operator\">=</span> pos_r\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>pos_l<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>pos_r<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    clip_start <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>pos_r<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                pos_l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>\n                        silence_start <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> silence_start\n                <span class=\"token punctuation\">)</span>\n                pos_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> i\n                    <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                <span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos_l<span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                clip_start <span class=\"token operator\">=</span> pos_r\n            silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># Deal with trailing silence.</span>\n        total_frames <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            silence_start <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">and</span> total_frames <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_interval\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            silence_end <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>total_frames<span class=\"token punctuation\">,</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept<span class=\"token punctuation\">)</span>\n            pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>silence_start <span class=\"token punctuation\">:</span> silence_end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> silence_start\n            sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> total_frames <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Apply and return slices.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sil_tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>waveform<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sil_tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> total_frames<span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> total_frames<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> chunks\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_v2</span><span class=\"token punctuation\">(</span>\n    audio<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">,</span>\n    rate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    merge_short<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Iterable<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Slice audio by silence\n\n    Args:\n        audio: audio data, in shape (samples, channels)\n        rate: sample rate\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n        merge_short: merge short slices automatically\n\n    Returns:\n        Iterable of sliced audio\n    \"\"\"</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> rate <span class=\"token operator\">&lt;</span> min_duration<span class=\"token punctuation\">:</span>\n        sliced_by_max_duration_chunk <span class=\"token operator\">=</span> slice_by_max_duration<span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> merge_short_chunks<span class=\"token punctuation\">(</span>\n            sliced_by_max_duration_chunk<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate\n        <span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> merge_short <span class=\"token keyword\">else</span> sliced_by_max_duration_chunk\n        <span class=\"token keyword\">return</span>\n\n    slicer <span class=\"token operator\">=</span> Slicer<span class=\"token punctuation\">(</span>\n        sr<span class=\"token operator\">=</span>rate<span class=\"token punctuation\">,</span>\n        threshold<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n        min_length<span class=\"token operator\">=</span>min_duration <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        min_interval<span class=\"token operator\">=</span>min_silence_duration <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        hop_size<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n        max_sil_kept<span class=\"token operator\">=</span>max_silence_kept <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    sliced_audio <span class=\"token operator\">=</span> slicer<span class=\"token punctuation\">.</span><span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> merge_short<span class=\"token punctuation\">:</span>\n        sliced_audio <span class=\"token operator\">=</span> merge_short_chunks<span class=\"token punctuation\">(</span>sliced_audio<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> chunk <span class=\"token keyword\">in</span> sliced_audio<span class=\"token punctuation\">:</span>\n        sliced_by_max_duration_chunk <span class=\"token operator\">=</span> slice_by_max_duration<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> sliced_by_max_duration_chunk\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_file_v2</span><span class=\"token punctuation\">(</span>\n    input_file<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    output_dir<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    flat_layout<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    merge_short<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Slice audio by silence and save to output folder\n\n    Args:\n        input_file: input audio file\n        output_dir: output folder\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n        flat_layout: use flat directory structure\n        merge_short: merge short slices automatically\n    \"\"\"</span>\n\n    output_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n\n    audio<span class=\"token punctuation\">,</span> rate <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> mono<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> sliced <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>\n        slice_audio_v2<span class=\"token punctuation\">(</span>\n            audio<span class=\"token punctuation\">,</span>\n            rate<span class=\"token punctuation\">,</span>\n            min_duration<span class=\"token operator\">=</span>min_duration<span class=\"token punctuation\">,</span>\n            max_duration<span class=\"token operator\">=</span>max_duration<span class=\"token punctuation\">,</span>\n            min_silence_duration<span class=\"token operator\">=</span>min_silence_duration<span class=\"token punctuation\">,</span>\n            top_db<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n            hop_length<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n            max_silence_kept<span class=\"token operator\">=</span>max_silence_kept<span class=\"token punctuation\">,</span>\n            merge_short<span class=\"token operator\">=</span>merge_short<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> flat_layout<span class=\"token punctuation\">:</span>\n            sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>idx<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.wav\"</span></span><span class=\"token punctuation\">,</span> sliced<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>output_dir <span class=\"token operator\">/</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>idx<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.wav\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sliced<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改后代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># This file is edited from https://github.com/openvpi/audio-slicer/blob/main/slicer2.py</span>\n\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Iterable<span class=\"token punctuation\">,</span> Union\n\n<span class=\"token keyword\">import</span> librosa\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> soundfile <span class=\"token keyword\">as</span> sf\n\n<span class=\"token keyword\">from</span> fish_audio_preprocess<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>slice_audio <span class=\"token keyword\">import</span> slice_by_max_duration\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Slicer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>\n        self<span class=\"token punctuation\">,</span>\n        sr<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        threshold<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40.0</span><span class=\"token punctuation\">,</span>\n        min_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n        min_interval<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n        hop_size<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        max_sil_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> min_length <span class=\"token operator\">>=</span> min_interval <span class=\"token operator\">>=</span> hop_size<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"The following condition must be satisfied: min_length >= min_interval >= hop_size\"</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> max_sil_kept <span class=\"token operator\">>=</span> hop_size<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"The following condition must be satisfied: max_sil_kept >= hop_size\"</span>\n            <span class=\"token punctuation\">)</span>\n\n        min_interval <span class=\"token operator\">=</span> sr <span class=\"token operator\">*</span> min_interval <span class=\"token operator\">/</span> <span class=\"token number\">1000</span>\n        self<span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>threshold <span class=\"token operator\">/</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hop_size <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> hop_size <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>win_size <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>min_length <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> min_length <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>min_interval <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>min_interval <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>sr <span class=\"token operator\">*</span> max_sil_kept <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_apply_slice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> waveform<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> waveform<span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> begin <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size <span class=\"token punctuation\">:</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> waveform<span class=\"token punctuation\">[</span>\n                begin <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size <span class=\"token punctuation\">:</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>hop_size<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> waveform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            samples <span class=\"token operator\">=</span> waveform<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            samples <span class=\"token operator\">=</span> waveform\n\n        <span class=\"token keyword\">if</span> samples<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>min_length<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>waveform<span class=\"token punctuation\">]</span>\n\n        rms_list <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>feature<span class=\"token punctuation\">.</span>rms<span class=\"token punctuation\">(</span>\n            y<span class=\"token operator\">=</span>samples<span class=\"token punctuation\">,</span> frame_length<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>win_size<span class=\"token punctuation\">,</span> hop_length<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>hop_size\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        sil_tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        clip_start <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> rms <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>rms_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># Keep looping while frame is silent.</span>\n            <span class=\"token keyword\">if</span> rms <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># Record start of silent frames.</span>\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    silence_start <span class=\"token operator\">=</span> i\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Keep looping while frame is not silent and silence start has not been recorded.</span>\n            <span class=\"token keyword\">if</span> silence_start <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Clear recorded silence start if interval is not enough or clip is too short</span>\n            is_leading_silence <span class=\"token operator\">=</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> i <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>max_sil_kept\n            need_slice_middle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_interval\n                <span class=\"token keyword\">and</span> i <span class=\"token operator\">-</span> clip_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_length\n            <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_leading_silence <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> need_slice_middle<span class=\"token punctuation\">:</span>\n                silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># Need slicing. Record the range of silent frames to be removed.</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>max_sil_kept<span class=\"token punctuation\">:</span>\n                pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>silence_start <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> silence_start\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                clip_start <span class=\"token operator\">=</span> pos\n            <span class=\"token keyword\">elif</span> i <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>\n                    i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                pos <span class=\"token operator\">+=</span> i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                pos_l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>\n                        silence_start <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> silence_start\n                <span class=\"token punctuation\">)</span>\n                pos_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> i\n                    <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                <span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    clip_start <span class=\"token operator\">=</span> pos_r\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>pos_l<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>pos_r<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    clip_start <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>pos_r<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                pos_l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>\n                        silence_start <span class=\"token punctuation\">:</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> silence_start\n                <span class=\"token punctuation\">)</span>\n                pos_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    rms_list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept <span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> i\n                    <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>max_sil_kept\n                <span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> silence_start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos_l<span class=\"token punctuation\">,</span> pos_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                clip_start <span class=\"token operator\">=</span> pos_r\n            silence_start <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># Deal with trailing silence.</span>\n        total_frames <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            silence_start <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">and</span> total_frames <span class=\"token operator\">-</span> silence_start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>min_interval\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            silence_end <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>total_frames<span class=\"token punctuation\">,</span> silence_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>max_sil_kept<span class=\"token punctuation\">)</span>\n            pos <span class=\"token operator\">=</span> rms_list<span class=\"token punctuation\">[</span>silence_start <span class=\"token punctuation\">:</span> silence_end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> silence_start\n            sil_tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> total_frames <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Apply and return slices.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sil_tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>waveform<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sil_tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> total_frames<span class=\"token punctuation\">:</span>\n                chunks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>_apply_slice<span class=\"token punctuation\">(</span>waveform<span class=\"token punctuation\">,</span> sil_tags<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> total_frames<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> chunks\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_v2</span><span class=\"token punctuation\">(</span>\n    audio<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">,</span>\n    rate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Iterable<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Slice audio by silence\n\n    Args:\n        audio: audio data, in shape (samples, channels)\n        rate: sample rate\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n\n    Returns:\n        Iterable of sliced audio\n    \"\"\"</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> rate <span class=\"token operator\">&lt;</span> min_duration<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> slice_by_max_duration<span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\n    slicer <span class=\"token operator\">=</span> Slicer<span class=\"token punctuation\">(</span>\n        sr<span class=\"token operator\">=</span>rate<span class=\"token punctuation\">,</span>\n        threshold<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n        min_length<span class=\"token operator\">=</span>min_duration <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        min_interval<span class=\"token operator\">=</span>min_silence_duration <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        hop_size<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n        max_sil_kept<span class=\"token operator\">=</span>max_silence_kept <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> chunk <span class=\"token keyword\">in</span> slicer<span class=\"token punctuation\">.</span><span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> slice_by_max_duration<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> max_duration<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_file_v2</span><span class=\"token punctuation\">(</span>\n    input_file<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    output_dir<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Slice audio by silence and save to output folder\n\n    Args:\n        input_file: input audio file\n        output_dir: output folder\n        min_duration: minimum duration of each slice\n        max_duration: maximum duration of each slice\n        min_silence_duration: minimum duration of silence\n        top_db: threshold to detect silence\n        hop_length: hop length to detect silence\n        max_silence_kept: maximum duration of silence to be kept\n    \"\"\"</span>\n\n    output_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n    output_dir<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>parents<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    input_file_name <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem\n    audio<span class=\"token punctuation\">,</span> rate <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> mono<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> sliced <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>\n        slice_audio_v2<span class=\"token punctuation\">(</span>\n            audio<span class=\"token punctuation\">,</span>\n            rate<span class=\"token punctuation\">,</span>\n            min_duration<span class=\"token operator\">=</span>min_duration<span class=\"token punctuation\">,</span>\n            max_duration<span class=\"token operator\">=</span>max_duration<span class=\"token punctuation\">,</span>\n            min_silence_duration<span class=\"token operator\">=</span>min_silence_duration<span class=\"token punctuation\">,</span>\n            top_db<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n            hop_length<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n            max_silence_kept<span class=\"token operator\">=</span>max_silence_kept<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>output_dir <span class=\"token operator\">/</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>input_file_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>idx<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.wav\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sliced<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>1. </p>\n<ol start=\"2\">\n<li><p>*移除了merge_short参数**：原始代码中的<code>merge_short</code>参数用于控制是否自动合并短音频片段，我在修改后的代码中将其移除，以简化逻辑。</p>\n</li>\n<li><p><strong>修改了判定条件</strong>：我将原始代码中对于音频长度小于<code>min_duration</code>时的处理逻辑进行了修改。原先在这种情况下会执行合并短片段的操作，而我修改后则直接通过<code>slice_audio_v2</code>函数来裁剪音频，而不再合并或限制数量。</p>\n</li>\n<li><p><strong>删除了返回值</strong>：由于现在裁剪条目的数量不再有限制，所以在函数的最后不再需要返回<code>None</code>，因为函数会一直运行直到音频全部被处理完毕。</p>\n<p>二次修改</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">file_name_changes <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ncurrent_input_file_name <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\">#用于进行中文消除</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">slice_audio_file_v2</span><span class=\"token punctuation\">(</span>\n    input_file<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    output_dir<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    min_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span>\n    max_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n    min_silence_duration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>\n    top_db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    hop_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    max_silence_kept<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> file_name_changes\n    <span class=\"token keyword\">global</span> current_input_file_name\n\n    output_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n    output_dir<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>parents<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    input_file_name <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem\n\n    <span class=\"token keyword\">if</span> input_file_name <span class=\"token operator\">!=</span> current_input_file_name<span class=\"token punctuation\">:</span>\n        file_name_changes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        current_input_file_name <span class=\"token operator\">=</span> input_file_name\n\n    audio<span class=\"token punctuation\">,</span> rate <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> mono<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> sliced <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>\n        slice_audio_v2<span class=\"token punctuation\">(</span>\n            audio<span class=\"token punctuation\">,</span>\n            rate<span class=\"token punctuation\">,</span>\n            min_duration<span class=\"token operator\">=</span>min_duration<span class=\"token punctuation\">,</span>\n            max_duration<span class=\"token operator\">=</span>max_duration<span class=\"token punctuation\">,</span>\n            min_silence_duration<span class=\"token operator\">=</span>min_silence_duration<span class=\"token punctuation\">,</span>\n            top_db<span class=\"token operator\">=</span>top_db<span class=\"token punctuation\">,</span>\n            hop_length<span class=\"token operator\">=</span>hop_length<span class=\"token punctuation\">,</span>\n            max_silence_kept<span class=\"token operator\">=</span>max_silence_kept<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>output_dir <span class=\"token operator\">/</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>file_name_changes<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>idx<span class=\"token punctuation\">:</span><span class=\"token format-spec\">04d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.wav\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sliced<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span><span class=\"token comment\">#输出为对应人声干音的序号_切片在该干音的序号。</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>定义了一个全局变量，作用是对切片里的中文名进行处理，因为模型不允许中文输入。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> PyInstaller<span class=\"token punctuation\">.</span>__main__\n<span class=\"token keyword\">import</span> tkinter <span class=\"token keyword\">as</span> tk\n<span class=\"token keyword\">from</span> tkinter <span class=\"token keyword\">import</span> filedialog\n<span class=\"token keyword\">import</span> subprocess\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_bat_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    root <span class=\"token operator\">=</span> tk<span class=\"token punctuation\">.</span>Tk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    root<span class=\"token punctuation\">.</span>withdraw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    file_path <span class=\"token operator\">=</span> filedialog<span class=\"token punctuation\">.</span>askopenfilename<span class=\"token punctuation\">(</span>filetypes<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> file_path\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_python_script</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import subprocess\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import tkinter as tk\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'# 创建一个关闭cmd进程的函数\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def close_process():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.call(\"taskkill /f /im cmd.exe\", shell=True)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    exit()\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'# 创建GUI窗口\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'root = tk.Tk()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'root.title(\"关闭CMD进程\")\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'# 创建关闭按钮\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'button = tk.Button(root, text=\"关闭CMD进程\", command=close_process)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'button.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'# 使用subprocess调用BAT文件\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'subprocess.call([\"cmd\", \"/c\", \"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>bat_file<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"], shell=True)\\n'</span></span><span class=\"token punctuation\">)</span>\n\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'root.mainloop()\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_bat_to_exe</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    create_python_script<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    output_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    PyInstaller<span class=\"token punctuation\">.</span>__main__<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'--onefile'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># '--noconsole',  # 移除 --noconsole 参数</span>\n        <span class=\"token string\">'--distpath='</span> <span class=\"token operator\">+</span> output_dir<span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f'--name=</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_exe_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'temp_script.py'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件成功转换为EXE文件！\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    bat_file_path <span class=\"token operator\">=</span> select_bat_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> bat_file_path<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        output_exe_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入输出EXE文件的名称：\"</span><span class=\"token punctuation\">)</span>\n        convert_bat_to_exe<span class=\"token punctuation\">(</span>bat_file_path<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请勾选有效的BAT文件。\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>bat转exe方法</p>\n<p>待转bat如下</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">@<span class=\"token function\">echo</span> off\nchcp 65001\n<span class=\"token function\">echo</span> ================================ 稍等片刻，系统正在加载 ================================\n<span class=\"token function\">echo</span> =======================================================================================\n<span class=\"token function\">echo</span> ================================ <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>请勿关闭本窗口<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> ================================\n<span class=\"token function\">echo</span> =======================================================================================\n<span class=\"token function\">echo</span> ================================ <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>正在启动，即将自动跳转<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> ================================\n<span class=\"token punctuation\">.</span>\\env\\python<span class=\"token punctuation\">.</span>exe index<span class=\"token punctuation\">.</span>py\n\npause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>修改实现图形化窗口控制</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> PyInstaller<span class=\"token punctuation\">.</span>__main__\n<span class=\"token keyword\">import</span> tkinter <span class=\"token keyword\">as</span> tk\n<span class=\"token keyword\">from</span> tkinter <span class=\"token keyword\">import</span> filedialog\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> threading  <span class=\"token comment\"># 导入 threading 模块</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_bat_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    root <span class=\"token operator\">=</span> tk<span class=\"token punctuation\">.</span>Tk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    root<span class=\"token punctuation\">.</span>withdraw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    file_path <span class=\"token operator\">=</span> filedialog<span class=\"token punctuation\">.</span>askopenfilename<span class=\"token punctuation\">(</span>filetypes<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> file_path\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_python_script</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import subprocess\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import tkinter as tk\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import threading\\n\\n'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 导入 threading 模块</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def close_process():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.call([\"taskkill\", \"/F\", \"/T\", \"/IM\", \"cmd.exe\"], shell=True)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    exit()\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def run_bat(bat_file):\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    script = \"\"\"start /B cmd /c &#123;&#125;\\nexit\"\"\"\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个批处理脚本</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.Popen(script, shell=True)\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def create_window():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root = tk.Tk()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.title(\"关闭CMD进程\")\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button = tk.Button(root, text=\"关闭CMD进程\", command=close_process)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.mainloop()\\n'</span><span class=\"token punctuation\">)</span>\n\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'bat_file = r\"&#123;&#125;\"\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'threading.Thread(target=run_bat, args=(bat_file,)).start()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'create_window()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_bat_to_exe</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    create_python_script<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    output_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    PyInstaller<span class=\"token punctuation\">.</span>__main__<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'--onefile'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'--noconsole'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 移除 --noconsole 参数</span>\n        <span class=\"token string\">'--distpath='</span> <span class=\"token operator\">+</span> output_dir<span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f'--name=</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_exe_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'temp_script.py'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件成功转换为EXE文件！\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    bat_file_path <span class=\"token operator\">=</span> select_bat_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> bat_file_path<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        output_exe_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入输出EXE文件的名称：\"</span><span class=\"token punctuation\">)</span>\n        convert_bat_to_exe<span class=\"token punctuation\">(</span>bat_file_path<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请勾选有效的BAT文件。\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改实现输出与重启</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> PyInstaller<span class=\"token punctuation\">.</span>__main__\n<span class=\"token keyword\">import</span> tkinter <span class=\"token keyword\">as</span> tk\n<span class=\"token keyword\">from</span> tkinter <span class=\"token keyword\">import</span> filedialog\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> threading\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_bat_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建选择BAT文件的窗口</span>\n    root <span class=\"token operator\">=</span> tk<span class=\"token punctuation\">.</span>Tk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    root<span class=\"token punctuation\">.</span>withdraw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 弹出文件对话框并返回选择的BAT文件路径</span>\n    file_path <span class=\"token operator\">=</span> filedialog<span class=\"token punctuation\">.</span>askopenfilename<span class=\"token punctuation\">(</span>filetypes<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> file_path\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_python_script</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 写入Python脚本内容</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import subprocess\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import tkinter as tk\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'import threading\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 关闭进程的函数</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def close_process():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 调用系统命令杀死cmd进程\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.call([\"taskkill\", \"/F\", \"/T\", \"/IM\", \"cmd.exe\"], shell=True)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 修改状态标签显示文本\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    status_label.config(text=\"成功关闭 CMD 进程\")\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 10秒后清空状态标签\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.after(10000, clear_status)\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 重启cmd进程的函数</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def restart_cmd(bat_file):\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 修改状态标签显示文本\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    status_label.config(text=\"正在重启 CMD 进程...\")\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 执行BAT文件\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    run_bat(bat_file)\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 执行BAT文件的函数</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def run_bat(bat_file):\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 构建启动BAT文件的命令\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    script = \"\"\"start /B cmd /c &#123;&#125;\\nexit\"\"\"\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 使用subprocess启动新进程\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    subprocess.Popen(script, shell=True)\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 创建窗口的函数</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'def create_window():\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    global root\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    global status_label\\n'</span><span class=\"token punctuation\">)</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    # 创建主窗口\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root = tk.Tk()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.title(\"关闭和重启 CMD 进程\")\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 创建状态标签并放置在窗口中</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    status_label = tk.Label(root, text=\"\", pady=10)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    status_label.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建关闭按钮</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button_close = tk.Button(root, text=\"关闭 CMD 进程\", command=close_process)\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button_close.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建重启标签并放置在窗口中</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    restart_label = tk.Label(root, text=\"重新启动 CMD 进程\")\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    restart_label.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 创建重启按钮</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button_restart = tk.Button(root, text=\"重启 CMD\", command=lambda: restart_cmd(bat_file))\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    button_restart.pack()\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 运行窗口程序</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'    root.mainloop()\\n'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置BAT文件路径并启动线程执行BAT文件</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'bat_file = r\"&#123;&#125;\"\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'threading.Thread(target=run_bat, args=(bat_file,)).start()\\n'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'create_window()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">clear_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 清空状态标签的文本</span>\n    status_label<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_bat_to_exe</span><span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建Python脚本</span>\n    create_python_script<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 获取输出目录</span>\n    output_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>bat_file<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 使用PyInstaller转换为EXE文件</span>\n    PyInstaller<span class=\"token punctuation\">.</span>__main__<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'--onefile'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'--noconsole'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'--distpath='</span> <span class=\"token operator\">+</span> output_dir<span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f'--name=</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_exe_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'temp_script.py'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 删除临时Python脚本文件</span>\n    os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'temp_script.py'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BAT文件成功转换为EXE文件！\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 选择BAT文件</span>\n    bat_file_path <span class=\"token operator\">=</span> select_bat_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> bat_file_path<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".bat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 输入输出EXE文件的名称</span>\n        output_exe_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入输出EXE文件的名称：\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 转换BAT文件为EXE文件</span>\n        convert_bat_to_exe<span class=\"token punctuation\">(</span>bat_file_path<span class=\"token punctuation\">,</span> output_exe_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请勾选有效的BAT文件。\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"Hexo主题应用-代码框更改","date":"2024-05-26T16:40:24.000Z","top_img":"https://s21.ax1x.com/2024/05/20/pkKysN8.png","cover":"https://s21.ax1x.com/2024/05/20/pkKysN8.png","_content":"\n### 今天把博客的代码框换成了我个人更喜欢的类型\n\n使用的**prismjs**\n\n比起原来的**highlight**，我更喜欢它的**抬头显示 **就是那个巨大的**代码类型和开头的三个点**\n\n以下是二者成品的区别，前者为**prismjs**，后者为**highlight**\n\n![image-20240527004300870](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527004300870.png)\n\n![image-20240527004414551](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527004414551.png)\n\n\n\n### 检查hexo版本\n\n首先打开Git Bash（别问为什么不用CMD了，两个差不多，主要我之前出了个小乌龙，跑hexo用不了bash）\n\n~~**其实就是我之前本地有个node文本和node.exe重名导致bash以为那个文本文件是可执行文件**~~\n\nbash的命令偏向Linux，缺点是默认的cv没有快捷键\n\n进入我们的博客根目录（**记得/开头**）\n\n```shell\ncd /d/hexo/myblog\n```\n\n然后检查hexo版本，在本文发出之后安装的版本一般都>=7.2\n\n```shell\nhexo -v\n```\n\n\n\n![image-20240527005111914](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527005111914.png)\n\n\n\n为什么要检查hexo版本：\n\n因为在hexo官方文档中，7.0以后的hexo对**highlight**和**prismjs**的参数支持有区别。\n\n\n\n### 高亮代码框\n\n打开hexo根目录的配置文件\n\n找到**highlight**和**prismjs**对应的控件参数，它是在安装时默认生成的。\n\n![image-20240527005457369](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527005457369.png)\n\n\n\n如果版本为**7.0及以上**\n\n```yaml\nsyntax_highlighter: prismjs #修改为需要更换的代码渲染器类型，我选择的是prismjs，默认highlight.js\nhighlight:\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: true #在启用的渲染器之后添加enable参数，这是主题需要读取的\n  preprocess: true\n  line_number: true\n  line_threshold: 0\n  tab_replace: \"\"\n```\n\n**提醒**：如果你需要用highlight.js，那就在highlight下方添加enable: true参数。\n\n这个参数hexo文档中显示7.0及以后版本已经移除，但是安知鱼主题以及其他类似的采用了这两个代码渲染器的主题仍然需要读取这个参数才能调用主题的额外参数\n\n![image-20240527010039409](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527010039409.png)\n\n低于7.0的版本：\n\n```yaml\n# _config.yml\nhighlight:\n  enable: false\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  line_threshold: 0\n  tab_replace: ''\n```\n\n\n\n可以发现，早期版本和当前较新的版本存在一定的区别。\n\n早期版本需要全部设置enable参数，而新版本的原生hexo则不需要设置enable参数，但是主题配置文档需要接收enable参数，因此，需要将启用的代码块渲染器设置enable: true\n\n以下是我使用的主题和hexo代码高亮二者的官方文档，需要进一步钻研的小伙伴可以看看。\n\n[代码高亮 | Hexo](https://hexo.io/zh-cn/docs/syntax-highlight)\n\n[基础配置 | 安知鱼主题官方文档 (anheyu.com)](https://docs.anheyu.com/global/base.html)\n\n以上为Hexo原文档和安知鱼主题官方文档\n\n\n\n### 成果展示\n\n在安知鱼主题配置文件添加以下参数\n\n分别是：代码风格，复制功能，显示语言，自动折叠，代码限高和自动换行\n\n在上面的安知鱼文档内有详细说明，当然，以下配置可直接运行。\n\n```yaml\nhighlight_theme: mac #  darker / pale night / light / ocean / mac / mac light / false\nhighlight_copy: true # copy button\nhighlight_lang: true # show the code language\nhighlight_shrink: false # true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button\nhighlight_height_limit: 330 # unit: px\ncode_word_wrap: false\n```\n\n运行本地博客\n\n```shell\nhexo server\n```\n\n![image-20240527011030200](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527011030200.png)\n\n以上，可以看到我们的高级代码块了！！！\n\n\n\n### 总结\n\n这个折磨了我好长时间，当我写了一晚上的链表题目和题解之后，突发奇想，想要把代码块改成这种带复制功能并且圆角好看带高亮的形式时，我便去网上找各种文档和教程。\n\n之后就把重心放在了官方文档和主题官方文档是看。\n\n最终还是靠自己百炼成钢了，虽然不是什么很高技术力的东西，但是我调配置文件来来回回试了好几十次，从八点多开始，各种奇怪的代码块风格一致纠缠到了十二点多，最后终于发现，问题出在主题文件和hexo文件参数不对等上。\n\n改完参数跑出来的那一刻真的太开心了，博客也差不多焕然一新了。\n\n不过随着版本的更替，这个问题总有一天会得到改善的，咱们计算机还真是需要终身学习啊。\n\n对了，今天还学了一串新的git命令\n\n```shell\ngit log #查看各版本日志\ngit reset --hard HEAD^ #回退到最新版本\ngit reset --hard hash #回退到对应hash值版本\n```\n\n\n\n**云中谁寄锦书来，雁字回时，月满西楼**。\n\n$愿各位都能成为生活的高手。$\n\n**那么各位，晚安。**\n\n","source":"_posts/Hexo主题应用-代码框更改.md","raw":"---\ntitle: Hexo主题应用-代码框更改\ndate: 2024-05-27 00:40:24\ntags: [Hexo,git]\ncategories: 开发教程\ntop_img: https://s21.ax1x.com/2024/05/20/pkKysN8.png\ncover: https://s21.ax1x.com/2024/05/20/pkKysN8.png\n---\n\n### 今天把博客的代码框换成了我个人更喜欢的类型\n\n使用的**prismjs**\n\n比起原来的**highlight**，我更喜欢它的**抬头显示 **就是那个巨大的**代码类型和开头的三个点**\n\n以下是二者成品的区别，前者为**prismjs**，后者为**highlight**\n\n![image-20240527004300870](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527004300870.png)\n\n![image-20240527004414551](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527004414551.png)\n\n\n\n### 检查hexo版本\n\n首先打开Git Bash（别问为什么不用CMD了，两个差不多，主要我之前出了个小乌龙，跑hexo用不了bash）\n\n~~**其实就是我之前本地有个node文本和node.exe重名导致bash以为那个文本文件是可执行文件**~~\n\nbash的命令偏向Linux，缺点是默认的cv没有快捷键\n\n进入我们的博客根目录（**记得/开头**）\n\n```shell\ncd /d/hexo/myblog\n```\n\n然后检查hexo版本，在本文发出之后安装的版本一般都>=7.2\n\n```shell\nhexo -v\n```\n\n\n\n![image-20240527005111914](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527005111914.png)\n\n\n\n为什么要检查hexo版本：\n\n因为在hexo官方文档中，7.0以后的hexo对**highlight**和**prismjs**的参数支持有区别。\n\n\n\n### 高亮代码框\n\n打开hexo根目录的配置文件\n\n找到**highlight**和**prismjs**对应的控件参数，它是在安装时默认生成的。\n\n![image-20240527005457369](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527005457369.png)\n\n\n\n如果版本为**7.0及以上**\n\n```yaml\nsyntax_highlighter: prismjs #修改为需要更换的代码渲染器类型，我选择的是prismjs，默认highlight.js\nhighlight:\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: true #在启用的渲染器之后添加enable参数，这是主题需要读取的\n  preprocess: true\n  line_number: true\n  line_threshold: 0\n  tab_replace: \"\"\n```\n\n**提醒**：如果你需要用highlight.js，那就在highlight下方添加enable: true参数。\n\n这个参数hexo文档中显示7.0及以后版本已经移除，但是安知鱼主题以及其他类似的采用了这两个代码渲染器的主题仍然需要读取这个参数才能调用主题的额外参数\n\n![image-20240527010039409](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527010039409.png)\n\n低于7.0的版本：\n\n```yaml\n# _config.yml\nhighlight:\n  enable: false\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  line_threshold: 0\n  tab_replace: ''\n```\n\n\n\n可以发现，早期版本和当前较新的版本存在一定的区别。\n\n早期版本需要全部设置enable参数，而新版本的原生hexo则不需要设置enable参数，但是主题配置文档需要接收enable参数，因此，需要将启用的代码块渲染器设置enable: true\n\n以下是我使用的主题和hexo代码高亮二者的官方文档，需要进一步钻研的小伙伴可以看看。\n\n[代码高亮 | Hexo](https://hexo.io/zh-cn/docs/syntax-highlight)\n\n[基础配置 | 安知鱼主题官方文档 (anheyu.com)](https://docs.anheyu.com/global/base.html)\n\n以上为Hexo原文档和安知鱼主题官方文档\n\n\n\n### 成果展示\n\n在安知鱼主题配置文件添加以下参数\n\n分别是：代码风格，复制功能，显示语言，自动折叠，代码限高和自动换行\n\n在上面的安知鱼文档内有详细说明，当然，以下配置可直接运行。\n\n```yaml\nhighlight_theme: mac #  darker / pale night / light / ocean / mac / mac light / false\nhighlight_copy: true # copy button\nhighlight_lang: true # show the code language\nhighlight_shrink: false # true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button\nhighlight_height_limit: 330 # unit: px\ncode_word_wrap: false\n```\n\n运行本地博客\n\n```shell\nhexo server\n```\n\n![image-20240527011030200](https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527011030200.png)\n\n以上，可以看到我们的高级代码块了！！！\n\n\n\n### 总结\n\n这个折磨了我好长时间，当我写了一晚上的链表题目和题解之后，突发奇想，想要把代码块改成这种带复制功能并且圆角好看带高亮的形式时，我便去网上找各种文档和教程。\n\n之后就把重心放在了官方文档和主题官方文档是看。\n\n最终还是靠自己百炼成钢了，虽然不是什么很高技术力的东西，但是我调配置文件来来回回试了好几十次，从八点多开始，各种奇怪的代码块风格一致纠缠到了十二点多，最后终于发现，问题出在主题文件和hexo文件参数不对等上。\n\n改完参数跑出来的那一刻真的太开心了，博客也差不多焕然一新了。\n\n不过随着版本的更替，这个问题总有一天会得到改善的，咱们计算机还真是需要终身学习啊。\n\n对了，今天还学了一串新的git命令\n\n```shell\ngit log #查看各版本日志\ngit reset --hard HEAD^ #回退到最新版本\ngit reset --hard hash #回退到对应hash值版本\n```\n\n\n\n**云中谁寄锦书来，雁字回时，月满西楼**。\n\n$愿各位都能成为生活的高手。$\n\n**那么各位，晚安。**\n\n","slug":"Hexo主题应用-代码框更改","published":1,"updated":"2024-05-26T17:30:56.101Z","_id":"clwnrn3ie00003gw5egof6kaz","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"今天把博客的代码框换成了我个人更喜欢的类型\"><a href=\"#今天把博客的代码框换成了我个人更喜欢的类型\" class=\"headerlink\" title=\"今天把博客的代码框换成了我个人更喜欢的类型\"></a>今天把博客的代码框换成了我个人更喜欢的类型</h3><p>使用的<strong>prismjs</strong></p>\n<p>比起原来的<strong>highlight</strong>，我更喜欢它的<strong>抬头显示 <strong>就是那个巨大的</strong>代码类型和开头的三个点</strong></p>\n<p>以下是二者成品的区别，前者为<strong>prismjs</strong>，后者为<strong>highlight</strong></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527004300870.png\" alt=\"image-20240527004300870\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527004414551.png\" alt=\"image-20240527004414551\"></p>\n<h3 id=\"检查hexo版本\"><a href=\"#检查hexo版本\" class=\"headerlink\" title=\"检查hexo版本\"></a>检查hexo版本</h3><p>首先打开Git Bash（别问为什么不用CMD了，两个差不多，主要我之前出了个小乌龙，跑hexo用不了bash）</p>\n<p><del><strong>其实就是我之前本地有个node文本和node.exe重名导致bash以为那个文本文件是可执行文件</strong></del></p>\n<p>bash的命令偏向Linux，缺点是默认的cv没有快捷键</p>\n<p>进入我们的博客根目录（<strong>记得&#x2F;开头</strong>）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /d/hexo/myblog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后检查hexo版本，在本文发出之后安装的版本一般都&gt;&#x3D;7.2</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527005111914.png\" alt=\"image-20240527005111914\"></p>\n<p>为什么要检查hexo版本：</p>\n<p>因为在hexo官方文档中，7.0以后的hexo对<strong>highlight</strong>和<strong>prismjs</strong>的参数支持有区别。</p>\n<h3 id=\"高亮代码框\"><a href=\"#高亮代码框\" class=\"headerlink\" title=\"高亮代码框\"></a>高亮代码框</h3><p>打开hexo根目录的配置文件</p>\n<p>找到<strong>highlight</strong>和<strong>prismjs</strong>对应的控件参数，它是在安装时默认生成的。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527005457369.png\" alt=\"image-20240527005457369\"></p>\n<p>如果版本为<strong>7.0及以上</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">syntax_highlighter</span><span class=\"token punctuation\">:</span> prismjs <span class=\"token comment\">#修改为需要更换的代码渲染器类型，我选择的是prismjs，默认highlight.js</span>\n<span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token key atrule\">wrap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">hljs</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#在启用的渲染器之后添加enable参数，这是主题需要读取的</span>\n  <span class=\"token key atrule\">preprocess</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_threshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提醒</strong>：如果你需要用highlight.js，那就在highlight下方添加enable: true参数。</p>\n<p>这个参数hexo文档中显示7.0及以后版本已经移除，但是安知鱼主题以及其他类似的采用了这两个代码渲染器的主题仍然需要读取这个参数才能调用主题的额外参数</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527010039409.png\" alt=\"image-20240527010039409\"></p>\n<p>低于7.0的版本：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># _config.yml</span>\n<span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">preprocess</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_threshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>可以发现，早期版本和当前较新的版本存在一定的区别。</p>\n<p>早期版本需要全部设置enable参数，而新版本的原生hexo则不需要设置enable参数，但是主题配置文档需要接收enable参数，因此，需要将启用的代码块渲染器设置enable: true</p>\n<p>以下是我使用的主题和hexo代码高亮二者的官方文档，需要进一步钻研的小伙伴可以看看。</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/syntax-highlight\">代码高亮 | Hexo</a></p>\n<p><a href=\"https://docs.anheyu.com/global/base.html\">基础配置 | 安知鱼主题官方文档 (anheyu.com)</a></p>\n<p>以上为Hexo原文档和安知鱼主题官方文档</p>\n<h3 id=\"成果展示\"><a href=\"#成果展示\" class=\"headerlink\" title=\"成果展示\"></a>成果展示</h3><p>在安知鱼主题配置文件添加以下参数</p>\n<p>分别是：代码风格，复制功能，显示语言，自动折叠，代码限高和自动换行</p>\n<p>在上面的安知鱼文档内有详细说明，当然，以下配置可直接运行。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">highlight_theme</span><span class=\"token punctuation\">:</span> mac <span class=\"token comment\">#  darker / pale night / light / ocean / mac / mac light / false</span>\n<span class=\"token key atrule\">highlight_copy</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># copy button</span>\n<span class=\"token key atrule\">highlight_lang</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># show the code language</span>\n<span class=\"token key atrule\">highlight_shrink</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span>\n<span class=\"token key atrule\">highlight_height_limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">330</span> <span class=\"token comment\"># unit: px</span>\n<span class=\"token key atrule\">code_word_wrap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行本地博客</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527011030200.png\" alt=\"image-20240527011030200\"></p>\n<p>以上，可以看到我们的高级代码块了！！！</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这个折磨了我好长时间，当我写了一晚上的链表题目和题解之后，突发奇想，想要把代码块改成这种带复制功能并且圆角好看带高亮的形式时，我便去网上找各种文档和教程。</p>\n<p>之后就把重心放在了官方文档和主题官方文档是看。</p>\n<p>最终还是靠自己百炼成钢了，虽然不是什么很高技术力的东西，但是我调配置文件来来回回试了好几十次，从八点多开始，各种奇怪的代码块风格一致纠缠到了十二点多，最后终于发现，问题出在主题文件和hexo文件参数不对等上。</p>\n<p>改完参数跑出来的那一刻真的太开心了，博客也差不多焕然一新了。</p>\n<p>不过随着版本的更替，这个问题总有一天会得到改善的，咱们计算机还真是需要终身学习啊。</p>\n<p>对了，今天还学了一串新的git命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log <span class=\"token comment\">#查看各版本日志</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD^ <span class=\"token comment\">#回退到最新版本</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> <span class=\"token builtin class-name\">hash</span> <span class=\"token comment\">#回退到对应hash值版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>云中谁寄锦书来，雁字回时，月满西楼</strong>。</p>\n<p>$愿各位都能成为生活的高手。$</p>\n<p><strong>那么各位，晚安。</strong></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"今天把博客的代码框换成了我个人更喜欢的类型\"><a href=\"#今天把博客的代码框换成了我个人更喜欢的类型\" class=\"headerlink\" title=\"今天把博客的代码框换成了我个人更喜欢的类型\"></a>今天把博客的代码框换成了我个人更喜欢的类型</h3><p>使用的<strong>prismjs</strong></p>\n<p>比起原来的<strong>highlight</strong>，我更喜欢它的<strong>抬头显示 <strong>就是那个巨大的</strong>代码类型和开头的三个点</strong></p>\n<p>以下是二者成品的区别，前者为<strong>prismjs</strong>，后者为<strong>highlight</strong></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527004300870.png\" alt=\"image-20240527004300870\"></p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527004414551.png\" alt=\"image-20240527004414551\"></p>\n<h3 id=\"检查hexo版本\"><a href=\"#检查hexo版本\" class=\"headerlink\" title=\"检查hexo版本\"></a>检查hexo版本</h3><p>首先打开Git Bash（别问为什么不用CMD了，两个差不多，主要我之前出了个小乌龙，跑hexo用不了bash）</p>\n<p><del><strong>其实就是我之前本地有个node文本和node.exe重名导致bash以为那个文本文件是可执行文件</strong></del></p>\n<p>bash的命令偏向Linux，缺点是默认的cv没有快捷键</p>\n<p>进入我们的博客根目录（<strong>记得&#x2F;开头</strong>）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /d/hexo/myblog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后检查hexo版本，在本文发出之后安装的版本一般都&gt;&#x3D;7.2</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527005111914.png\" alt=\"image-20240527005111914\"></p>\n<p>为什么要检查hexo版本：</p>\n<p>因为在hexo官方文档中，7.0以后的hexo对<strong>highlight</strong>和<strong>prismjs</strong>的参数支持有区别。</p>\n<h3 id=\"高亮代码框\"><a href=\"#高亮代码框\" class=\"headerlink\" title=\"高亮代码框\"></a>高亮代码框</h3><p>打开hexo根目录的配置文件</p>\n<p>找到<strong>highlight</strong>和<strong>prismjs</strong>对应的控件参数，它是在安装时默认生成的。</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527005457369.png\" alt=\"image-20240527005457369\"></p>\n<p>如果版本为<strong>7.0及以上</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">syntax_highlighter</span><span class=\"token punctuation\">:</span> prismjs <span class=\"token comment\">#修改为需要更换的代码渲染器类型，我选择的是prismjs，默认highlight.js</span>\n<span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token key atrule\">wrap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">hljs</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#在启用的渲染器之后添加enable参数，这是主题需要读取的</span>\n  <span class=\"token key atrule\">preprocess</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_threshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提醒</strong>：如果你需要用highlight.js，那就在highlight下方添加enable: true参数。</p>\n<p>这个参数hexo文档中显示7.0及以后版本已经移除，但是安知鱼主题以及其他类似的采用了这两个代码渲染器的主题仍然需要读取这个参数才能调用主题的额外参数</p>\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527010039409.png\" alt=\"image-20240527010039409\"></p>\n<p>低于7.0的版本：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># _config.yml</span>\n<span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">preprocess</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_threshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>可以发现，早期版本和当前较新的版本存在一定的区别。</p>\n<p>早期版本需要全部设置enable参数，而新版本的原生hexo则不需要设置enable参数，但是主题配置文档需要接收enable参数，因此，需要将启用的代码块渲染器设置enable: true</p>\n<p>以下是我使用的主题和hexo代码高亮二者的官方文档，需要进一步钻研的小伙伴可以看看。</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/syntax-highlight\">代码高亮 | Hexo</a></p>\n<p><a href=\"https://docs.anheyu.com/global/base.html\">基础配置 | 安知鱼主题官方文档 (anheyu.com)</a></p>\n<p>以上为Hexo原文档和安知鱼主题官方文档</p>\n<h3 id=\"成果展示\"><a href=\"#成果展示\" class=\"headerlink\" title=\"成果展示\"></a>成果展示</h3><p>在安知鱼主题配置文件添加以下参数</p>\n<p>分别是：代码风格，复制功能，显示语言，自动折叠，代码限高和自动换行</p>\n<p>在上面的安知鱼文档内有详细说明，当然，以下配置可直接运行。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">highlight_theme</span><span class=\"token punctuation\">:</span> mac <span class=\"token comment\">#  darker / pale night / light / ocean / mac / mac light / false</span>\n<span class=\"token key atrule\">highlight_copy</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># copy button</span>\n<span class=\"token key atrule\">highlight_lang</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># show the code language</span>\n<span class=\"token key atrule\">highlight_shrink</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span>\n<span class=\"token key atrule\">highlight_height_limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">330</span> <span class=\"token comment\"># unit: px</span>\n<span class=\"token key atrule\">code_word_wrap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行本地博客</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://jsdelivr.codeqihan.com/gh/Aaaou/Blog-hexo/source/_posts/imgs/imgimage-20240527011030200.png\" alt=\"image-20240527011030200\"></p>\n<p>以上，可以看到我们的高级代码块了！！！</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这个折磨了我好长时间，当我写了一晚上的链表题目和题解之后，突发奇想，想要把代码块改成这种带复制功能并且圆角好看带高亮的形式时，我便去网上找各种文档和教程。</p>\n<p>之后就把重心放在了官方文档和主题官方文档是看。</p>\n<p>最终还是靠自己百炼成钢了，虽然不是什么很高技术力的东西，但是我调配置文件来来回回试了好几十次，从八点多开始，各种奇怪的代码块风格一致纠缠到了十二点多，最后终于发现，问题出在主题文件和hexo文件参数不对等上。</p>\n<p>改完参数跑出来的那一刻真的太开心了，博客也差不多焕然一新了。</p>\n<p>不过随着版本的更替，这个问题总有一天会得到改善的，咱们计算机还真是需要终身学习啊。</p>\n<p>对了，今天还学了一串新的git命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log <span class=\"token comment\">#查看各版本日志</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD^ <span class=\"token comment\">#回退到最新版本</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> <span class=\"token builtin class-name\">hash</span> <span class=\"token comment\">#回退到对应hash值版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>云中谁寄锦书来，雁字回时，月满西楼</strong>。</p>\n<p>$愿各位都能成为生活的高手。$</p>\n<p><strong>那么各位，晚安。</strong></p>\n"},{"title":"LangChain部署与调用ChatGLM","date":"2024-05-29T06:55:56.000Z","top_img":"https://s21.ax1x.com/2024/05/20/pkKyVtU.png","cover":"https://s21.ax1x.com/2024/05/20/pkKyVtU.png","_content":"\n## 本文作为阿里云部署LangChain的存根记录\n\n### 仓库配置\n\n```shell\npip install langchain==0.0.354\n```\n\n库文件有点多，应该要花上五分钟。\n\n![image-20240529150225833](LangChain部署与调用ChatGLM.assets/image-20240529150225833-17169796253861.png)\n\n有一些兼容性报错，可以先忽略。\n\n**克隆仓库**\n\n```shell\ngit clone https://github.com/chatchat-space/Langchain-Chatchat.git\ncd Langchain-Chatchat\n```\n\n由于之前安装过LLama-Factory和ChatGLM3-6B，我打算先进行配置文件的配置，再看看环境安装有什么问题。\n\n展开配置文件\n\n```shell\npython copy_config_example.py\n```\n\n然后在项目根目录的config文件夹底下就多出了几个py文件，之后我们在可视化界面进入model_config.py\n\n把auto改成cuda，默认使用gpu计算\n\n![image-20240529151251227](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529151251227.png)\n\n之后下滑，找到我们的GLM3-6B路径，改成本地的\n\n```python\n/mnt/workspace/models/chatglm3-6b\n```\n\n### 虚拟环境安装\n\n发现没法直接运行，缺环境，但是为了防止langchain的依赖于我本地的两个项目冲突，重装miniconda并且创建新环境。\n\n```shell\ncd - \n#/mnt/workspace 回到根目录\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh\n\n```\n\n一路回车+yes\n\n```shell\n. ~/.bashrc\n#/usr/bin/sh: 13: /root/.bashrc: shopt: not found\n#/usr/bin/sh: 21: /root/.bashrc: shopt: not found\n#(base) \\[\\e]0;\\u@\\h: \\w\\a\\]\\u@\\h:\\w$ \n```\n\n阿里云这个AI平台激活conda的base环境命令和别的服务器有些区别，腾讯或者其他的有以下激活方式：\n\n```shell\nbash ~/.bashrc\n#或者\nsource ~/.bashrc\n```\n\n创建虚拟环境并且激活\n\n```shell\nconda create -n langchain python==3.11\nconda activate langchain\n```\n\n![image-20240529153001210](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529153001210.png)\n\n```shell\ncd ../..\ncd mnt/workspace/Langchain-Chatchat\npip install transformers==4.37.2\npip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118\npip install -r requirements.txt\npip install -r requirements_api.txt\npip install -r requirements_webui.txt\n```\n\n\n\n### 运行模型\n\n我就不信这还不能跑\n\n```shell\npython startup.py -a\n```\n\n![image-20240529154655651](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529154655651.png)\n\n![image-20240529161128515](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529161128515.png)\n\n![image-20240529161438688](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529161438688.png)\n\n\n\n### 添加新模型-Lora\n\n首先到Llama-Factory导出我之前训练的Lora模型，大小大约在15GB左右，因此记得看看自己的硬盘空间\n\n况且，导出建议使用cpu导出，不然会出现阿里云服务器GPU核未初始化的问题\n\n![image-20240529163425409](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163425409.png)\n\n![image-20240529163339254](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163339254.png)\n\n之后修改对应的配置文件\n\n![image-20240529163528086](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163528086.png)\n\n![image-20240529163514672](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163514672.png)\n\n先剪切掉模型配置的\"chatglm3-6b\",因为langchain会试图同时加载两个模型，显存会爆。\n\n```shell\n. ~/.bashrc\nconda activate langchain\ncd ../\ncd mnt/workspace/Langchain-Chatchat\npython startup.py -a\n```\n\n\n\n![image-20240529164340292](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529164340292.png)\n\n\n\n### 总结\n\n这次实践完成了langchain的部署和模型的配置，当然，langchain提供的额外的功能和知识库功能我暂时还不清楚用途，慢慢来吧。\n","source":"_posts/LangChain部署与调用ChatGLM.md","raw":"---\ntitle: LangChain部署与调用ChatGLM\ndate: 2024-05-29 14:55:56\ntags: LLM \ncategories: 开发教程\ntop_img: https://s21.ax1x.com/2024/05/20/pkKyVtU.png\ncover: https://s21.ax1x.com/2024/05/20/pkKyVtU.png\n---\n\n## 本文作为阿里云部署LangChain的存根记录\n\n### 仓库配置\n\n```shell\npip install langchain==0.0.354\n```\n\n库文件有点多，应该要花上五分钟。\n\n![image-20240529150225833](LangChain部署与调用ChatGLM.assets/image-20240529150225833-17169796253861.png)\n\n有一些兼容性报错，可以先忽略。\n\n**克隆仓库**\n\n```shell\ngit clone https://github.com/chatchat-space/Langchain-Chatchat.git\ncd Langchain-Chatchat\n```\n\n由于之前安装过LLama-Factory和ChatGLM3-6B，我打算先进行配置文件的配置，再看看环境安装有什么问题。\n\n展开配置文件\n\n```shell\npython copy_config_example.py\n```\n\n然后在项目根目录的config文件夹底下就多出了几个py文件，之后我们在可视化界面进入model_config.py\n\n把auto改成cuda，默认使用gpu计算\n\n![image-20240529151251227](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529151251227.png)\n\n之后下滑，找到我们的GLM3-6B路径，改成本地的\n\n```python\n/mnt/workspace/models/chatglm3-6b\n```\n\n### 虚拟环境安装\n\n发现没法直接运行，缺环境，但是为了防止langchain的依赖于我本地的两个项目冲突，重装miniconda并且创建新环境。\n\n```shell\ncd - \n#/mnt/workspace 回到根目录\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh\n\n```\n\n一路回车+yes\n\n```shell\n. ~/.bashrc\n#/usr/bin/sh: 13: /root/.bashrc: shopt: not found\n#/usr/bin/sh: 21: /root/.bashrc: shopt: not found\n#(base) \\[\\e]0;\\u@\\h: \\w\\a\\]\\u@\\h:\\w$ \n```\n\n阿里云这个AI平台激活conda的base环境命令和别的服务器有些区别，腾讯或者其他的有以下激活方式：\n\n```shell\nbash ~/.bashrc\n#或者\nsource ~/.bashrc\n```\n\n创建虚拟环境并且激活\n\n```shell\nconda create -n langchain python==3.11\nconda activate langchain\n```\n\n![image-20240529153001210](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529153001210.png)\n\n```shell\ncd ../..\ncd mnt/workspace/Langchain-Chatchat\npip install transformers==4.37.2\npip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118\npip install -r requirements.txt\npip install -r requirements_api.txt\npip install -r requirements_webui.txt\n```\n\n\n\n### 运行模型\n\n我就不信这还不能跑\n\n```shell\npython startup.py -a\n```\n\n![image-20240529154655651](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529154655651.png)\n\n![image-20240529161128515](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529161128515.png)\n\n![image-20240529161438688](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529161438688.png)\n\n\n\n### 添加新模型-Lora\n\n首先到Llama-Factory导出我之前训练的Lora模型，大小大约在15GB左右，因此记得看看自己的硬盘空间\n\n况且，导出建议使用cpu导出，不然会出现阿里云服务器GPU核未初始化的问题\n\n![image-20240529163425409](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163425409.png)\n\n![image-20240529163339254](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163339254.png)\n\n之后修改对应的配置文件\n\n![image-20240529163528086](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163528086.png)\n\n![image-20240529163514672](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163514672.png)\n\n先剪切掉模型配置的\"chatglm3-6b\",因为langchain会试图同时加载两个模型，显存会爆。\n\n```shell\n. ~/.bashrc\nconda activate langchain\ncd ../\ncd mnt/workspace/Langchain-Chatchat\npython startup.py -a\n```\n\n\n\n![image-20240529164340292](https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529164340292.png)\n\n\n\n### 总结\n\n这次实践完成了langchain的部署和模型的配置，当然，langchain提供的额外的功能和知识库功能我暂时还不清楚用途，慢慢来吧。\n","slug":"LangChain部署与调用ChatGLM","published":1,"updated":"2024-05-29T10:47:15.383Z","_id":"clwrntp8d0000y0w5fqrpfdqo","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"本文作为阿里云部署LangChain的存根记录\"><a href=\"#本文作为阿里云部署LangChain的存根记录\" class=\"headerlink\" title=\"本文作为阿里云部署LangChain的存根记录\"></a>本文作为阿里云部署LangChain的存根记录</h2><h3 id=\"仓库配置\"><a href=\"#仓库配置\" class=\"headerlink\" title=\"仓库配置\"></a>仓库配置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">langchain</span><span class=\"token operator\">==</span><span class=\"token number\">0.0</span>.354<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>库文件有点多，应该要花上五分钟。</p>\n<p><img src=\"/LangChain%E9%83%A8%E7%BD%B2%E4%B8%8E%E8%B0%83%E7%94%A8ChatGLM.assets/image-20240529150225833-17169796253861.png\" alt=\"image-20240529150225833\"></p>\n<p>有一些兼容性报错，可以先忽略。</p>\n<p><strong>克隆仓库</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/chatchat-space/Langchain-Chatchat.git\n<span class=\"token builtin class-name\">cd</span> Langchain-Chatchat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>由于之前安装过LLama-Factory和ChatGLM3-6B，我打算先进行配置文件的配置，再看看环境安装有什么问题。</p>\n<p>展开配置文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python copy_config_example.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后在项目根目录的config文件夹底下就多出了几个py文件，之后我们在可视化界面进入model_config.py</p>\n<p>把auto改成cuda，默认使用gpu计算</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529151251227.png\" alt=\"image-20240529151251227\"></p>\n<p>之后下滑，找到我们的GLM3-6B路径，改成本地的</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span>workspace<span class=\"token operator\">/</span>models<span class=\"token operator\">/</span>chatglm3<span class=\"token operator\">-</span>6b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"虚拟环境安装\"><a href=\"#虚拟环境安装\" class=\"headerlink\" title=\"虚拟环境安装\"></a>虚拟环境安装</h3><p>发现没法直接运行，缺环境，但是为了防止langchain的依赖于我本地的两个项目冲突，重装miniconda并且创建新环境。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> - \n<span class=\"token comment\">#/mnt/workspace 回到根目录</span>\n<span class=\"token function\">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n<span class=\"token function\">bash</span> Miniconda3-latest-Linux-x86_64.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一路回车+yes</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span> ~/.bashrc\n<span class=\"token comment\">#/usr/bin/sh: 13: /root/.bashrc: shopt: not found</span>\n<span class=\"token comment\">#/usr/bin/sh: 21: /root/.bashrc: shopt: not found</span>\n<span class=\"token comment\">#(base) \\[\\e]0;\\u@\\h: \\w\\a\\]\\u@\\h:\\w$ </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>阿里云这个AI平台激活conda的base环境命令和别的服务器有些区别，腾讯或者其他的有以下激活方式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> ~/.bashrc\n<span class=\"token comment\">#或者</span>\n<span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>创建虚拟环境并且激活</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> langchain <span class=\"token assign-left variable\">python</span><span class=\"token operator\">==</span><span class=\"token number\">3.11</span>\nconda activate langchain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529153001210.png\" alt=\"image-20240529153001210\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n<span class=\"token builtin class-name\">cd</span> mnt/workspace/Langchain-Chatchat\npip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">transformers</span><span class=\"token operator\">==</span><span class=\"token number\">4.37</span>.2\npip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">torch</span><span class=\"token operator\">==</span><span class=\"token number\">2.1</span>.0 <span class=\"token assign-left variable\">torchvision</span><span class=\"token operator\">==</span><span class=\"token number\">0.16</span>.0 <span class=\"token assign-left variable\">torchaudio</span><span class=\"token operator\">==</span><span class=\"token number\">2.1</span>.0 --index-url https://download.pytorch.org/whl/cu118\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements_api.txt\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements_webui.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"运行模型\"><a href=\"#运行模型\" class=\"headerlink\" title=\"运行模型\"></a>运行模型</h3><p>我就不信这还不能跑</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python startup.py <span class=\"token parameter variable\">-a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529154655651.png\" alt=\"image-20240529154655651\"></p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529161128515.png\" alt=\"image-20240529161128515\"></p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529161438688.png\" alt=\"image-20240529161438688\"></p>\n<h3 id=\"添加新模型-Lora\"><a href=\"#添加新模型-Lora\" class=\"headerlink\" title=\"添加新模型-Lora\"></a>添加新模型-Lora</h3><p>首先到Llama-Factory导出我之前训练的Lora模型，大小大约在15GB左右，因此记得看看自己的硬盘空间</p>\n<p>况且，导出建议使用cpu导出，不然会出现阿里云服务器GPU核未初始化的问题</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163425409.png\" alt=\"image-20240529163425409\"></p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163339254.png\" alt=\"image-20240529163339254\"></p>\n<p>之后修改对应的配置文件</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163528086.png\" alt=\"image-20240529163528086\"></p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163514672.png\" alt=\"image-20240529163514672\"></p>\n<p>先剪切掉模型配置的”chatglm3-6b”,因为langchain会试图同时加载两个模型，显存会爆。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span> ~/.bashrc\nconda activate langchain\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/\n<span class=\"token builtin class-name\">cd</span> mnt/workspace/Langchain-Chatchat\npython startup.py <span class=\"token parameter variable\">-a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529164340292.png\" alt=\"image-20240529164340292\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这次实践完成了langchain的部署和模型的配置，当然，langchain提供的额外的功能和知识库功能我暂时还不清楚用途，慢慢来吧。</p>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"本文作为阿里云部署LangChain的存根记录\"><a href=\"#本文作为阿里云部署LangChain的存根记录\" class=\"headerlink\" title=\"本文作为阿里云部署LangChain的存根记录\"></a>本文作为阿里云部署LangChain的存根记录</h2><h3 id=\"仓库配置\"><a href=\"#仓库配置\" class=\"headerlink\" title=\"仓库配置\"></a>仓库配置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">langchain</span><span class=\"token operator\">==</span><span class=\"token number\">0.0</span>.354<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>库文件有点多，应该要花上五分钟。</p>\n<p><img src=\"/LangChain%E9%83%A8%E7%BD%B2%E4%B8%8E%E8%B0%83%E7%94%A8ChatGLM.assets/image-20240529150225833-17169796253861.png\" alt=\"image-20240529150225833\"></p>\n<p>有一些兼容性报错，可以先忽略。</p>\n<p><strong>克隆仓库</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/chatchat-space/Langchain-Chatchat.git\n<span class=\"token builtin class-name\">cd</span> Langchain-Chatchat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>由于之前安装过LLama-Factory和ChatGLM3-6B，我打算先进行配置文件的配置，再看看环境安装有什么问题。</p>\n<p>展开配置文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python copy_config_example.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后在项目根目录的config文件夹底下就多出了几个py文件，之后我们在可视化界面进入model_config.py</p>\n<p>把auto改成cuda，默认使用gpu计算</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529151251227.png\" alt=\"image-20240529151251227\"></p>\n<p>之后下滑，找到我们的GLM3-6B路径，改成本地的</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span>workspace<span class=\"token operator\">/</span>models<span class=\"token operator\">/</span>chatglm3<span class=\"token operator\">-</span>6b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"虚拟环境安装\"><a href=\"#虚拟环境安装\" class=\"headerlink\" title=\"虚拟环境安装\"></a>虚拟环境安装</h3><p>发现没法直接运行，缺环境，但是为了防止langchain的依赖于我本地的两个项目冲突，重装miniconda并且创建新环境。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> - \n<span class=\"token comment\">#/mnt/workspace 回到根目录</span>\n<span class=\"token function\">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n<span class=\"token function\">bash</span> Miniconda3-latest-Linux-x86_64.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一路回车+yes</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span> ~/.bashrc\n<span class=\"token comment\">#/usr/bin/sh: 13: /root/.bashrc: shopt: not found</span>\n<span class=\"token comment\">#/usr/bin/sh: 21: /root/.bashrc: shopt: not found</span>\n<span class=\"token comment\">#(base) \\[\\e]0;\\u@\\h: \\w\\a\\]\\u@\\h:\\w$ </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>阿里云这个AI平台激活conda的base环境命令和别的服务器有些区别，腾讯或者其他的有以下激活方式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> ~/.bashrc\n<span class=\"token comment\">#或者</span>\n<span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>创建虚拟环境并且激活</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> langchain <span class=\"token assign-left variable\">python</span><span class=\"token operator\">==</span><span class=\"token number\">3.11</span>\nconda activate langchain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529153001210.png\" alt=\"image-20240529153001210\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n<span class=\"token builtin class-name\">cd</span> mnt/workspace/Langchain-Chatchat\npip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">transformers</span><span class=\"token operator\">==</span><span class=\"token number\">4.37</span>.2\npip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">torch</span><span class=\"token operator\">==</span><span class=\"token number\">2.1</span>.0 <span class=\"token assign-left variable\">torchvision</span><span class=\"token operator\">==</span><span class=\"token number\">0.16</span>.0 <span class=\"token assign-left variable\">torchaudio</span><span class=\"token operator\">==</span><span class=\"token number\">2.1</span>.0 --index-url https://download.pytorch.org/whl/cu118\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements_api.txt\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements_webui.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"运行模型\"><a href=\"#运行模型\" class=\"headerlink\" title=\"运行模型\"></a>运行模型</h3><p>我就不信这还不能跑</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python startup.py <span class=\"token parameter variable\">-a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529154655651.png\" alt=\"image-20240529154655651\"></p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529161128515.png\" alt=\"image-20240529161128515\"></p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529161438688.png\" alt=\"image-20240529161438688\"></p>\n<h3 id=\"添加新模型-Lora\"><a href=\"#添加新模型-Lora\" class=\"headerlink\" title=\"添加新模型-Lora\"></a>添加新模型-Lora</h3><p>首先到Llama-Factory导出我之前训练的Lora模型，大小大约在15GB左右，因此记得看看自己的硬盘空间</p>\n<p>况且，导出建议使用cpu导出，不然会出现阿里云服务器GPU核未初始化的问题</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163425409.png\" alt=\"image-20240529163425409\"></p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163339254.png\" alt=\"image-20240529163339254\"></p>\n<p>之后修改对应的配置文件</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163528086.png\" alt=\"image-20240529163528086\"></p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529163514672.png\" alt=\"image-20240529163514672\"></p>\n<p>先剪切掉模型配置的”chatglm3-6b”,因为langchain会试图同时加载两个模型，显存会爆。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span> ~/.bashrc\nconda activate langchain\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/\n<span class=\"token builtin class-name\">cd</span> mnt/workspace/Langchain-Chatchat\npython startup.py <span class=\"token parameter variable\">-a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/Aaaou/Blog-hexo/source/_posts/imgs/image-20240529164340292.png\" alt=\"image-20240529164340292\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这次实践完成了langchain的部署和模型的配置，当然，langchain提供的额外的功能和知识库功能我暂时还不清楚用途，慢慢来吧。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clwnrkl3n0009osw5ejo6eeb3","category_id":"clwnrkl390004osw5h610bk24","_id":"clwnrkl3t000gosw5c5d3b5dj"},{"post_id":"clwnrkl300001osw5hx5y38wf","category_id":"clwnrkl390004osw5h610bk24","_id":"clwnrkl3u000josw5dq4h69qr"},{"post_id":"clwnrkl340003osw59xkx47eg","category_id":"clwnrkl390004osw5h610bk24","_id":"clwnrkl3v000mosw58u2p8xy0"},{"post_id":"clwnrkl3d0007osw5hgcg9c2r","category_id":"clwnrkl390004osw5h610bk24","_id":"clwnrkl3w000posw5ag8h12fa"},{"post_id":"clwnrkl3o000aosw52g7sf0bi","category_id":"clwnrkl3v000losw564aj8f65","_id":"clwnrkl3x000uosw56orl8bds"},{"post_id":"clwnrkl3r000eosw5hilld2ev","category_id":"clwnrkl3v000losw564aj8f65","_id":"clwnrkl3y000wosw5fo4w13vi"},{"post_id":"clwnrkl3s000fosw5glz6a944","category_id":"clwnrkl3v000losw564aj8f65","_id":"clwnrkl3z000yosw5g4j5drne"},{"post_id":"clwnrkl46001eosw59584bljj","category_id":"clwnrkl3v000losw564aj8f65","_id":"clwnrkl48001iosw5hmkjaixy"},{"post_id":"clwnrkl47001fosw5gds3e17o","category_id":"clwnrkl390004osw5h610bk24","_id":"clwnrkl49001josw53lpb565r"},{"post_id":"clwnrn3ie00003gw5egof6kaz","category_id":"clwnrkl390004osw5h610bk24","_id":"clwnrojmb00013gw5ezylebzq"},{"post_id":"clwrntp8d0000y0w5fqrpfdqo","category_id":"clwnrkl390004osw5h610bk24","_id":"clwrntp8g0002y0w55bq03ya7"}],"PostTag":[{"post_id":"clwnrkl300001osw5hx5y38wf","tag_id":"clwnrkl3b0005osw56om03qzc","_id":"clwnrkl3r000dosw5fbyd7qgw"},{"post_id":"clwnrkl340003osw59xkx47eg","tag_id":"clwnrkl3p000cosw5bnbjeaom","_id":"clwnrkl3u000kosw521s112wz"},{"post_id":"clwnrkl3d0007osw5hgcg9c2r","tag_id":"clwnrkl3b0005osw56om03qzc","_id":"clwnrkl3w000oosw5dc2e795q"},{"post_id":"clwnrkl3n0009osw5ejo6eeb3","tag_id":"clwnrkl3p000cosw5bnbjeaom","_id":"clwnrkl3x000sosw53kewcwis"},{"post_id":"clwnrkl3o000aosw52g7sf0bi","tag_id":"clwnrkl3w000rosw5bz6i6wou","_id":"clwnrkl400010osw5e8tegd4p"},{"post_id":"clwnrkl3o000aosw52g7sf0bi","tag_id":"clwnrkl3x000vosw5a79s5dhy","_id":"clwnrkl400011osw5ex0icjer"},{"post_id":"clwnrkl3o000aosw52g7sf0bi","tag_id":"clwnrkl3y000xosw59doucsd5","_id":"clwnrkl400013osw5e7oo7ksb"},{"post_id":"clwnrkl3r000eosw5hilld2ev","tag_id":"clwnrkl3w000rosw5bz6i6wou","_id":"clwnrkl410016osw52ed42adf"},{"post_id":"clwnrkl3r000eosw5hilld2ev","tag_id":"clwnrkl3x000vosw5a79s5dhy","_id":"clwnrkl410017osw50t1i4itt"},{"post_id":"clwnrkl3r000eosw5hilld2ev","tag_id":"clwnrkl3y000xosw59doucsd5","_id":"clwnrkl410019osw5dnwc4cbi"},{"post_id":"clwnrkl3s000fosw5glz6a944","tag_id":"clwnrkl3w000rosw5bz6i6wou","_id":"clwnrkl42001bosw5gvljedue"},{"post_id":"clwnrkl3s000fosw5glz6a944","tag_id":"clwnrkl3x000vosw5a79s5dhy","_id":"clwnrkl42001cosw51wbxfuid"},{"post_id":"clwnrkl3s000fosw5glz6a944","tag_id":"clwnrkl3y000xosw59doucsd5","_id":"clwnrkl43001dosw5bxd8fg61"},{"post_id":"clwnrkl47001fosw5gds3e17o","tag_id":"clwnrkl3w000rosw5bz6i6wou","_id":"clwnrkl48001hosw5f001d211"},{"post_id":"clwnrkl46001eosw59584bljj","tag_id":"clwnrkl3w000rosw5bz6i6wou","_id":"clwnrkl49001kosw5c1uq2wb0"},{"post_id":"clwnrkl46001eosw59584bljj","tag_id":"clwnrkl3x000vosw5a79s5dhy","_id":"clwnrkl49001losw5hwkhawfz"},{"post_id":"clwnrkl46001eosw59584bljj","tag_id":"clwnrkl3y000xosw59doucsd5","_id":"clwnrkl49001mosw5fvpfcoy7"},{"post_id":"clwnrkl46001eosw59584bljj","tag_id":"clwnrkl48001gosw5g7jod2bv","_id":"clwnrkl49001nosw5fvxz8t6l"},{"post_id":"clwnrn3ie00003gw5egof6kaz","tag_id":"clwnrkl3p000cosw5bnbjeaom","_id":"clwnrp66v00053gw53qml31ky"},{"post_id":"clwnrn3ie00003gw5egof6kaz","tag_id":"clwnrp8va00063gw5gnqwalif","_id":"clwnrp8va00073gw5dqx15d8p"},{"post_id":"clwrntp8d0000y0w5fqrpfdqo","tag_id":"clwnrkl3b0005osw56om03qzc","_id":"clwrntp8f0001y0w5deyu8i31"}],"Tag":[{"name":"LLM","_id":"clwnrkl3b0005osw56om03qzc"},{"name":"Hexo","_id":"clwnrkl3p000cosw5bnbjeaom"},{"name":"Python","_id":"clwnrkl3w000rosw5bz6i6wou"},{"name":"数据结构","_id":"clwnrkl3x000vosw5a79s5dhy"},{"name":"算法","_id":"clwnrkl3y000xosw59doucsd5"},{"name":"链表","_id":"clwnrkl48001gosw5g7jod2bv"},{"name":"【Hexo","_id":"clwnrp35a00033gw5cbn7cqyj"},{"name":"git","_id":"clwnrp8va00063gw5gnqwalif"}]}}